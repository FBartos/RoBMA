[{"path":"https://https://fbartos.github.io/RoBMA/articles/CustomEnsembles.html","id":"the-dataset","dir":"Articles","previous_headings":"","what":"The Dataset","title":"Fitting Custom Meta-Analytic Ensembles","text":"illustrate custom model building procedure, use data infamous Bem (2011) “Feeling future” precognition study. use coding results summarized Bem one later replies (Bem et al., 2011).","code":"library(RoBMA) #> Loading required namespace: runjags #> Loading required namespace: mvtnorm #> RoBMA version 3.3 now features spike-and-slab style model-averaging via the 'algorithm = \"ss\"' argument. #> See 'vignette(\"FastRoBMA\", package = \"RoBMA\")' for more details ('algorithm = \"ss\"' argument will become the default setting in the future major release of the package).  data(\"Bem2011\", package = \"RoBMA\") Bem2011 #>      d         se                                        study #> 1 0.25 0.10155048                  Detection of Erotic Stimuli #> 2 0.20 0.08246211                Avoidance of Negative Stimuli #> 3 0.26 0.10323629                        Retroactive Priming I #> 4 0.23 0.10182427                       Retroactive Priming II #> 5 0.22 0.10120277  Retroactive Habituation I - Negative trials #> 6 0.15 0.08210765 Retroactive Habituation II - Negative trials #> 7 0.09 0.07085372             Retroactive Induction of Boredom #> 8 0.19 0.10089846                     Facilitation of Recall I #> 9 0.42 0.14752627                    Facilitation of Recall II"},{"path":"https://https://fbartos.github.io/RoBMA/articles/CustomEnsembles.html","id":"the-custom-ensemble","dir":"Articles","previous_headings":"","what":"The Custom Ensemble","title":"Fitting Custom Meta-Analytic Ensembles","text":"consider following scenarios plausible explanations data, decide include models meta-analytic ensemble: absolutely precognition effect - fixed effects model assuming effect size zero (H0fH_{0}^f), experiments measured underlying precognition effect - fixed effects model (H1fH_{1}^f), experiments measured slightly different precognition effect - random effects model (H1rH_{1}^r), absolutely precognition effect results can explained publication bias, modeled one following publication bias adjustments: - 4.1) one-sided selection operating significant p-values (H1,pb1fH_{1,\\text{pb1}}^f), - 4.2) one-sided selection operating significant marginally significant p-values (H1,pb2fH_{1,\\text{pb2}}^f), - 4.3) PET correction publication bias adjusts relationship effect sizes standard errors (H1,pb3fH_{1,\\text{pb3}}^f), - 4.4) PEESE correction publication bias adjusts relationship effect sizes standard errors squared (H1,pb4fH_{1,\\text{pb4}}^f). fit ensemble using RoBMA() function specifying priors, ended 2 (effect effect) * 2 (heterogeneity heterogeneity) * 5 (publication bias 4 ways adjusting publication bias) = 20 models. 13 models requested. Furthermore, specify different parameters prior distributions model. following process allows , though utilize . start fitting first model using RoBMA() function continuously update fitted object include models.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/articles/CustomEnsembles.html","id":"model-1","dir":"Articles","previous_headings":"The Custom Ensemble","what":"Model 1","title":"Fitting Custom Meta-Analytic Ensembles","text":"initiate model ensemble specifying first model RoBMA() function. explicitly specify prior distributions components set prior distributions correspond null hypotheses set seed ensure reproducibility results. verify ensemble contains single specified model summary() function setting type = \"models\".","code":"fit <- RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study,              priors_effect = NULL, priors_heterogeneity = NULL, priors_bias = NULL,              priors_effect_null        = prior(\"spike\", parameters = list(location = 0)),              priors_heterogeneity_null = prior(\"spike\", parameters = list(location = 0)),              priors_bias_null          = prior_none(),              seed = 1) summary(fit, type = \"models\") #> Call: #> RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study,  #>     priors_effect = NULL, priors_heterogeneity = NULL, priors_bias = NULL,  #>     priors_effect_null = prior(\"spike\", parameters = list(location = 0)),  #>     priors_heterogeneity_null = prior(\"spike\", parameters = list(location = 0)),  #>     priors_bias_null = prior_none(), seed = 1) #>  #> Robust Bayesian meta-analysis #> Models overview: #>  Model Prior Effect Prior Heterogeneity Prior prob. log(marglik) Post. prob. #>      1     Spike(0)            Spike(0)       1.000        -3.28       1.000 #>  Inclusion BF #>           Inf"},{"path":"https://https://fbartos.github.io/RoBMA/articles/CustomEnsembles.html","id":"model-2","dir":"Articles","previous_headings":"The Custom Ensemble","what":"Model 2","title":"Fitting Custom Meta-Analytic Ensembles","text":"add second model ensemble, need decide prior distribution mean parameter. precognition exist, effect small since casinos bankrupted otherwise. effect also positive, since deviation randomness characterized effect. Therefore, decide use normal distribution mean = 0.15, standard deviation 0.10, truncated positive range. sets prior density around small effect sizes. get better grasp prior distribution, visualize using plot()) function (figure can also created using ggplot2 package adding plot_type = \"ggplot\" argument).  add second model ensemble using update.RoBMA() function. function can also used many purposes - updating settings, prior model weights, refitting failed models. , supply fitted ensemble object add argument specifying prior distributions component additional model. Since want add Model 2 - set prior μ\\mu parameter treated prior belonging alternative hypothesis effect size component remaining priors treated belonging null hypotheses. wanted, also specify prior_weights argument, change prior probability fitted model utilize option keep default value, sets prior weights new model 1. (Note arguments specifying prior distributions update.RoBMA() function prior_X - singular, comparison RoBMA() function uses priors_X plural.) can inspect updated ensemble verify contains models. see Model 2 notably outperformed first model attained posterior model probability.","code":"plot(prior(\"normal\", parameters = list(mean = .15, sd = .10), truncation = list(lower = 0))) fit <- update(fit,               prior_effect             = prior(\"normal\", parameters = list(mean = .15, sd = .10), truncation = list(lower = 0)),               prior_heterogeneity_null = prior(\"spike\",  parameters = list(location = 0)),               prior_bias_null          = prior_none()) summary(fit, type = \"models\") #> Call: #> RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study,  #>     priors_effect = NULL, priors_heterogeneity = NULL, priors_bias = NULL,  #>     priors_effect_null = prior(\"spike\", parameters = list(location = 0)),  #>     priors_heterogeneity_null = prior(\"spike\", parameters = list(location = 0)),  #>     priors_bias_null = prior_none(), seed = 1) #>  #> Robust Bayesian meta-analysis #> Models overview: #>  Model        Prior Effect       Prior Heterogeneity Prior prob. log(marglik) #>      1                  Spike(0)            Spike(0)       0.500        -3.28 #>      2 Normal(0.15, 0.1)[0, Inf]            Spike(0)       0.500        14.91 #>  Post. prob. Inclusion BF #>        0.000        0.000 #>        1.000 79422247.251"},{"path":"https://https://fbartos.github.io/RoBMA/articles/CustomEnsembles.html","id":"models-3-4-4","dir":"Articles","previous_headings":"The Custom Ensemble","what":"Models 3-4.4","title":"Fitting Custom Meta-Analytic Ensembles","text":"add remaining models ensemble using update() function, need decide remaining prior distributions. Specifically, prior distribution heterogeneity parameter τ\\tau, publication bias adjustment parameters ω\\omega (selection models’ weightfunctions) PET PEESE PET PEESE adjustment. Model 3, use usual inverse-gamma(1, .15) prior distribution based empirical heterogeneity estimates (Erp et al., 2017) heterogeneity parameter τ\\tau. Models 4.1-4.4 use default settings publication bias adjustments outlined Appendix B (Bartoš et al., 2023). Now, just need add remaining models ensemble using update() function already illustrated. verify requested models included ensemble using summary()) function type = \"models\" argument.","code":"### adding Model 3 fit <- update(fit,               prior_effect        = prior(\"normal\", parameters = list(mean = .15, sd = .10), truncation = list(lower = 0)),               prior_heterogeneity = prior(\"invgamma\", parameters = list(shape = 1, scale = .15)),               prior_bias_null     = prior_none())  ### adding Model 4.1 fit <- update(fit,               prior_effect_null        = prior(\"spike\",     parameters = list(location = 0)),               prior_heterogeneity_null = prior(\"spike\",     parameters = list(location = 0)),               prior_bias               = prior_weightfunction(\"one.sided\", parameters = list(alpha = c(1, 1), steps = c(0.05))))                ### adding Model 4.2 fit <- update(fit,               prior_effect_null        = prior(\"spike\",     parameters = list(location = 0)),               prior_heterogeneity_null = prior(\"spike\",     parameters = list(location = 0)),               prior_bias               = prior_weightfunction(\"one.sided\", parameters = list(alpha = c(1, 1, 1), steps = c(0.05, 0.10))))                ### adding Model 4.3 fit <- update(fit,               prior_effect_null        = prior(\"spike\",     parameters = list(location = 0)),               prior_heterogeneity_null = prior(\"spike\",     parameters = list(location = 0)),               prior_bias               = prior_PET(\"Cauchy\", parameters = list(0, 1),  truncation = list(lower = 0)))                ### adding Model 4.4 fit <- update(fit,               prior_effect_null        = prior(\"spike\",     parameters = list(location = 0)),               prior_heterogeneity_null = prior(\"spike\",     parameters = list(location = 0)),               prior_bias               = prior_PEESE(\"Cauchy\", parameters = list(0, 5),  truncation = list(lower = 0))) summary(fit, type = \"models\") #> Call: #> RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study,  #>     priors_effect = NULL, priors_heterogeneity = NULL, priors_bias = NULL,  #>     priors_effect_null = prior(\"spike\", parameters = list(location = 0)),  #>     priors_heterogeneity_null = prior(\"spike\", parameters = list(location = 0)),  #>     priors_bias_null = prior_none(), seed = 1) #>  #> Robust Bayesian meta-analysis #> Models overview: #>  Model        Prior Effect       Prior Heterogeneity #>      1                  Spike(0)            Spike(0) #>      2 Normal(0.15, 0.1)[0, Inf]            Spike(0) #>      3 Normal(0.15, 0.1)[0, Inf]   InvGamma(1, 0.15) #>      4                  Spike(0)            Spike(0) #>      5                  Spike(0)            Spike(0) #>      6                  Spike(0)            Spike(0) #>      7                  Spike(0)            Spike(0) #>                      Prior Bias                     Prior prob. log(marglik) #>                                                           0.143        -3.28 #>                                                           0.143        14.91 #>                                                           0.143        12.85 #>       omega[one-sided: .05] ~ CumDirichlet(1, 1)          0.143        13.70 #>   omega[one-sided: .1, .05] ~ CumDirichlet(1, 1, 1)       0.143        12.58 #>                         PET ~ Cauchy(0, 1)[0, Inf]        0.143        15.75 #>                       PEESE ~ Cauchy(0, 5)[0, Inf]        0.143        15.65 #>  Post. prob. Inclusion BF #>        0.000        0.000 #>        0.168        1.210 #>        0.021        0.132 #>        0.050        0.318 #>        0.016        0.100 #>        0.391        3.845 #>        0.353        3.278"},{"path":"https://https://fbartos.github.io/RoBMA/articles/CustomEnsembles.html","id":"using-the-fitted-ensemble","dir":"Articles","previous_headings":"","what":"Using the Fitted Ensemble","title":"Fitting Custom Meta-Analytic Ensembles","text":"Finally, use summary() function inspect model results. results custom ensemble indicate weak evidence absence precognition effect, BF10=0.584\\text{BF}_{10} = 0.584 -> BF01=1.71\\text{BF}_{01} = 1.71, moderate evidence absence heterogeneity, BFrf=0.132\\text{BF}_{\\text{rf}} = 0.132 -> BFfr=7.58\\text{BF}_{\\text{fr}} = 7.58, moderate evidence presence publication bias, BFpb=3.21\\text{BF}_{\\text{pb}} = 3.21. finalized ensemble can treated RoBMA ensemble using summary(), plot(), plot_models(), forest(), diagnostics() functions. example, can use plot.RoBMA() parameter = \"mu\", prior = TRUE arguments plot prior (grey) posterior distribution (black) effect size. function visualizes model-averaged estimates across models default. arrows represent probability mass value 0 (spike 0). secondary y-axis (right) shows probability mass zero effect size, increased prior probability 0.71 posterior posterior probability 0.81.  can also inspect posterior distributions publication bias adjustments. visualize model-averaged weightfunction, set parameter = weightfunction argument. resulting figure shows light gray prior distribution dark gray posterior distribution.  can also inspect posterior estimate regression relationship standard errors effect sizes setting parameter = \"PET-PEESE\".","code":"summary(fit) #> Call: #> RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study,  #>     priors_effect = NULL, priors_heterogeneity = NULL, priors_bias = NULL,  #>     priors_effect_null = prior(\"spike\", parameters = list(location = 0)),  #>     priors_heterogeneity_null = prior(\"spike\", parameters = list(location = 0)),  #>     priors_bias_null = prior_none(), seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect           2/7       0.286       0.189        0.584 #> Heterogeneity    1/7       0.143       0.021        0.132 #> Bias             4/7       0.571       0.811        3.212 #>  #> Model-averaged estimates: #>                  Mean Median 0.025  0.975 #> mu              0.036  0.000 0.000  0.226 #> tau             0.002  0.000 0.000  0.000 #> omega[0,0.05]   1.000  1.000 1.000  1.000 #> omega[0.05,0.1] 0.938  1.000 0.014  1.000 #> omega[0.1,1]    0.935  1.000 0.012  1.000 #> PET             0.820  0.000 0.000  2.601 #> PEESE           7.284  0.000 0.000 25.508 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). plot(fit, parameter = \"mu\", prior = TRUE) plot(fit, parameter = \"weightfunction\", prior = TRUE) plot(fit, parameter = \"PET-PEESE\", prior = TRUE)"},{"path":"https://https://fbartos.github.io/RoBMA/articles/CustomEnsembles.html","id":"footnotes","dir":"Articles","previous_headings":"","what":"Footnotes","title":"Fitting Custom Meta-Analytic Ensembles","text":"1^1 - default setting used produce 12 models RoBMA versions < 2, corresponded earlier article Maier et al. (2023) applied Bayesian model-averaging across selection models.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/articles/FastRoBMA.html","id":"fitting-models-via-bridge-sampling-vs--spike-and-slab","dir":"Articles","previous_headings":"","what":"Fitting Models via Bridge Sampling vs. Spike-and-Slab","title":"Fast Robust Bayesian Meta-Analysis via Spike and Slab Algorithm","text":", specify fit meta-regression publication bias adjustment using two algorithms. First, load package inspect data set. Second, estimate meta-regression models using two algorithms. use formula, data, settings algorithms. bridge sampling approach specified algorithm = \"bridge\", spike--slab approach specified algorithm = \"ss\". use current default settings number chains, samples, burn-, adaptation settings bridge algorithm, however, significantly increase number chains samples spike--slab algorithm ensure convergence. important spike--slab algorithm estimates complete model-averaged ensemble within single MCMC run, bridge algorithm estimates model separately combines . also time estimation process comparison using Sys.time() function. models fitted, compute time taken fit model. Running high-performing laptop 6c/12t Intel CPU, bridge sampling approach took 24 minutes, spike--slab approach took ~0.58 minutes. highlights efficiency advantage spike--slab algorithm number moderators (hence number potential models) grows. especially important number models grows following 36x2^p, p corresponds number moderators. example, 3 moderators, number models 36x2^3 = 288, 4 moderators, number models 36x2^4 = 576 (essentially unattainable consumer PC).","code":"library(RoBMA) data(\"Andrews2021\", package = \"RoBMA\") head(Andrews2021) #>       r         se measure      age #> 1 0.070 0.04743416  direct 4.606660 #> 2 0.033 0.04371499  direct 2.480833 #> 3 0.170 0.10583005  direct 7.750000 #> 4 0.208 0.08661986  direct 4.000000 #> 5 0.270 0.02641969  direct 4.000000 #> 6 0.170 0.05147815  direct 4.487500 ## Bridge sampling t1_bridge <- Sys.time() fit_RoBMA.bridge <- RoBMA.reg(   formula   = ~ measure + age,   data      = Andrews2021,   algorithm = \"bridge\",    chains    = 3,    sample    = 5000,    burnin    = 2000,   adapt     = 500,   parallel  = TRUE ) t2_bridge <- Sys.time()  ## Spike-and-slab t1_ss <- Sys.time() fit_RoBMA.ss <- RoBMA.reg(   formula   = ~ measure + age,   data      = Andrews2021,   algorithm = \"ss\",    chains    = 6,    sample    = 10000,   burnin    = 2500,   adapt     = 2500,   parallel  = TRUE ) t2_ss <- Sys.time() bridge_time <- difftime(t2_bridge, t1_bridge, units = \"mins\") ss_time     <- difftime(t2_ss, t1_ss, units = \"mins\")"},{"path":"https://https://fbartos.github.io/RoBMA/articles/FastRoBMA.html","id":"comparing-summary-outputs","dir":"Articles","previous_headings":"","what":"Comparing Summary Outputs","title":"Fast Robust Bayesian Meta-Analysis via Spike and Slab Algorithm","text":"compare numeric summaries using summary() fitted object. posterior probabilities component similar. example, posterior probability including measure moderator ≈ 0.95 fits, probability including age moderator ≈ 0.15. posterior mean estimates mu, tau, regression coefficients essentially (differences within 3rd decimal place). Inclusion Bayes factors differ slightly (0.499 vs. 0.508, etc.) meaningful qualitatively different way. Hence, algorithms yield consistent inferences differ drastically computation time many models evaluate. Visual inspection posterior distributions effect size moderators reveals two algorithms produce nearly identical results.  Next, compare marginal estimates moderators level measure, age (centered -1 SD, 0 SD, +1 SD, respectively). “marginal means” clarify estimated model-averaged effect factor level. use marginal_summary() function extract summaries. , mean estimates differ third decimal place differences inclusion BF qualitatively equal (e.g., 8.950 vs. 8.639 inclusion Bayes factor measure[informant] level). visual comparison estimated marginal means reveals two algorithms produce nearly identical results.","code":"summary(fit_RoBMA.bridge) #> Call: #> RoBMA.reg(formula = ~measure + age, data = Andrews2021, algorithm = \"bridge\",  #>     chains = 3, sample = 5000, burnin = 2000, adapt = 500, parallel = TRUE) #>  #> Robust Bayesian meta-regression #> Components summary: #>                Models Prior prob. Post. prob. Inclusion BF #> Effect         72/144       0.500       0.337 5.080000e-01 #> Heterogeneity  72/144       0.500       1.000 1.043245e+23 #> Bias          128/144       0.500       0.965 2.796700e+01 #>  #> Meta-regression components summary: #>         Models Prior prob. Post. prob. Inclusion BF #> measure 72/144       0.500       0.950       18.955 #> age     72/144       0.500       0.154        0.181 #>  #> Model-averaged estimates: #>                    Mean Median 0.025 0.975 #> mu                0.064  0.000 0.000 0.328 #> tau               0.212  0.208 0.149 0.297 #> omega[0,0.025]    1.000  1.000 1.000 1.000 #> omega[0.025,0.05] 0.999  1.000 1.000 1.000 #> omega[0.05,0.5]   0.998  1.000 1.000 1.000 #> omega[0.5,0.95]   0.996  1.000 1.000 1.000 #> omega[0.95,0.975] 0.996  1.000 1.000 1.000 #> omega[0.975,1]    0.997  1.000 1.000 1.000 #> PET               2.046  2.487 0.000 3.292 #> PEESE             1.006  0.000 0.000 9.780 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #> (Estimated publication weights omega correspond to one-sided p-values.) #>  #> Model-averaged meta-regression estimates: #>                            Mean Median  0.025 0.975 #> intercept                 0.064  0.000  0.000 0.328 #> measure [dif: direct]    -0.125 -0.129 -0.214 0.000 #> measure [dif: informant]  0.125  0.129  0.000 0.214 #> age                       0.000  0.000 -0.044 0.044 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). summary(fit_RoBMA.ss) #> Call: #> RoBMA.reg(formula = ~measure + age, data = Andrews2021, algorithm = \"ss\",  #>     chains = 6, sample = 10000, burnin = 2500, adapt = 2500,  #>     parallel = TRUE) #>  #> Robust Bayesian meta-regression #> Components summary: #>               Prior prob. Post. prob. Inclusion BF #> Effect              0.500       0.333        0.499 #> Heterogeneity       0.500       1.000          Inf #> Bias                0.500       0.966       28.340 #>  #> Meta-regression components summary: #>         Prior prob. Post. prob. Inclusion BF #> measure       0.500       0.953       20.307 #> age           0.500       0.151        0.178 #>  #> Model-averaged estimates: #>                    Mean Median 0.025  0.975 #> mu                0.062  0.000 0.000  0.331 #> tau               0.211  0.207 0.148  0.297 #> omega[0,0.025]    1.000  1.000 1.000  1.000 #> omega[0.025,0.05] 0.999  1.000 1.000  1.000 #> omega[0.05,0.5]   0.998  1.000 1.000  1.000 #> omega[0.5,0.95]   0.996  1.000 1.000  1.000 #> omega[0.95,0.975] 0.996  1.000 1.000  1.000 #> omega[0.975,1]    0.996  1.000 1.000  1.000 #> PET               2.059  2.504 0.000  3.301 #> PEESE             1.008  0.000 0.000 10.123 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #> (Estimated publication weights omega correspond to one-sided p-values.) #>  #> Model-averaged meta-regression estimates: #>                            Mean Median  0.025 0.975 #> intercept                 0.062  0.000  0.000 0.331 #> measure [dif: direct]    -0.125 -0.128 -0.214 0.000 #> measure [dif: informant]  0.125  0.128  0.000 0.214 #> age                       0.000  0.000 -0.045 0.043 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). par(mfrow = c(1, 2), mar = c(4, 4, 2, 5)) plot(fit_RoBMA.bridge, parameter = \"mu\", prior = TRUE, main = \"Bridge Sampling\") plot(fit_RoBMA.ss,     parameter = \"mu\", prior = TRUE, main = \"Spike-and-Slab\") marginal_summary(fit_RoBMA.bridge) #> Call: #> RoBMA.reg(formula = ~measure + age, data = Andrews2021, algorithm = \"bridge\",  #>     chains = 3, sample = 5000, burnin = 2000, adapt = 500, parallel = TRUE) #>  #> Robust Bayesian meta-analysis #> Model-averaged marginal estimates: #>                      Mean Median  0.025 0.975 Inclusion BF #> intercept           0.064  0.000  0.000 0.328        0.508 #> measure[direct]    -0.061 -0.108 -0.208 0.246        0.844 #> measure[informant]  0.188  0.156  0.000 0.458        8.950 #> age[-1SD]           0.064  0.000 -0.030 0.326        0.300 #> age[0SD]            0.064  0.000  0.000 0.328        0.356 #> age[1SD]            0.064  0.000 -0.043 0.335        0.307 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #> mu_age[0SD]: There is a considerable cluster of posterior samples at the exact null hypothesis values. The Savage-Dickey density ratio is likely to be invalid. #> mu_age[0SD]: There is a considerable cluster of prior samples at the exact null hypothesis values. The Savage-Dickey density ratio is likely to be invalid. marginal_summary(fit_RoBMA.ss) #> Call: #> RoBMA.reg(formula = ~measure + age, data = Andrews2021, algorithm = \"ss\",  #>     chains = 6, sample = 10000, burnin = 2500, adapt = 2500,  #>     parallel = TRUE) #>  #> Robust Bayesian meta-analysis #> Model-averaged marginal estimates: #>                      Mean Median  0.025 0.975 Inclusion BF #> intercept           0.062  0.000  0.000 0.331        0.492 #> measure[direct]    -0.063 -0.108 -0.211 0.241        0.781 #> measure[informant]  0.187  0.154  0.000 0.460        8.639 #> age[-1SD]           0.062  0.000 -0.031 0.328        0.298 #> age[0SD]            0.062  0.000  0.000 0.331        0.310 #> age[1SD]            0.062  0.000 -0.047 0.340        0.296 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #> mu_age[0SD]: There is a considerable cluster of posterior samples at the exact null hypothesis values. The Savage-Dickey density ratio is likely to be invalid. #> mu_age[0SD]: There is a considerable cluster of prior samples at the exact null hypothesis values. The Savage-Dickey density ratio is likely to be invalid. par(mfrow = c(1, 2)) marginal_plot(fit_RoBMA.bridge, parameter = \"measure\", conditional = TRUE, prior = TRUE, xlim = c(-1, 1), ylim = c(0, 7), main = \"Bridge Sampling\") marginal_plot(fit_RoBMA.ss,     parameter = \"measure\", conditional = TRUE, prior = TRUE, xlim = c(-1, 1), ylim = c(0, 7), main = \"Spike-and-Slab\")"},{"path":"https://https://fbartos.github.io/RoBMA/articles/FastRoBMA.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Fast Robust Bayesian Meta-Analysis via Spike and Slab Algorithm","text":"Spike--slab (algorithm = \"ss\") much faster bridge sampling (algorithm = \"bridge\") estimating robust Bayesian meta-analysis model ensembles. advantage extends cases meta-regression models involving many predictors. Despite huge differences computation time, algorithms produce nearly identical inferences model-averaged effect sizes, moderator effects, posterior probabilities. Currently, \"bridge\" algorithm remains default option RoBMA R package future major releases switch \"ss\" algorithms new default (modify default MCMC settings).","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"example-data-set","dir":"Articles","previous_headings":"","what":"Example Data Set","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"use dat.konstantopoulos2011 data set metadat R package (Thomas et al., 2019) used functionality metafor (Wolfgang, 2010) R package. roughly follow example data set’s help file, ?dat.konstantopoulos2011. data set consists 56 studies estimating effects modified school calendars students’ achievement. 56 studies run individual schools, can grouped 11 districts. might expect similar effect size estimates schools district – words, effect size estimates district might completely independent. Consequently, might want adjust dependency (clustering) effect size estimates draw appropriate inference. First, load data set, assign dat object, inspect first rows. following analyses, use following variables: yi, standardized mean differences, vi, sampling variances standardized mean differences, district, district id distinguishes among districts, school, distinguishes among different schools within district.","code":"data(\"dat.konstantopoulos2011\", package = \"metadat\") dat <- dat.konstantopoulos2011  head(dat) #>   district school study year    yi    vi #> 1       11      1     1 1976 -0.18 0.118 #> 2       11      2     2 1976 -0.22 0.118 #> 3       11      3     3 1976  0.23 0.144 #> 4       11      4     4 1976 -0.30 0.144 #> 5       12      1     5 1989  0.13 0.014 #> 6       12      2     6 1989 -0.26 0.014"},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"frequentist-hierarchical-meta-analysis-with-metafor","dir":"Articles","previous_headings":"","what":"Frequentist Hierarchical Meta-Analysis with metafor","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"follow data set’s help file fit simple random effects meta-analysis using rma() function metafor package. model ignores dependency effect size estimates. use simple model starting point comparison later models. model summary returns small statistically significant effect size estimate μ=0.128\\mu = 0.128 (se=0.044\\text{se} = 0.044) considerable heterogeneity estimate τ=0.297\\tau = 0.297. extend model account hierarchical structure data, .e., schools within districts, using rma.mv() function metafor package extending random = ~ school | district argument. find accounting hierarchical structure data results (1) slightly larger effect size estimate (μ=0.187\\mu = 0.187) (2) larger standard error effect size estimate (se=0.085\\text{se} = 0.085). larger standard error natural consequence accounting dependency effect sizes. effect sizes dependent, contribute less additional information independent effect sizes . Specifying hierarchical model accounts dependency estimating similarity estimates cluster (school) discounting information borrowed estimate. estimate similarity among estimates cluster summarized \\rho = 0.666 estimate.","code":"fit_metafor.0 <- metafor::rma(yi = yi, vi = vi, data = dat) fit_metafor.0 #>  #> Random-Effects Model (k = 56; tau^2 estimator: REML) #>  #> tau^2 (estimated amount of total heterogeneity): 0.0884 (SE = 0.0202) #> tau (square root of estimated tau^2 value):      0.2974 #> I^2 (total heterogeneity / total variability):   94.70% #> H^2 (total variability / sampling variability):  18.89 #>  #> Test for Heterogeneity: #> Q(df = 55) = 578.8640, p-val < .0001 #>  #> Model Results: #>  #> estimate      se    zval    pval   ci.lb   ci.ub      #>   0.1279  0.0439  2.9161  0.0035  0.0419  0.2139  **  #>  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 fit_metafor <- metafor::rma.mv(yi, vi, random = ~ school | district, data = dat) fit_metafor #>  #> Multivariate Meta-Analysis Model (k = 56; method: REML) #>  #> Variance Components: #>  #> outer factor: district (nlvls = 11) #> inner factor: school   (nlvls = 11) #>  #>             estim    sqrt  fixed  #> tau^2      0.0978  0.3127     no  #> rho        0.6653             no  #>  #> Test for Heterogeneity: #> Q(df = 55) = 578.8640, p-val < .0001 #>  #> Model Results: #>  #> estimate      se    zval    pval   ci.lb   ci.ub     #>   0.1847  0.0846  2.1845  0.0289  0.0190  0.3504  *  #>  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"specifications-of-hierarchical-meta-analysis","dir":"Articles","previous_headings":"","what":"Specifications of Hierarchical Meta-Analysis","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"specify simple hierarchical meta-analytic model (see Konstantopoulos (2011) example). Using distributional notation, can describe data generating process multi-stage sampling procedure. nutshell, assume existence overall mean effect μ\\mu. Next, assume effect sizes district k=1,…,Kk = 1, \\dots, K, γk\\gamma_k, systematically differ mean effect, variance district-level effects summarized heterogeneity τb\\tau_{b} (). Furthermore, assume true effects θk,j\\theta_{k,j} study j=1,…Jkj = 1, \\dots J_k systematically differ district-level effect, variance study effects district-level effect summarized heterogeneity τw\\tau_{w} (within). Finally, observed effect sizes yk,jy_{k,j} differ true effects yk,jy_{k,j} due random errors sek,j\\text{se}_{k,j}. Mathematically, can describe model : γk∼N(μ,τb2),θk,j∼N(γk,τw2),yk,j∼N(θk,j,sek,j). \\begin{aligned}   \\gamma_k     &\\sim \\text{N}(\\mu,          \\tau_b^2),\\\\   \\theta_{k,j} &\\sim \\text{N}(\\gamma_k,     \\tau_w^2),\\\\    y_{k,j}     &\\sim \\text{N}(\\theta_{k,j}, \\text{se}_{k,j}).\\\\ \\end{aligned}  N() denotes normal distribution mean variance. Conveniently, bit algebra, need estimate district-level true study effects. Instead, marginalize , sample observed effect sizes district yk,.y_{k,.} directly multivariate normal distributions, MN(), common mean μ\\mu covariance matrix S: yk,.∼MN(μ,S),S=[τb2+τw2+se12τw2…τw2τw2τb2+τw2+se22…τw2…………τw2τw2…τb2+τw2+seJk2]. \\begin{aligned}    y_{k,.}  &\\sim \\text{MN}(\\mu, \\text{S}),\\\\    \\text{S} &= \\begin{bmatrix}        \\tau_b^2 + \\tau_w^2 + \\text{se}_1^2 & \\tau_w^2 & \\dots & \\tau_w^2  \\\\       \\tau_w^2 & \\tau_b^2 + \\tau_w^2 + \\text{se}_2^2 & \\dots & \\tau_w^2  \\\\       \\dots  & \\dots & \\dots & \\dots \\\\       \\tau_w^2 & \\tau_w^2 & \\dots & \\tau_b^2 + \\tau_w^2 + \\text{se}_{J_k}^2 & \\\\   \\end{bmatrix}. \\end{aligned}  random effects marginalization helpful allows us sample fewer parameters posterior distribution (significantly simplifies marginal likelihood estimation via bridge sampling). Furthermore, marginalization allows us properly specify selection model publication bias adjustment models – marginalization propagates selection process sampling steps (proceed sequential sampling selection procedure observed effect sizes modifies sampling distributions preceding levels). can re-parameterize model performing following substitution, τ2=τb2+τw2,ρ=τw2τb2+τw2, \\begin{aligned}    \\tau^2 &= \\tau_b^2 + \\tau_w^2,\\\\    \\rho   &= \\frac{\\tau_w^2}{\\tau_b^2 + \\tau_w^2}, \\end{aligned}  specifying covariance matrix using inter-study correlation ρ\\rho, total heterogeneity τ\\tau, standard errors se.\\text{se}_{.}: S=[τ2+se12ρτ2…ρτ2ρτ2τ2+se22…ρτ2…………ρτ2ρτ2…τ2+seJk2]. \\begin{aligned}    \\text{S} &= \\begin{bmatrix}        \\tau^2 + \\text{se}_1^2 & \\rho\\tau^2 & \\dots & \\rho\\tau^2  \\\\       \\rho\\tau^2 & \\tau^2 + \\text{se}_2^2 & \\dots & \\rho\\tau^2  \\\\       \\dots  & \\dots & \\dots & \\dots \\\\       \\rho\\tau^2 & \\rho\\tau^2 & \\dots & \\tau^2 + \\text{se}_{J_k}^2 & \\\\   \\end{bmatrix}. \\end{aligned}  specification corresponds compound symmetry covariance matrix random effects, default settings metafor::rma.mv() function. importantly, allows us easily specify prior distributions correlation coefficient ρ\\rho total heterogeneity τ\\tau.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"hierarchical-bayesian-model-averaged-meta-analysis-with-robma","dir":"Articles","previous_headings":"","what":"Hierarchical Bayesian Model-Averaged Meta-Analysis with RoBMA","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"estimate complete Hierarchical Bayesian Model-Averaged Meta-Analysis (hBMA) RoBMA package, briefly reproduce simpler models estimated metafor package previous section.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"bayesian-random-effects-meta-analysis","dir":"Articles","previous_headings":"Hierarchical Bayesian Model-Averaged Meta-Analysis with RoBMA","what":"Bayesian Random Effects Meta-Analysis","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"First, estimate simple Bayesian random effects meta-analysis (corresponding fit_metafor.0). use RoBMA() function specify effect sizes sampling variances via d = dat$yi v = dat$vi arguments. set priors_effect_null, priors_heterogeneity_null, priors_bias arguments null omit models assuming absence effect, heterogeneity, publication bias adjustment components. generate complete summary estimated model adding type = \"individual\" argument summary() function. verify effect size, μ=0.126\\mu = 0.126 (95% CI [0.041,0.211]\\text{95% CI } [0.041, 0.211]), heterogeneity, τ=0.292\\tau = 0.292 (95% CI [0.233,0.364]\\text{95% CI } [0.233, 0.364]), estimates closely correspond frequentist results (expect parameter estimates weakly informative priors).","code":"fit.0 <- RoBMA(d = dat$yi, v = dat$vi,                priors_effect_null        = NULL,                priors_heterogeneity_null = NULL,                priors_bias               = NULL,                parallel = TRUE, seed = 1) summary(fit.0, type = \"individual\") #> Call: #> RoBMA(d = dat$yi, v = dat$vi, priors_bias = NULL, priors_effect_null = NULL,  #>     priors_heterogeneity_null = NULL, parallel = TRUE, seed = 1) #>  #> Robust Bayesian meta-analysis                                                                #>  Model              1             Parameter prior distributions #>  Prior prob.    1.000                    mu ~ Normal(0, 1)      #>  log(marglik)   17.67                   tau ~ InvGamma(1, 0.15) #>  Post. prob.    1.000                                           #>  Inclusion BF     Inf                                           #>  #> Parameter estimates: #>      Mean    SD   lCI Median   uCI error(MCMC) error(MCMC)/SD  ESS R-hat #> mu  0.126 0.043 0.041  0.127 0.211     0.00044          0.010 9757 1.000 #> tau 0.292 0.033 0.233  0.290 0.364     0.00034          0.010 9678 1.000 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale)."},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"hierarchical-bayesian-random-effects-meta-analysis","dir":"Articles","previous_headings":"Hierarchical Bayesian Model-Averaged Meta-Analysis with RoBMA","what":"Hierarchical Bayesian Random Effects Meta-Analysis","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"Second, account clustered effect size estimates within districts extending previous function call study_ids = dat$district argument. allows us estimate hierarchical Bayesian random effects meta-analysis (corresponding fit_metafor). use default prior distribution correlation parameter \\rho \\sim \\text{Beta}(1, 1), set via priors_hierarchical argument, restricts correlation positive uniformly distributed interval (0,1)(0, 1). , generate complete summary estimated model, verify estimates, , correspond frequentist counterparts, estimated effect size, μ=0.181\\mu = 0.181 (95% CI [0.017,0.346]\\text{95% CI } [0.017, 0.346]), heterogeneity, τ=0.308\\tau = 0.308 (95% CI [0.223,0.442]\\text{95% CI } [0.223, 0.442]), correlation, ρ=0.627\\rho = 0.627 (95% CI [0.320,0.864]\\text{95% CI } [0.320, 0.864]). can visualize prior posterior distribution ρ\\rho parameter using plot() function.","code":"fit <- RoBMA(d = dat$yi, v = dat$vi, study_ids = dat$district,              priors_effect_null        = NULL,              priors_heterogeneity_null = NULL,              priors_bias               = NULL,              parallel = TRUE, seed = 1) summary(fit, type = \"individual\") #> Call: #> RoBMA(d = dat$yi, v = dat$vi, study_ids = dat$district, priors_bias = NULL,  #>     priors_effect_null = NULL, priors_heterogeneity_null = NULL,  #>     parallel = TRUE, seed = 1) #>  #> Robust Bayesian meta-analysis                                                                #>  Model              1             Parameter prior distributions #>  Prior prob.    1.000                    mu ~ Normal(0, 1)      #>  log(marglik)   25.70                   tau ~ InvGamma(1, 0.15) #>  Post. prob.    1.000                   rho ~ Beta(1, 1)        #>  Inclusion BF     Inf                                           #>  #> Parameter estimates: #>      Mean    SD   lCI Median   uCI error(MCMC) error(MCMC)/SD  ESS R-hat #> mu  0.181 0.083 0.017  0.180 0.346     0.00088          0.011 9041 1.000 #> tau 0.308 0.056 0.223  0.299 0.442     0.00090          0.016 3859 1.000 #> rho 0.627 0.142 0.320  0.641 0.864     0.00219          0.015 4202 1.000 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). par(mar = c(2, 4, 0, 0)) plot(fit, parameter = \"rho\", prior = TRUE)"},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"hierarchical-bayesian-model-averaged-meta-analysis","dir":"Articles","previous_headings":"Hierarchical Bayesian Model-Averaged Meta-Analysis with RoBMA","what":"Hierarchical Bayesian Model-Averaged Meta-Analysis","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"Third, extend previous model model ensemble also includes models assuming absence effect /heterogeneity (incorporate models assuming presence publication bias due computational complexity explained summary). Including additional models allows us evaluate evidence favor effect heterogeneity. Furthermore, specifying additional models allows us incorporate uncertainty specified models weight posterior distribution according well models predicted data. estimate remaining models removing priors_effect_null priors_heterogeneity_null arguments previous function calls, include previously omitted models effect /heterogeneity. Now generate summary complete model-averaged ensemble specifying additional arguments summary() function. find ensemble contains four models, combination models assuming presence/absence effect/heterogeneity, equal prior model probabilities. Importantly, models assuming heterogeneity also specified hierarchical structure account clustering. comparison specified models reveals weak evidence effect, BF10=0.917\\text{BF}_{10} = 0.917, extreme evidence presence heterogeneity, BFrf=9.3×1092\\text{BF}_{\\text{rf}} = 9.3\\times10^{92}. Moreover, find Hierarchical component summary values Heterogeneity component summary default settings specify models assuming presence heterogeneity also include hierarchical structure. also obtain model-averaged posterior estimates combine posterior estimates models according posterior model probabilities, effect size, μ=0.087\\mu = 0.087 (95% CI [0.000,0.314]\\text{95% CI } [0.000, 0.314]), heterogeneity, τ=0.326\\tau = 0.326 (95% CI [0.231,0.472]\\text{95% CI } [0.231, 0.472]), correlation, ρ=0.659\\rho = 0.659 (95% CI [0.354,0.879]\\text{95% CI } [0.354, 0.879]).","code":"fit_BMA <- RoBMA(d = dat$yi, v = dat$vi, study_ids = dat$district,                  priors_bias = NULL,                  parallel = TRUE, seed = 1) summary(fit_BMA) #> Call: #> RoBMA(d = dat$yi, v = dat$vi, study_ids = dat$district, priors_bias = NULL,  #>     parallel = TRUE, seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect           2/4       0.500       0.478 9.170000e-01 #> Heterogeneity    2/4       0.500       1.000 9.326943e+92 #> Hierarchical     2/4       0.500       1.000 9.326943e+92 #>  #> Model-averaged estimates: #>      Mean Median 0.025 0.975 #> mu  0.087  0.000 0.000 0.314 #> tau 0.326  0.317 0.231 0.472 #> rho 0.659  0.675 0.354 0.879 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale)."},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"testing-the-presence-of-clustering","dir":"Articles","previous_headings":"Hierarchical Bayesian Model-Averaged Meta-Analysis with RoBMA","what":"Testing the Presence of Clustering","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"previous analyses, assumed effect sizes indeed clustered within districts, adjusted clustering. However, effect sizes within cluster may similar effect sizes different clusters. Now, specify model ensemble allows us test assumption specifying two sets random effect meta-analytic models. first set models assumes indeed clustering correlation random effects uniformly distributed (0,1)(0, 1) interval (previous analyses). second set models assumes clustering, .e., correlation random effects ρ=0\\rho = 0, simplifies structured covariance matrix diagonal matrix. , model average across models assuming presence absence effect account model uncertainty. specify ‘special’ model ensemble RoBMA() function, need modify previous model call following ways. removed fixed effect models specifying priors_heterogeneity_null = NULL argument.1^1 Furthermore, specify prior distribution models assuming absence hierarchical structure adding priors_hierarchical_null = prior(distribution = \"spike\", parameters = list(\"location\" = 0)) argument. summarize resulting model ensemble find Hierarchical component longer equivalent Heterogeneity component – new model specification allowed us compare random effect models assuming presence hierarchical structure random effect models assuming absence hierarchical structure. resulting inclusion Bayes factor hierarchical structure shows extreme evidence favor clustering effect sizes, BFρρ‾=4624\\text{BF}_{\\rho\\bar{\\rho}} = 4624, .e., extreme evidence intervention results similar effects within districts.","code":"hierarchical_test <- RoBMA(d = dat$yi, v = dat$vi, study_ids = dat$district,                            priors_heterogeneity_null = NULL,                            priors_hierarchical_null = prior(distribution = \"spike\", parameters = list(\"location\" = 0)),                            priors_bias = NULL,                            parallel = TRUE, seed = 1) summary(hierarchical_test) #> Call: #> RoBMA(d = dat$yi, v = dat$vi, study_ids = dat$district, priors_bias = NULL,  #>     priors_heterogeneity_null = NULL, priors_hierarchical_null = prior(distribution = \"spike\",  #>         parameters = list(location = 0)), parallel = TRUE, seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect           2/4       0.500       0.478        0.917 #> Heterogeneity    4/4       1.000       1.000          Inf #> Hierarchical     2/4       0.500       1.000     4624.794 #>  #> Model-averaged estimates: #>      Mean Median 0.025 0.975 #> mu  0.087  0.000 0.000 0.314 #> tau 0.326  0.317 0.231 0.472 #> rho 0.659  0.675 0.354 0.879 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale)."},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"illustrated estimate hierarchical Bayesian model-averaged meta-analysis using RoBMA package. hBMA model allows us test presence vs absence effect heterogeneity simultaneously adjusting clustered effect size estimates. current implementation allows us draw fully Bayesian inference, incorporate prior information, acknowledge model uncertainty, limitations contrast metafor package. E.g., RoBMA package allows simple nested random effects (.e., estimates within studies, schools within districts etc). simple nesting allows us break full covariance matrix per cluster block matrices speeds already demanding computation. Furthermore, computational complexity significantly increases considering selection models need compute exponentially increasing number multivariate normal probabilities increasing cluster size (existence clusters four studies makes current implementation impractical due computational demands). However, current limitations end road, exploring approaches (e.g., specifying PET-PEESE style publication bias adjustment dependency adjustments) future vignette.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/articles/HierarchicalBMA.html","id":"footnotes","dir":"Articles","previous_headings":"","what":"Footnotes","title":"Hierarchical Bayesian Model-Averaged Meta-Analysis","text":"1^1 also model-average across hierarchical structure assuming fixed effect models, .e., τ∼f(.)\\tau \\sim f(.) ρ=1\\rho = 1. However specifying model ensemble beyond scope vignette, see Custom ensembles vignette hints.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/articles/MedicineBiBMA.html","id":"binomial-normal-bayesian-model-averaged-meta-analysis","dir":"Articles","previous_headings":"","what":"Binomial-Normal Bayesian Model-Averaged Meta-Analysis","title":"Informed Bayesian Model-Averaged Meta-Analysis with Binary Outcomes","text":"illustrate fit binomial-normal Bayesian model-averaged meta-analysis using RoBMA R package. purpose, reproduce example adverse effects honey treating acute cough children Bartoš et al. (2023), reanalyzed two studies adverse events nervousness, insomnia, hyperactivity honey vs. treatment condition subjected meta-analysis Oduwole et al. (2018). load RoBMA package specify number adverse events sample sizes arm described p. 73 (Oduwole et al., 2018). Notice studies reported adverse events control group. Using normal-normal meta-analytic model log odds ratios require continuity correction, might result bias. Binomial-normal models allow us circumvent issue modeling observed proportions directly (see Bartoš et al. (2023) details). First, fit binomial-normal Bayesian model-averaged meta-analysis using informed prior distributions based Acute Respiratory Infections subfield. use BiBMA function specify observed events (x1 x2) sample size (n1 n2) adverse events sample sizes arm. use prior_informed function specify informed prior distributions individual medical subfields automatically. priors_effect priors_heterogeneity corresponding μ∼T(0,0.48,3)\\mu \\sim T(0,0.48,3) τ∼InvGamma(1.67,0.45)\\tau \\sim InvGamma(1.67, 0.45) prior distributions (see ?prior_informed details regarding informed prior distributions). obtain output summary function. Adding conditional = TRUE argument allows us inspect conditional estimates, .e., effect size estimate assuming models specifying presence effect true, heterogeneity estimates assuming models specifying presence heterogeneity true. also set output_scale = \"\" argument display effect size estimates odds ratio scale. output summary.RoBMA() function three parts. first part, ‘Robust Bayesian Meta-Analysis’ heading provides basic summary fitted models component types (presence Effect Heterogeneity). results show inclusion Bayes factor effect corresponds one reported Bartoš et al. (2023), BF10=2.63\\text{BF}_{10} = 2.63 BFrf=1.30\\text{BF}_{\\text{rf}} = 1.30 (MCMC error)—weak/undecided evidence presence effect heterogeneity. second part, ‘Model-averaged estimates’ heading displays parameter estimates model-averaged across specified models (.e., including models specifying effect size zero). estimates shrunk towards null hypotheses null effect heterogeneity accordance posterior uncertainty presence effect heterogeneity. find model-averaged mean effect = 3.39, 95% CI [0.84, 15.14], heterogeneity estimate τlogOR=0.42\\tau_\\text{logOR} = 0.42, 95% CI [0.00, 2.59]. third part, ‘Conditional estimates’ heading displays conditional effect size heterogeneity estimates (.e., estimates assuming presence effect heterogeneity) corresponding one reported Bartoš et al. (2023), = 4.24, 95% CI [0.78, 17.61], heterogeneity estimate τlogOR=0.75\\tau_\\text{logOR} = 0.75, 95% CI [0.10, 3.23]. can also visualize posterior distributions effect size heterogeneity parameters using plot() function. , set conditional = TRUE argument display conditional effect size estimate prior = TRUE include prior distribution plot.  Additional visualizations summaries demonstrated Reproducing BMA Informed Bayesian Model-Averaged Meta-Analysis Medicine vignettes.","code":"library(RoBMA)  events_experimental        <- c(5, 2) events_control             <- c(0, 0) observations_experimental  <- c(35, 40) observations_control       <- c(39, 40) study_names <- c(\"Paul 2007\", \"Shadkam 2010\") fit <- BiBMA(   x1          = events_experimental,   x2          = events_control,   n1          = observations_experimental,   n2          = observations_control,   study_names = study_names,   priors_effect        = prior_informed(\"Acute Respiratory Infections\", type = \"logOR\", parameter = \"effect\"),   priors_heterogeneity = prior_informed(\"Acute Respiratory Infections\", type = \"logOR\", parameter = \"heterogeneity\"),   seed = 1 ) summary(fit, conditional = TRUE, output_scale = \"OR\") #> Call: #> BiBMA(x1 = events_experimental, x2 = events_control, n1 = observations_experimental,  #>     n2 = observations_control, study_names = study_names, priors_effect = prior_informed(\"Acute Respiratory Infections\",  #>         type = \"logOR\", parameter = \"effect\"), priors_heterogeneity = prior_informed(\"Acute Respiratory Infections\",  #>         type = \"logOR\", parameter = \"heterogeneity\"), seed = 1) #>  #> Bayesian model-averaged meta-analysis (binomial-normal model) #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect           2/4       0.500       0.725        2.630 #> Heterogeneity    2/4       0.500       0.564        1.296 #>  #> Model-averaged estimates: #>      Mean Median 0.025  0.975 #> mu  3.389  1.642 0.842 15.143 #> tau 0.420  0.158 0.000  2.594 #> The effect size estimates are summarized on the OR scale and heterogeneity is summarized on the logOR scale (priors were specified on the log(OR) scale). #>  #> Conditional estimates: #>      Mean Median 0.025  0.975 #> mu  4.242  2.261 0.781 17.613 #> tau 0.747  0.426 0.097  3.233 #> The effect size estimates are summarized on the OR scale and heterogeneity is summarized on the logOR scale (priors were specified on the log(OR) scale). plot(fit, parameter = \"mu\", prior = TRUE, conditional = TRUE)"},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/articles/MedicineBMA.html","id":"reproducing-informed-bayesian-model-averaged-meta-analysis-bma","dir":"Articles","previous_headings":"","what":"Reproducing Informed Bayesian Model-Averaged Meta-Analysis (BMA)","title":"Informed Bayesian Model-Averaged Meta-Analysis in Medicine","text":"illustrate fit informed BMA (adjusting publication bias) using RoBMA R package. purpose, reproduce dentine hypersensitivity example Bartoš et al. (2021), reanalyzed five studies tactile outcome assessment subjected meta-analysis Poulsen et al. (2006). load dentine hypersensitivity data included package. reproduce analysis example, need set informed empirical prior distributions effect sizes (μ\\mu) heterogeneity (τ\\tau) parameters Bartoš et al. (2021) obtained Cochrane database systematic reviews. can either set manually, priors_effect priors_heterogeneity corresponding δ∼T(0,0.51,5)\\delta \\sim T(0,0.51,5) τ∼InvGamma(1.79,0.28)\\tau \\sim InvGamma(1.79,0.28) informed prior distributions “oral health” subfield removing publication bias adjustment models setting priors_bias = NULL1^1. Note package contains function NoBMA() version 3.1 skips publication bias adjustment directly. Alternatively, can utilize prior_informed function prepares informed prior distributions individual medical subfields automatically. name argument specifies medical subfield name (use print(BayesTools::prior_informed_medicine_names) check names available subfields). parameter argument specifies whether want prior distribution effect size heterogeneity. Finally, type argument specifies type measure use meta-analysis (see ?prior_informed details regarding informed prior distributions). obtain output summary function. Adding conditional = TRUE argument allows us inspect conditional estimates, .e., effect size estimate assuming models specifying presence effect true heterogeneity estimates assuming models specifying presence heterogeneity true2^2. output summary.RoBMA() function 3 parts. first one ‘Robust Bayesian Meta-Analysis’ heading provides basic summary fitted models component types (presence Effect Heterogeneity). table summarizes prior posterior probabilities inclusion Bayes factors individual components. results show inclusion Bayes factor effect corresponds one reported Bartoš et al. (2021), BF10=218.53\\text{BF}_{10} = 218.53 BFrf=3.52\\text{BF}_{\\text{rf}} = 3.52 (MCMC error). second part ‘Model-averaged estimates’ heading displays parameter estimates model-averaged across specified models (.e., including models specifying effect size zero). ignore section move last part. third part ‘Conditional estimates’ heading displays conditional effect size estimate corresponding one reported Bartoš et al. (2021), δ=1.082\\delta = 1.082, 95% CI [0.686,1.412], heterogeneity estimate (reported previously).","code":"library(RoBMA)  data(\"Poulsen2006\", package = \"RoBMA\") Poulsen2006 #>           d        se               study #> 1 0.9073050 0.2720456     STD-Schiff-1994 #> 2 0.7207589 0.1977769  STD-Silverman-1996 #> 3 1.3305829 0.2721648   STD-Sowinski-2000 #> 4 1.7688872 0.2656483 STD-Schiff-2000-(2) #> 5 1.3286828 0.3582617     STD-Schiff-1998 fit_BMA <- RoBMA(d = Poulsen2006$d, se = Poulsen2006$se, study_names = Poulsen2006$study,                  priors_effect        = prior(distribution = \"t\", parameters = list(location = 0, scale = 0.51, df = 5)),                  priors_heterogeneity = prior(distribution = \"invgamma\", parameters = list(shape = 1.79, scale = 0.28)),                  priors_bias          = NULL,                  transformation = \"cohens_d\", seed = 1, parallel = TRUE) fit_BMA <- RoBMA(d = Poulsen2006$d, se = Poulsen2006$se, study_names = Poulsen2006$study,                  priors_effect        = prior_informed(name = \"oral health\", parameter = \"effect\", type = \"smd\"),                  priors_heterogeneity = prior_informed(name = \"oral health\", parameter = \"heterogeneity\", type = \"smd\"),                  priors_bias          = NULL,                  transformation = \"cohens_d\", seed = 1, parallel = TRUE) summary(fit_BMA, conditional = TRUE) #> Call: #> RoBMA(d = Poulsen2006$d, se = Poulsen2006$se, study_names = Poulsen2006$study,  #>     transformation = \"cohens_d\", priors_effect = prior_informed(name = \"oral health\",  #>         parameter = \"effect\", type = \"smd\"), priors_heterogeneity = prior_informed(name = \"oral health\",  #>         parameter = \"heterogeneity\", type = \"smd\"), priors_bias = NULL,  #>     parallel = TRUE, seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect           2/4       0.500       0.995      217.517 #> Heterogeneity    2/4       0.500       0.778        3.511 #>  #> Model-averaged estimates: #>      Mean Median 0.025 0.975 #> mu  1.076  1.088 0.664 1.422 #> tau 0.231  0.208 0.000 0.726 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #>  #> Conditional estimates: #>      Mean Median 0.025 0.975 #> mu  1.082  1.090 0.701 1.422 #> tau 0.297  0.255 0.075 0.779 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale)."},{"path":"https://https://fbartos.github.io/RoBMA/articles/MedicineBMA.html","id":"visualizing-the-results","dir":"Articles","previous_headings":"","what":"Visualizing the Results","title":"Informed Bayesian Model-Averaged Meta-Analysis in Medicine","text":"RoBMA package provides extensive options visualizing results. , visualize prior (grey) posterior (black) distribution mean parameter.  default, function plots model-averaged estimates across models; arrows represent probability spike, lines represent posterior density models assuming non-zero effect. secondary y-axis (right) shows probability spike (value 0) decreasing 0.50, 0.005 (also obtainable ‘Robust Bayesian Meta-Analysis’ field summary.RoBMA() function). visualize conditional effect size estimate, can add conditional = TRUE argument, displays model-averaged posterior distribution effect size parameter models assuming presence effect. can also visualize estimates individual models used ensemble. plot_models() function, visualizes effect size estimates 95% CI specified model included ensemble. Model 1 corresponds fixed effect model assuming absence effect, H0fH_0^{\\text{f}}, Model 2 corresponds random effect model assuming absence effect, H0rH_0^{\\text{r}}, Model 3 corresponds fixed effect model assuming presence effect, H1fH_1^{\\text{f}}, Model 4 corresponds random effect model assuming presence effect, H1rH_1^{\\text{r}}). size square representing mean estimate reflects posterior model probability model, also displayed right-hand side panel. bottom part figure shows model averaged-estimate combination individual model posterior distributions weighted posterior model probabilities. see posterior model probability first two models decreased essentially zero (rounding two decimals), completely omitting estimates figure. Furthermore, much larger box Model 4 (random effect model assuming presence effect) shows Model 4 received largest share posterior probability, P(H1r)=0.77P(H_1^{\\text{r}}) = 0.77) last type visualization show forest plot. displays original studies’ effects meta-analytic estimate within one figure. can requested using forest() function. , set conditional = TRUE argument display conditional model-averaged effect size estimate bottom.  options provided plotting function, see documentation using ?plot.RoBMA(), ?plot_models(), ?forest().","code":"plot(fit_BMA, parameter = \"mu\", prior = TRUE) plot(fit_BMA, parameter = \"mu\", prior = TRUE, conditional = TRUE) plot_models(fit_BMA) forest(fit_BMA, conditional = TRUE)"},{"path":"https://https://fbartos.github.io/RoBMA/articles/MedicineBMA.html","id":"adjusting-for-publication-bias-with-robust-bayesian-meta-analysis","dir":"Articles","previous_headings":"","what":"Adjusting for Publication Bias with Robust Bayesian Meta-Analysis","title":"Informed Bayesian Model-Averaged Meta-Analysis in Medicine","text":"Finally, illustrate adjust informed BMA publication bias robust Bayesian meta-analysis Maier et al. (2023). short, specify additional models assuming presence publication bias correcting either specifying selection model operating pp-values (Vevea & Hedges, 1995) specifying publication bias adjustment method correcting relationship effect sizes standard errors – PET-PEESE (Stanley, 2017; Stanley & Doucouliagos, 2014). See Bartoš et al. (2022) tutorial. obtain proper publication bias adjustment comparison, fit informed BMA model using default effect size transformation (Fisher’s zz). obtain noticeably stronger evidence presence effect. result placing weights fixed-effect models, especially fixed-effect model assuming presence effect H1fH_1^f. case, increase posterior model probability H1fH_1^f occurred model predicted data slightly better removing correlation effect sizes standard errors (consequence using Fisher’s zz transformation). Nevertheless, conditional effect size estimate stayed almost . Now, fit publication bias-adjusted model simply removing priors_bias = NULL argument, allows us obtain default 36 models ensemble called RoBMA-PSMA (Bartoš et al., 2023). notice additional values ‘Components summary’ table ‘Bias’ row. model now extended 32 publication bias adjustment models account 50% prior model probability. comparing RoBMA second BMA fit, notice large decrease inclusion Bayes factor presence effect BF10=6.02\\text{BF}_{10} = 6.02 vs. BF10=347.93\\text{BF}_{10} = 347.93, still, however, presents moderate evidence presence effect. can quantify evidence favor publication bias inclusion Bayes factor publication bias BFpb=2.30\\text{BF}_{pb} = 2.30, can interpreted weak evidence favor publication bias. can also compare publication bias unadjusted publication bias-adjusted conditional effect size estimates. Including models assuming publication bias model-averaged estimate (assuming presence effect) slightly decreases estimated effect δ=0.838\\delta = 0.838, 95% CI [-0.035, 1.297] much wider confidence interval, visualized prior posterior conditional effect size estimate plot.","code":"fit_BMAb <- RoBMA(d = Poulsen2006$d, se = Poulsen2006$se, study_names = Poulsen2006$study,                   priors_effect        = prior_informed(name = \"oral health\", parameter = \"effect\", type = \"smd\"),                   priors_heterogeneity = prior_informed(name = \"oral health\", parameter = \"heterogeneity\", type = \"smd\"),                   priors_bias          = NULL,                   seed = 1, parallel = TRUE) summary(fit_BMAb, conditional = TRUE) #> Call: #> RoBMA(d = Poulsen2006$d, se = Poulsen2006$se, study_names = Poulsen2006$study,  #>     priors_effect = prior_informed(name = \"oral health\", parameter = \"effect\",  #>         type = \"smd\"), priors_heterogeneity = prior_informed(name = \"oral health\",  #>         parameter = \"heterogeneity\", type = \"smd\"), priors_bias = NULL,  #>     parallel = TRUE, seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect           2/4       0.500       0.997      347.932 #> Heterogeneity    2/4       0.500       0.723        2.608 #>  #> Model-averaged estimates: #>      Mean Median 0.025 0.975 #> mu  1.045  1.052 0.705 1.344 #> tau 0.186  0.163 0.000 0.623 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #>  #> Conditional estimates: #>      Mean Median 0.025 0.975 #> mu  1.048  1.053 0.720 1.344 #> tau 0.256  0.220 0.064 0.681 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). fit_RoBMA <- RoBMA(d = Poulsen2006$d, se = Poulsen2006$se, study_names = Poulsen2006$study,                    priors_effect        = prior_informed(name = \"oral health\", parameter = \"effect\", type = \"smd\"),                    priors_heterogeneity = prior_informed(name = \"oral health\", parameter = \"heterogeneity\", type = \"smd\"),                    seed = 1, parallel = TRUE) summary(fit_RoBMA, conditional = TRUE) #> Call: #> RoBMA(d = Poulsen2006$d, se = Poulsen2006$se, study_names = Poulsen2006$study,  #>     priors_effect = prior_informed(name = \"oral health\", parameter = \"effect\",  #>         type = \"smd\"), priors_heterogeneity = prior_informed(name = \"oral health\",  #>         parameter = \"heterogeneity\", type = \"smd\"), parallel = TRUE,  #>     seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect         18/36       0.500       0.858        6.022 #> Heterogeneity  18/36       0.500       0.714        2.502 #> Bias           32/36       0.500       0.697        2.304 #>  #> Model-averaged estimates: #>                    Mean Median 0.025  0.975 #> mu                0.722  0.880 0.000  1.283 #> tau               0.202  0.161 0.000  0.799 #> omega[0,0.025]    1.000  1.000 1.000  1.000 #> omega[0.025,0.05] 0.943  1.000 0.329  1.000 #> omega[0.05,0.5]   0.874  1.000 0.071  1.000 #> omega[0.5,0.95]   0.855  1.000 0.042  1.000 #> omega[0.95,0.975] 0.866  1.000 0.050  1.000 #> omega[0.975,1]    0.897  1.000 0.057  1.000 #> PET               0.931  0.000 0.000  4.927 #> PEESE             1.131  0.000 0.000 12.261 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #> (Estimated publication weights omega correspond to one-sided p-values.) #>  #> Conditional estimates: #>                    Mean Median  0.025  0.975 #> mu                0.838  0.938 -0.035  1.297 #> tau               0.285  0.227  0.064  0.906 #> omega[0,0.025]    1.000  1.000  1.000  1.000 #> omega[0.025,0.05] 0.736  0.829  0.092  1.000 #> omega[0.05,0.5]   0.411  0.373  0.014  0.951 #> omega[0.5,0.95]   0.320  0.249  0.008  0.919 #> omega[0.95,0.975] 0.376  0.311  0.009  0.958 #> omega[0.975,1]    0.518  0.425  0.010  1.000 #> PET               2.909  3.136  0.171  5.614 #> PEESE             7.048  6.034  0.375 18.162 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #> (Estimated publication weights omega correspond to one-sided p-values.) plot(fit_RoBMA, parameter = \"mu\", prior = TRUE, conditional = TRUE)"},{"path":"https://https://fbartos.github.io/RoBMA/articles/MedicineBMA.html","id":"footnotes","dir":"Articles","previous_headings":"","what":"Footnotes","title":"Informed Bayesian Model-Averaged Meta-Analysis in Medicine","text":"1^1 additional setting transformation = \"cohens_d\" allows us get comparable results metaBMA R package since RoBMA otherwise internally transforms effect sizes Fisher’s zz fitting purposes. seed = 1 parallel = TRUE options grant us exact reproducibility results parallelization fitting process. 2^2 model-averaged estimates RoBMA returns default model-averaged across specified models – different behavior metaBMA package default returns call “conditional” estimates RoBMA.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/articles/MetaRegression.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Robust Bayesian Model-Averaged Meta-Regression","text":"start loading Andrews2021 dataset included RoBMA R package, contains 36 estimates effect household chaos child executive functions mean age assessment type covariates. dataset includes correlation coefficients (r), standard errors correlation coefficients (se), type executive function assessment (measure), mean age children (age) study.","code":"library(RoBMA) data(\"Andrews2021\", package = \"RoBMA\") head(Andrews2021) #>       r         se measure      age #> 1 0.070 0.04743416  direct 4.606660 #> 2 0.033 0.04371499  direct 2.480833 #> 3 0.170 0.10583005  direct 7.750000 #> 4 0.208 0.08661986  direct 4.000000 #> 5 0.270 0.02641969  direct 4.000000 #> 6 0.170 0.05147815  direct 4.487500"},{"path":"https://https://fbartos.github.io/RoBMA/articles/MetaRegression.html","id":"frequentist-meta-regression","dir":"Articles","previous_headings":"","what":"Frequentist Meta-Regression","title":"Robust Bayesian Model-Averaged Meta-Regression","text":"start fitting frequentist meta-regression using metafor R package (Wolfgang, 2010). Andrews et al. (2021) estimated univariate meta-regressions moderator, directly proceed analyzing moderators simultaneously. consistency original reporting, estimate meta-regression using correlation coefficients standard errors provided (Andrews et al., 2021); however, note Fisher’s z transformation recommended estimating meta-analytic models (e.g., Stanley et al. (2024)). results reveal statistically significant moderation effect executive function assessment type effect household chaos child executive functions (p=0.0099p = 0.0099). explore moderation effect , estimate estimated marginal means executive function assessment type using emmeans R package (Lenth et al., 2017). Studies using informant-completed questionnaires show stronger effect household chaos child executive functions, r = 0.229, 95% CI [0.161, 0.297], direct assessment, r = 0.109, 95% CI [0.049, 0.169]; types studies show statistically significant effects. mean age children significantly moderate effect (p=0.627p = 0.627) estimated regression coefficient b = 0.003, 95% CI [-0.009, 0.015]. usual, frequentist inference limits us failing reject null hypothesis. , try overcome limitation Bayesian model-averaged meta-regression.","code":"fit_rma <- metafor::rma(yi = r, sei = se, mods = ~ measure + age, data = Andrews2021) fit_rma #>  #> Mixed-Effects Model (k = 36; tau^2 estimator: REML) #>  #> tau^2 (estimated amount of residual heterogeneity):     0.0150 (SE = 0.0045) #> tau (square root of estimated tau^2 value):             0.1226 #> I^2 (residual heterogeneity / unaccounted variability): 91.28% #> H^2 (unaccounted variability / sampling variability):   11.47 #> R^2 (amount of heterogeneity accounted for):            15.24% #>  #> Test for Residual Heterogeneity: #> QE(df = 33) = 340.7613, p-val < .0001 #>  #> Test of Moderators (coefficients 2:3): #> QM(df = 2) = 7.5445, p-val = 0.0230 #>  #> Model Results: #>  #>                   estimate      se    zval    pval    ci.lb   ci.ub      #> intrcpt             0.0898  0.0467  1.9232  0.0545  -0.0017  0.1813   .  #> measureinformant    0.1202  0.0466  2.5806  0.0099   0.0289  0.2115  **  #> age                 0.0030  0.0062  0.4867  0.6265  -0.0091  0.0151      #>  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 emmeans::emmeans(metafor::emmprep(fit_rma), specs = \"measure\") #>  measure   emmean     SE  df asymp.LCL asymp.UCL #>  direct     0.109 0.0305 Inf    0.0492     0.169 #>  informant  0.229 0.0347 Inf    0.1612     0.297 #>  #> Confidence level used: 0.95"},{"path":"https://https://fbartos.github.io/RoBMA/articles/MetaRegression.html","id":"bayesian-meta-regression-specification","dir":"Articles","previous_headings":"","what":"Bayesian Meta-Regression Specification","title":"Robust Bayesian Model-Averaged Meta-Regression","text":"proceed Bayesian model-averaged meta-regression, provide quick overview regression model specification. contrast frequentist meta-regression, need specify prior distributions regression coefficients, encode tested hypotheses presence vs. absence moderation (specifying different prior distributions corresponds different hypotheses results different conclusions). Importantly, treatment continuous categorical covariates differs Bayesian model-averaged meta-regression.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/articles/MetaRegression.html","id":"continuous-vs--categorical-moderators-and-default-prior-distributions","dir":"Articles","previous_headings":"Bayesian Meta-Regression Specification","what":"Continuous vs. Categorical Moderators and Default Prior Distributions","title":"Robust Bayesian Model-Averaged Meta-Regression","text":"default prior distribution continuous moderators normal prior distribution mean 0 standard deviation 1/4. words, default prior distribution assumes effect moderator small smaller moderation effects likely larger effects. default choice continuous moderators can overridden prior_covariates argument (continuous covariates) priors argument (specific covariates, see ?RoBMA.reg information). package automatically standardizes continuous moderators. achieves scale-invariance specified prior distributions ensures prior distribution intercept correspond grand mean effect. setting can overridden specifying standardize_predictors = FALSE argument. default prior distribution categorical moderators normal distribution mean 0 standard deviation 1/4, representing deviation level grand mean effect. package uses standardized orthonormal contrasts (contrast = \"meandif\") model deviations category grand mean effect. default choice categorical moderators can overridden prior_factors argument (categorical covariates) priors argument (specific covariates, see ?RoBMA.reg information). \"meandif\" contrasts achieve label invariance (.e., coding categorical covariates affect results) prior distribution intercept corresponds grand mean effect. Alternatively, package also allows specifying \"treatment\" contrasts, result prior distribution difference default level remaining levels categorical covariate (intercept corresponding effect default factor level).","code":""},{"path":"https://https://fbartos.github.io/RoBMA/articles/MetaRegression.html","id":"effect-size-input-specification","dir":"Articles","previous_headings":"Bayesian Meta-Regression Specification","what":"Effect Size Input Specification","title":"Robust Bayesian Model-Averaged Meta-Regression","text":"Prior distributions Bayesian meta-analyses calibrated standardized effect size measures. , fitting function needs know kind effect size supplied input. RoBMA() function, achieved d, r, logOR, , z, se, v, n, lCI, uCI arguments. input passed combine_data() function background combines effect sizes merges single data.frame. RoBMA.reg() (NoBMA.reg()) function requires dataset passed data.frame (without missing values) column names identifying - moderators passed using formula interface (.e., ~ measure + age example) - effect sizes standard errors (.e., r se example). , crucial column names correctly identify standardized effect sizes, standard errors, sample sizes, moderators.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/articles/MetaRegression.html","id":"bayesian-model-averaged-meta-regression","dir":"Articles","previous_headings":"","what":"Bayesian Model-Averaged Meta-Regression","title":"Robust Bayesian Model-Averaged Meta-Regression","text":"fit Bayesian model-averaged meta-regression using NoBMA.reg() function (NoBMA.reg() function wrapper around RoBMA.reg() function automatically removes models adjusting publication bias). specify model formula ~ operator similarly rma() function pass dataset data.frame named columns outlined section (names need identify moderators effect size measures). also set parallel = TRUE argument speed computation running chains parallel seed = 1 argument ensure reproducibility. Note NoBMA.reg() function specifies combination models assuming presence vs. absence effect, heterogeneity, moderation measure, moderation age, corresponds 2*2*2*2=162*2*2*2=16 models. Including additional moderator doubles number models, leading exponential increase model count significantly longer fitting times. ensemble estimated, can use summary() functions output_scale = \"r\" argument, produces meta-analytic estimates transformed correlation scale. summary function produces output multiple sections first section contains Components summary hypothesis test results overall effect size heterogeneity. find overwhelming evidence inclusion Bayes factors (Inclusion BF) 10,000. second section contains Meta-regression components summary hypothesis test results moderators. find moderate evidence moderation executive function assessment type, BFmeasure=4.75\\text{BF}_{\\text{measure}} = 4.75. Furthermore, find moderate evidence null hypothesis moderation mean age children, BFage=0.245\\text{BF}_{\\text{age}} = 0.245 (.e., BF null 1/0.245=4.081/0.245 = 4.08). findings extend frequentist meta-regression disentangling absence evidence evidence absence. third section contains Model-averaged estimates model-averaged estimates mean effect ρ=0.16\\rho = 0.16, 95% CI [0.12, 0.21] -study heterogeneity τFisher’s z=0.12\\tau_{\\text{Fisher's z}} = 0.12, 95% CI [0.09, 0.17]. fourth section contains Model-averaged meta-regression estimates model-averaged regression coefficient estimates. main difference usual frequentist meta-regression output categorical predictors summarized difference grand mean factor level. , intercept regression coefficient estimate corresponds grand mean effect measure [dif: direct] regression coefficient estimate -0.047, 95% CI [-0.099, 0.000] corresponds difference direct assessment grand mean. , results suggest effect size studies using direct assessment lower comparison grand mean studies. age regression coefficient estimate standardized, therefore, increase 0.003, 95% CI [-0.011, 0.043] corresponds increase mean effect increasing mean age children one standard deviation. Similarly frequentist meta-regression, can use marginal_summary() function obtain marginal estimates factor levels. estimated marginal means similar frequentist results. Studies using informant-completed questionnaires show stronger effect household chaos child executive functions, ρ=0.208\\rho = 0.208, 95% CI [0.130, 0.280], direct assessment, ρ=0.117\\rho = 0.117, 95% CI [0.052, 0.185]. last column summarizes results test null hypothesis marginal means equals 0. , find strong evidence effect size studies using informant-completed questionnaires differing zero, BF10=62.8\\text{BF}_{10} = 62.8 extreme evidence effect size studies using direct assessment differing zero, BF10=∞\\text{BF}_{10} = \\infty. test performed using change prior posterior distribution 0 (.e., Savage-Dickey density ratio) assuming presence overall effect presence difference according tested factor. tests use prior posterior samples, calculating Bayes factor can problematic posterior distribution far tested value. cases, warning messages printed BF10=∞\\text{BF}_{10} = \\infty returned (like )—actual Bayes factor less infinity, still large computed precisely given posterior samples. full model-averaged posterior marginal means distribution can visualized marginal_plot() function.","code":"fit_BMA <- NoBMA.reg(~ measure + age, data = Andrews2021, parallel = TRUE, seed = 1) summary(fit_BMA, output_scale = \"r\") #> Call: #> RoBMA.reg(formula = formula, data = data, test_predictors = test_predictors,  #>     study_names = study_names, study_ids = study_ids, transformation = transformation,  #>     prior_scale = prior_scale, standardize_predictors = standardize_predictors,  #>     effect_direction = \"positive\", priors = priors, model_type = model_type,  #>     priors_effect = priors_effect, priors_heterogeneity = priors_heterogeneity,  #>     priors_bias = NULL, priors_effect_null = priors_effect_null,  #>     priors_heterogeneity_null = priors_heterogeneity_null, priors_bias_null = prior_none(),  #>     priors_hierarchical = priors_hierarchical, priors_hierarchical_null = priors_hierarchical_null,  #>     prior_covariates = prior_covariates, prior_covariates_null = prior_covariates_null,  #>     prior_factors = prior_factors, prior_factors_null = prior_factors_null,  #>     algorithm = algorithm, chains = chains, sample = sample,  #>     burnin = burnin, adapt = adapt, thin = thin, parallel = parallel,  #>     autofit = autofit, autofit_control = autofit_control, convergence_checks = convergence_checks,  #>     save = save, seed = seed, silent = silent) #>  #> Bayesian model-averaged meta-regression (normal-normal model) #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect          8/16       0.500       1.000 6.643142e+05 #> Heterogeneity   8/16       0.500       1.000 3.438539e+40 #>  #> Meta-regression components summary: #>         Models Prior prob. Post. prob. Inclusion BF #> measure   8/16       0.500       0.826        4.748 #> age       8/16       0.500       0.197        0.245 #>  #> Model-averaged estimates: #>      Mean Median 0.025 0.975 #> mu  0.163  0.163 0.118 0.208 #> tau 0.121  0.120 0.086 0.167 #> The effect size estimates are summarized on the correlation scale and heterogeneity is summarized on the Fisher's z scale (priors were specified on the Cohen's d scale). #>  #> Model-averaged meta-regression estimates: #>                            Mean Median  0.025 0.975 #> intercept                 0.163  0.163  0.118 0.208 #> measure [dif: direct]    -0.047 -0.051 -0.099 0.000 #> measure [dif: informant]  0.047  0.051  0.000 0.099 #> age                       0.003  0.000 -0.011 0.043 #> The effect size estimates are summarized on the correlation scale and heterogeneity is summarized on the Fisher's z scale (priors were specified on the Cohen's d scale). marginal_summary(fit_BMA, output_scale = \"r\") #> Call: #> RoBMA.reg(formula = formula, data = data, test_predictors = test_predictors,  #>     study_names = study_names, study_ids = study_ids, transformation = transformation,  #>     prior_scale = prior_scale, standardize_predictors = standardize_predictors,  #>     effect_direction = \"positive\", priors = priors, model_type = model_type,  #>     priors_effect = priors_effect, priors_heterogeneity = priors_heterogeneity,  #>     priors_bias = NULL, priors_effect_null = priors_effect_null,  #>     priors_heterogeneity_null = priors_heterogeneity_null, priors_bias_null = prior_none(),  #>     priors_hierarchical = priors_hierarchical, priors_hierarchical_null = priors_hierarchical_null,  #>     prior_covariates = prior_covariates, prior_covariates_null = prior_covariates_null,  #>     prior_factors = prior_factors, prior_factors_null = prior_factors_null,  #>     algorithm = algorithm, chains = chains, sample = sample,  #>     burnin = burnin, adapt = adapt, thin = thin, parallel = parallel,  #>     autofit = autofit, autofit_control = autofit_control, convergence_checks = convergence_checks,  #>     save = save, seed = seed, silent = silent) #>  #> Robust Bayesian meta-analysis #> Model-averaged marginal estimates: #>                     Mean Median 0.025 0.975 Inclusion BF #> intercept          0.163  0.163 0.118 0.208          Inf #> measure[direct]    0.117  0.116 0.052 0.185       62.803 #> measure[informant] 0.208  0.210 0.130 0.280          Inf #> age[-1SD]          0.160  0.161 0.106 0.208          Inf #> age[0SD]           0.163  0.163 0.118 0.208          Inf #> age[1SD]           0.166  0.165 0.117 0.220          Inf #> The estimates are summarized on the correlation scale (priors were specified on the Cohen's d scale). #> mu_intercept: Posterior samples do not span both sides of the null hypothesis. The Savage-Dickey density ratio is likely to be overestimated. #> mu_measure[informant]: Posterior samples do not span both sides of the null hypothesis. The Savage-Dickey density ratio is likely to be overestimated. #> mu_age[-1SD]: Posterior samples do not span both sides of the null hypothesis. The Savage-Dickey density ratio is likely to be overestimated. #> mu_age[0SD]: There is a considerable cluster of prior samples at the exact null hypothesis values. The Savage-Dickey density ratio is likely to be invalid. #> mu_age[0SD]: Posterior samples do not span both sides of the null hypothesis. The Savage-Dickey density ratio is likely to be overestimated. #> mu_age[1SD]: Posterior samples do not span both sides of the null hypothesis. The Savage-Dickey density ratio is likely to be overestimated. marginal_plot(fit_BMA, parameter = \"measure\", output_scale = \"r\", lwd = 2)"},{"path":"https://https://fbartos.github.io/RoBMA/articles/MetaRegression.html","id":"robust-bayesian-model-averaged-meta-regression","dir":"Articles","previous_headings":"","what":"Robust Bayesian Model-Averaged Meta-Regression","title":"Robust Bayesian Model-Averaged Meta-Regression","text":"Finally, adjust Bayesian model-averaged meta-regression model fitting robust Bayesian model-averaged meta-regression. contrast previous publication bias unadjusted model ensemble, RoBMA-reg extends model ensemble publication bias component specified via 6 weight functions PET-PEESE (Bartoš et al., 2023). use RoBMA.reg() function arguments previous section. estimation time increases ensemble now contains 144 models. previously described functions manipulating fitted model work identically publication bias adjusted model. , just briefly mention main differences found adjusting publication bias. RoBMA-reg reveals strong evidence publication bias BFpb=28.0\\text{BF}_{\\text{pb}} = 28.0. Furthermore, accounting publication bias turns previously found evidence overall effect weak evidence effect BF10=0.51\\text{BF}_{10} = 0.51 notably reduces mean effect estimate ρ=0.032\\rho = 0.032, 95% CI [0.000, 0.164]. estimated marginal means now suggest studies using informant-completed questionnaires show much smaller effect household chaos child executive functions, ρ=0.094\\rho = 0.094, 95% CI [0.000, 0.222] moderate evidence effect, BF10=8.23\\text{BF}_{10} = 8.23, studies using direct assessment even provide weak evidence effect household chaos child executive functions, BF10=0.71\\text{BF}_{10} = 0.71, likely effect sizes around zero, ρ=−0.031\\rho = -0.031, 95% CI [-0.105, 0.120]. visual summary estimated marginal means highlights considerably wider model-averaged posterior distributions marginal means—consequence accounting adjusting publication bias.  Bayesian model-averaged meta-regression models compatible remaining custom specification, visualization, summary functions included RoBMA R package, highlighted vignettes. E.g., custom model specification demonstrated vignette Fitting Custom Meta-Analytic Ensembles visualizations summaries demonstrated Reproducing BMA Informed Bayesian Model-Averaged Meta-Analysis Medicine vignettes.","code":"fit_RoBMA <- RoBMA.reg(~ measure + age, data = Andrews2021, parallel = TRUE, seed = 1) summary(fit_RoBMA, output_scale = \"r\") #> Call: #> RoBMA.reg(formula = ~measure + age, data = Andrews2021, chains = 1,  #>     parallel = TRUE, save = \"min\", seed = 1) #>  #> Robust Bayesian meta-regression #> Components summary: #>                Models Prior prob. Post. prob. Inclusion BF #> Effect         72/144       0.500       0.339 5.130000e-01 #> Heterogeneity  72/144       0.500       1.000 1.051976e+23 #> Bias          128/144       0.500       0.966 2.825100e+01 #>  #> Meta-regression components summary: #>         Models Prior prob. Post. prob. Inclusion BF #> measure 72/144       0.500       0.951       19.213 #> age     72/144       0.500       0.154        0.181 #>  #> Model-averaged estimates: #>                    Mean Median 0.025  0.975 #> mu                0.032  0.000 0.000  0.164 #> tau               0.106  0.104 0.074  0.146 #> omega[0,0.025]    1.000  1.000 1.000  1.000 #> omega[0.025,0.05] 0.999  1.000 1.000  1.000 #> omega[0.05,0.5]   0.998  1.000 1.000  1.000 #> omega[0.5,0.95]   0.997  1.000 1.000  1.000 #> omega[0.95,0.975] 0.997  1.000 1.000  1.000 #> omega[0.975,1]    0.997  1.000 1.000  1.000 #> PET               2.046  2.489 0.000  3.292 #> PEESE             1.955  0.000 0.000 19.101 #> The effect size estimates are summarized on the correlation scale and heterogeneity is summarized on the Fisher's z scale (priors were specified on the Cohen's d scale). #> (Estimated publication weights omega correspond to one-sided p-values.) #>  #> Model-averaged meta-regression estimates: #>                            Mean Median  0.025 0.975 #> intercept                 0.032  0.000  0.000 0.164 #> measure [dif: direct]    -0.063 -0.064 -0.106 0.000 #> measure [dif: informant]  0.063  0.064  0.000 0.106 #> age                       0.000  0.000 -0.024 0.022 #> The effect size estimates are summarized on the correlation scale and heterogeneity is summarized on the Fisher's z scale (priors were specified on the Cohen's d scale). marginal_summary(fit_RoBMA, output_scale = \"r\") #> Call: #> RoBMA.reg(formula = ~measure + age, data = Andrews2021, chains = 1,  #>     parallel = TRUE, save = \"min\", seed = 1) #>  #> Robust Bayesian meta-analysis #> Model-averaged marginal estimates: #>                      Mean Median  0.025 0.975 Inclusion BF #> intercept           0.032  0.000  0.000 0.164        0.526 #> measure[direct]    -0.031 -0.056 -0.105 0.120        0.709 #> measure[informant]  0.094  0.077  0.000 0.222        8.230 #> age[-1SD]           0.032  0.000 -0.015 0.164        0.307 #> age[0SD]            0.032  0.000  0.000 0.164        0.381 #> age[1SD]            0.031  0.000 -0.024 0.168        0.311 #> The estimates are summarized on the correlation scale (priors were specified on the Cohen's d scale). #> mu_age[0SD]: There is a considerable cluster of posterior samples at the exact null hypothesis values. The Savage-Dickey density ratio is likely to be invalid. #> mu_age[0SD]: There is a considerable cluster of prior samples at the exact null hypothesis values. The Savage-Dickey density ratio is likely to be invalid. marginal_plot(fit_RoBMA, parameter = \"measure\", output_scale = \"r\", lwd = 2)"},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/articles/ReproducingBMA.html","id":"reproducing-bayesian-model-averaged-meta-analysis-bma","dir":"Articles","previous_headings":"","what":"Reproducing Bayesian Model-Averaged Meta-Analysis (BMA)","title":"Reproducing Bayesian Model-Averaged Meta-Analysis","text":"illustrate fit classical BMA (adjusting publication bias) using RoBMA. purpose, reproduce meta-analysis registered reports Power posing Gronau et al. (2017). focus analysis reported results using Cauchy prior distribution scale 1/21/\\sqrt{2} effect size estimation (half-Cauchy testing) inverse-gamma distribution shape = 1 scale = 0.15 heterogeneity parameter. can find figure original publication paper’s supplementary materials https://osf.io/fxg32/. First, load power posing data provided within metaBMA package reproduce analysis performed Gronau et al. (2017). output, can see inclusion Bayes factor effect size BF10=33.14BF_{10} = 33.14 effect size estimate 0.22, 95% HDI [0.09, 0.34], matches reported results. Please note metaBMA package model-averages across H1H_{1} models, whereas RoBMA package model-averages across models (assuming presence absence effect).","code":"data(\"power_pose\", package = \"metaBMA\") power_pose[,c(\"study\", \"effectSize\", \"SE\")] #>                study effectSize        SE #> 1      Bailey et al.  0.2507640 0.2071399 #> 2       Ronay et al.  0.2275180 0.1931046 #> 3 Klaschinski et al.  0.3186069 0.1423228 #> 4     Bombari et al.  0.2832082 0.1421356 #> 5        Latu et al.  0.1463949 0.1416107 #> 6      Keller et al.  0.1509773 0.1221166 fit_BMA_test <- metaBMA::meta_bma(y   = power_pose$effectSize, SE = power_pose$SE,                                   d   = metaBMA::prior(family = \"halfcauchy\", param = 1/sqrt(2)),                                   tau = metaBMA::prior(family = \"invgamma\", param = c(1, .15)))   fit_BMA_est  <- metaBMA::meta_bma(y   = power_pose$effectSize, SE = power_pose$SE,                                   d   = metaBMA::prior(family = \"cauchy\", param = c(0, 1/sqrt(2))),                                   tau = metaBMA::prior(family = \"invgamma\", param = c(1, .15))) fit_BMA_test$inclusion #> ### Inclusion Bayes factor ### #>       Model Prior Posterior included #> 1  fixed_H0  0.25   0.00868          #> 2  fixed_H1  0.25   0.77745        x #> 3 random_H0  0.25   0.02061          #> 4 random_H1  0.25   0.19325        x #>  #>   Inclusion posterior probability: 0.971  #>   Inclusion Bayes factor: 33.136  round(fit_BMA_est$estimates,2) #>          mean   sd 2.5%  50% 97.5% hpd95_lower hpd95_upper  n_eff Rhat #> averaged 0.22 0.06 0.09 0.22  0.34        0.09        0.34     NA   NA #> fixed    0.22 0.06 0.10 0.22  0.34        0.10        0.34 3026.5    1 #> random   0.22 0.08 0.07 0.22  0.37        0.07        0.37 6600.4    1"},{"path":"https://https://fbartos.github.io/RoBMA/articles/ReproducingBMA.html","id":"using-robma","dir":"Articles","previous_headings":"","what":"Using RoBMA","title":"Reproducing Bayesian Model-Averaged Meta-Analysis","text":"Now reproduce analysis RoBMA. set corresponding prior distributions effect sizes (μ\\mu) heterogeneity (τ\\tau), remove alternative prior distributions publication bias setting priors_bias = NULL. specify half-Cauchy prior distribution RoBMA::prior() function use regular Cauchy distribution truncate zero (note metaBMA RoBMA export prior() functions clash loading packages simultaneously). inverse-gamma prior distribution heterogeneity parameter default option (specify completeness). omit specifications null prior distributions effect size, heterogeneity (set spike 0 default), publication bias (set publication bias default). Note starting version 3.1, package includes NoBMA() function, allows users skip publication bias adjustment directly. Since metaBMA model-averages effect size estimates across models assuming presence effect, remove models assuming absence effect estimation ensemble priors_effect_null = NULL. Finally, set transformation = \"cohens_d\" estimate models Cohen’s d scale. RoBMA uses Fisher’s z scale default transforms estimated coefficients back scale used specifying prior distributions. speed computation setting parallel = TRUE, set seed reproducibility. output summary.RoBMA() function 2 parts. first one “Robust Bayesian Meta-Analysis” heading provides basic summary fitted models component types (presence Effect Heterogeneity). table summarizes prior posterior probabilities inclusion Bayes factors individual components. results half-Cauchy model specified testing show inclusion BF nearly identical one computed metaBMA package, BF10=33.11\\text{BF}_{10} = 33.11. second part ‘Model-averaged estimates’ heading displays parameter estimates. results unrestricted Cauchy model specified estimation show effect size estimate μ=0.22\\mu = 0.22, 95% CI [0.10, 0.35] also mirrors one obtained metaBMA package.","code":"library(RoBMA)  fit_RoBMA_test <- RoBMA(d = power_pose$effectSize, se = power_pose$SE, study_names = power_pose$study,                         priors_effect  = prior(                           distribution = \"cauchy\",                           parameters = list(location = 0, scale = 1/sqrt(2)),                           truncation = list(0, Inf)),                         priors_heterogeneity = prior(                           distribution = \"invgamma\",                           parameters = list(shape = 1, scale = 0.15)),                         priors_bias = NULL,                         transformation = \"cohens_d\", seed = 1, parallel = TRUE)  fit_RoBMA_est  <- RoBMA(d = power_pose$effectSize, se = power_pose$SE, study_names = power_pose$study,                         priors_effect  = prior(                           distribution = \"cauchy\",                           parameters = list(location = 0, scale = 1/sqrt(2))),                         priors_heterogeneity = prior(                           distribution = \"invgamma\",                           parameters = list(shape = 1, scale = 0.15)),                         priors_bias = NULL,                         priors_effect_null = NULL,                         transformation = \"cohens_d\", seed = 2, parallel = TRUE) summary(fit_RoBMA_test) #> Call: #> RoBMA(d = power_pose$effectSize, se = power_pose$SE, study_names = power_pose$study,  #>     transformation = \"cohens_d\", priors_effect = prior(distribution = \"cauchy\",  #>         parameters = list(location = 0, scale = 1/sqrt(2)), truncation = list(0,  #>             Inf)), priors_heterogeneity = prior(distribution = \"invgamma\",  #>         parameters = list(shape = 1, scale = 0.15)), priors_bias = NULL,  #>     parallel = TRUE, seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect           2/4       0.500       0.971       33.112 #> Heterogeneity    2/4       0.500       0.214        0.273 #>  #> Model-averaged estimates: #>      Mean Median 0.025 0.975 #> mu  0.213  0.217 0.000 0.348 #> tau 0.022  0.000 0.000 0.178 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale).  summary(fit_RoBMA_est) #> Call: #> RoBMA(d = power_pose$effectSize, se = power_pose$SE, study_names = power_pose$study,  #>     transformation = \"cohens_d\", priors_effect = prior(distribution = \"cauchy\",  #>         parameters = list(location = 0, scale = 1/sqrt(2))),  #>     priors_heterogeneity = prior(distribution = \"invgamma\", parameters = list(shape = 1,  #>         scale = 0.15)), priors_bias = NULL, priors_effect_null = NULL,  #>     parallel = TRUE, seed = 2) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect           2/2       1.000       1.000          Inf #> Heterogeneity    1/2       0.500       0.200        0.250 #>  #> Model-averaged estimates: #>      Mean Median 0.025 0.975 #> mu  0.220  0.220 0.096 0.346 #> tau 0.019  0.000 0.000 0.152 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale)."},{"path":"https://https://fbartos.github.io/RoBMA/articles/ReproducingBMA.html","id":"visualizing-the-results","dir":"Articles","previous_headings":"","what":"Visualizing the Results","title":"Reproducing Bayesian Model-Averaged Meta-Analysis","text":"RoBMA provides extensive options visualizing results. , visualize prior (grey) posterior (black) distribution mean parameter.  visualize effect size model specified testing, notice things. function plots model-averaged estimates across models default, including models assuming absence effect. arrows represents probability spike, , value 0. secondary y-axis (right) shows probability value 0 decreased 0.50, 0.03 (also obtainable “Robust Bayesian Meta-Analysis” field summary.RoBMA() function). Furthermore, continuous prior distributions effect size alternative hypothesis truncated positive values, reflecting assumption effect size negative.  can also visualize estimates individual models used ensemble. plot_models() function, visualizes effect size estimates 95% CI specified models estimation ensemble (Model 1 corresponds fixed effect model Model 2 random effect model). size square representing mean estimate reflects posterior model probability model, also displayed right-hand side panel. bottom part figure shows model-averaged estimate combination individual model posterior distributions weighted posterior model probabilities.  last type visualization show forest plot. displays effect sizes original studies overall meta-analytic estimate single figure. can requested using forest() function.  options provided plotting function, see documentation using ?plot.RoBMA(), ?plot_models(), ?forest().","code":"plot(fit_RoBMA_est, parameter = \"mu\", prior = TRUE, xlim = c(-1, 1)) plot(fit_RoBMA_test, parameter = \"mu\", prior = TRUE, xlim = c(-.5, 1)) plot_models(fit_RoBMA_est) forest(fit_RoBMA_est)"},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/articles/Tutorial.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set-up","title":"Tutorial: Adjusting for Publication Bias in JASP and R - Selection Models, PET-PEESE, and Robust Bayesian Meta-Analysis","text":"start, need install JAGS (needed installation RoBMA package) R packages use analysis. Specifically RoBMA, weightr, metafor R packages. JAGS can downloaded JAGS website. Subsequently, install R packages install.packages() function. {r install.packages(c(\"RoBMA\", \"weightr\", \"metafor\")) happen use new M1 Mac machines Apple silicon, see blogpost outlining install JAGS M1. short, install Intel version R (Intel/x86-64) CRAN, Arm64 (Apple silicon) version. Note might changes installation process since blogpost written might JAGS version compatible Apple silicon available now. packages installed, can load workspace library() function.","code":"library(\"metafor\") library(\"weightr\") library(\"RoBMA\")"},{"path":"https://https://fbartos.github.io/RoBMA/articles/Tutorial.html","id":"lui-2015","dir":"Articles","previous_headings":"","what":"Lui (2015)","title":"Tutorial: Adjusting for Publication Bias in JASP and R - Selection Models, PET-PEESE, and Robust Bayesian Meta-Analysis","text":"Lui (2015) studied acculturation mismatch () result contrast collectivist cultures Asian Latin immigrant groups individualist culture United States correlates intergenerational cultural conflict (ICC). Lui (2015) meta-analyzed 18 independent studies correlating ICC. standard reanalysis indicates significant effect increased ICC, r = 0.250, p < .001.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/articles/Tutorial.html","id":"data-manipulation","dir":"Articles","previous_headings":"Lui (2015)","what":"Data manipulation","title":"Tutorial: Adjusting for Publication Bias in JASP and R - Selection Models, PET-PEESE, and Robust Bayesian Meta-Analysis","text":"First, load Lui2015.csv file R read.csv() function inspect first six data entries head() function (data set also included package can accessed via data(\"Lui2015\", package = \"RoBMA\") call). see data set contains three columns. first column called r contains effect sizes coded correlation coefficients, second column called n contains sample sizes, third column called study contains names individual studies. can access individual variables using data set name dollar ($) sign followed name column. example, can print effect sizes df$r command. printed output shows data set contains mostly positive effect sizes largest correlation coefficient r = 0.54.","code":"df <- read.csv(file = \"Lui2015.csv\") head(df) #>      r   n                   study #> 1 0.21 115 Ahn, Kim, & Park (2008) #> 2 0.29 283   Basanez et al. (2013) #> 3 0.22  80         Bounkeua (2007) #> 4 0.26 109        Hajizadeh (2009) #> 5 0.23  61            Hamid (2007) #> 6 0.54 107    Hwang & Wood (2009a) df$r #>  [1]  0.21  0.29  0.22  0.26  0.23  0.54  0.56  0.29  0.26  0.02 -0.06  0.38 #> [13]  0.25  0.08  0.17  0.33  0.36  0.13"},{"path":"https://https://fbartos.github.io/RoBMA/articles/Tutorial.html","id":"effect-size-transformations","dir":"Articles","previous_headings":"Lui (2015)","what":"Effect size transformations","title":"Tutorial: Adjusting for Publication Bias in JASP and R - Selection Models, PET-PEESE, and Robust Bayesian Meta-Analysis","text":"start analyzing data, transform effect sizes correlation coefficients ρ\\rho Fisher’s z. Correlation coefficients well suited meta-analysis (1) bounded range (-1, 1) non-linear increases near boundaries (2) standard error correlation coefficients related effect size. Fisher’s z transformation mitigates issues. unwinds (-1, 1) range (−∞-\\infty, ∞\\infty), makes sampling distribution approximately normal, breaks dependency standard errors effect sizes. apply transformation, use combine_data() function RoBMA package. pass correlation coefficients r argument, sample sizes n argument, set transformation argument \"fishers_z\" (study_names argument optional). function combine_data() saves transformed effect size estimates data frame called dfz, y column corresponds Fisher’s z transformation correlation coefficient se column corresponds standard error Fisher’s z. can also transform effect sizes according Cohen’s d transformation (utilize later fit selection models).","code":"dfz <- combine_data(r = df$r, n = df$n, study_names = df$study, transformation = \"fishers_z\") head(dfz) #>           y         se             study_names study_ids weight #> 1 0.2131713 0.09449112 Ahn, Kim, & Park (2008)        NA     NA #> 2 0.2985663 0.05976143   Basanez et al. (2013)        NA     NA #> 3 0.2236561 0.11396058         Bounkeua (2007)        NA     NA #> 4 0.2661084 0.09712859        Hajizadeh (2009)        NA     NA #> 5 0.2341895 0.13130643            Hamid (2007)        NA     NA #> 6 0.6041556 0.09805807    Hwang & Wood (2009a)        NA     NA dfd <- combine_data(r = df$r, n = df$n, study_names = df$study, transformation = \"cohens_d\") head(dfd) #>           y        se             study_names study_ids weight #> 1 0.4295790 0.1886397 Ahn, Kim, & Park (2008)        NA     NA #> 2 0.6060437 0.1215862   Basanez et al. (2013)        NA     NA #> 3 0.4510508 0.2264322         Bounkeua (2007)        NA     NA #> 4 0.5385205 0.1950065        Hajizadeh (2009)        NA     NA #> 5 0.4726720 0.2596249            Hamid (2007)        NA     NA #> 6 1.2831708 0.2123140    Hwang & Wood (2009a)        NA     NA"},{"path":"https://https://fbartos.github.io/RoBMA/articles/Tutorial.html","id":"re-analysis-with-random-effect-meta-analysis","dir":"Articles","previous_headings":"Lui (2015)","what":"Re-analysis with random effect meta-analysis","title":"Tutorial: Adjusting for Publication Bias in JASP and R - Selection Models, PET-PEESE, and Robust Bayesian Meta-Analysis","text":"now estimate random effect meta-analysis rma() function imported metafor package (Wolfgang, 2010) verify arrive results reported Lui (2015) paper. yi argument used pass column name containing effect sizes, sei argument used pass column name containing standard errors, data argument used pass data frame containing variables. Indeed, find effect size estimate random effect meta-analysis corresponds one reported Lui (2015). important remember used Fisher’s z estimate models; therefore, estimated results Fisher’s z scale. transform effect size estimate correlation coefficients, can use z2r() function RoBMA package, Transforming effect size estimate results correlation coefficient ρ\\rho = 0.25.","code":"fit_rma <- rma(yi = y, sei = se, data = dfz) fit_rma #>  #> Random-Effects Model (k = 18; tau^2 estimator: REML) #>  #> tau^2 (estimated amount of total heterogeneity): 0.0229 (SE = 0.0107) #> tau (square root of estimated tau^2 value):      0.1513 #> I^2 (total heterogeneity / total variability):   77.79% #> H^2 (total variability / sampling variability):  4.50 #>  #> Test for Heterogeneity: #> Q(df = 17) = 73.5786, p-val < .0001 #>  #> Model Results: #>  #> estimate      se    zval    pval   ci.lb   ci.ub       #>   0.2538  0.0419  6.0568  <.0001  0.1717  0.3359  ***  #>  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 z2r(fit_rma$b) #>              [,1] #> intrcpt 0.2484877"},{"path":"https://https://fbartos.github.io/RoBMA/articles/Tutorial.html","id":"pet-peese","dir":"Articles","previous_headings":"","what":"PET-PEESE","title":"Tutorial: Adjusting for Publication Bias in JASP and R - Selection Models, PET-PEESE, and Robust Bayesian Meta-Analysis","text":"first publication bias adjustment perform PET-PEESE. PET-PEESE adjusts relationship effect sizes standard errors. knowledge, PET-PEESE currently implemented R-package. However, since PET PEESE weighted regressions effect sizes standard errors (PET) standard errors squared (PEESE), can estimate PET PEESE models lm() function. Inside lm() function call, specify y response variable (left hand side ~ sign) se predictor (right-hand side). Furthermore, specify weights argument allows us weight meta-regression inverse variance set data = dfz argument, specifies variables come transformed, dfz, data set. summary() function allows us explore details fitted model. (Intercept) coefficient refers meta-analytic effect size (corrected correlation standard errors). , important keep mind effect size estimate Fisher’s z scale. obtain estimate correlation scale z2r() function (pass estimated effect size using summary(fit_PET)$coefficients[\"(Intercept)\", \"Estimate\"] command, extracts estimate fitted model, equivalent simply pasting value directly z2r(-0.0008722083)). Since Fisher’s z transformation almost linear around zero, obtain almost identical estimate. importantly, since test effect size PET significant α=.10\\alpha = .10, interpret PET model. However, test effect size significant, fit interpret PEESE model. PEESE model can fitted analogous way, replacing predictor standard errors standard errors squared (need wrap se^2 predictor () tells R square predictor prior fitting model).","code":"fit_PET <- lm(y ~ se, weights = 1/se^2, data = dfz) summary(fit_PET) #>  #> Call: #> lm(formula = y ~ se, data = dfz, weights = 1/se^2) #>  #> Weighted Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.8132 -0.9112 -0.0139  0.5166  3.3151  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)   #> (Intercept) -0.0008722  0.1081247  -0.008   0.9937   #> se           2.8549650  1.3593450   2.100   0.0519 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.899 on 16 degrees of freedom #> Multiple R-squared:  0.2161, Adjusted R-squared:  0.1671  #> F-statistic: 4.411 on 1 and 16 DF,  p-value: 0.05192 z2r(summary(fit_PET)$coefficients[\"(Intercept)\", \"Estimate\"]) #> [1] -0.000872208 fit_PEESE <- lm(y ~ I(se^2), weights = 1/se^2, data = dfz) summary(fit_PEESE) #>  #> Call: #> lm(formula = y ~ I(se^2), data = dfz, weights = 1/se^2) #>  #> Weighted Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.7961 -0.9581 -0.1156  0.6718  3.4608  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  0.11498    0.06201   1.854   0.0822 . #> I(se^2)     15.58064    7.96723   1.956   0.0682 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.927 on 16 degrees of freedom #> Multiple R-squared:  0.1929, Adjusted R-squared:  0.1425  #> F-statistic: 3.824 on 1 and 16 DF,  p-value: 0.06821"},{"path":"https://https://fbartos.github.io/RoBMA/articles/Tutorial.html","id":"selection-models","dir":"Articles","previous_headings":"","what":"Selection models","title":"Tutorial: Adjusting for Publication Bias in JASP and R - Selection Models, PET-PEESE, and Robust Bayesian Meta-Analysis","text":"second publication bias adjustment perform selection models. Selection models adjust different publication probabilities different p-value intervals. Selection models implemented weightr package (weightfunct() function; Coburn et al. (2019)) newly also metafor package (selmodel() function; Wolfgang (2010)). First, use weightr implementation fit “4PSM” selection model specifies three distinct p-value intervals: (1) covering range significant p-values effect sizes expected direction (0.00-0.025), (2) covering range “marginally” significant p-values effect sizes expected direction (0.025-0.05), (3) covering range non-significant p-values (0.05-1). use Cohen’s d transformation correlation coefficients since better maintaining distribution test statistics. fit model, need pass effect sizes (dfd$y) effect argument variances (dfd$se^2) v argument (note need pass vector values directly since weightfunct() function allow us pass data frame directly previous functions). set steps = c(0.025, 0.05) specify appropriate cut-points (note steps correspond one-sided p-values), set table = TRUE obtain frequency p values specified intervals. Note warning message informing us fact data contain sufficient number p-values one p-value intervals. model output obtained printing fitted model object fit_4PSM shows one p-value (0.025, 0.05) interval. can deal issue joining “marginally” significant non-significant p-value interval, resulting “3PSM” model. new model suffer estimation problem due limited number p-values intervals, can now interpret results confidence. First, check test heterogeneity clearly rejects null hypothesis Q(df = 17) = 75.4999, $p$ = 5.188348e-09 (find evidence heterogeneity, proceeded fitting fixed effects version model specifying fe = TRUE argument). follow checking test publication bias likelihood ratio test comparing unadjusted adjusted estimate X^2(df = 1) = 3.107176, $p$ = 0.077948. result test slightly ambiguous – reject null hypothesis publication bias α=0.10\\alpha = 0.10 α=0.05\\alpha = 0.05. decide interpret estimated effect size, transform back correlation scale. However, time need use d2r() function since supplied effect sizes Cohen’s d (note effect size estimate corresponds second value fit_3PSM$adj_est object random effect model, alternatively, simply use d2r(0.3219641)). Alternatively, conducted analysis analogously metafor package. First, fit random effect meta-analysis Cohen’s d transformed effect sizes. Subsequently, used selmodel function, passing estimated random effect meta-analysis object specifying type = \"stepfun\" argument obtain step weight function setting appropriate steps steps = c(0.025) argument. output verifies results obtained previous analysis.","code":"fit_4PSM <- weightfunct(effect = dfd$y, v = dfd$se^2, steps = c(0.025, 0.05), table = TRUE) #> Warning in weightfunct(effect = dfd$y, v = dfd$se^2, steps = c(0.025, 0.05), : #> At least one of the p-value intervals contains three or fewer effect sizes, #> which may lead to estimation problems. Consider re-specifying the cutpoints. fit_4PSM #>  #> Unadjusted Model (k = 18): #>  #> tau^2 (estimated amount of total heterogeneity): 0.0920 (SE = 0.0423) #> tau (square root of estimated tau^2 value):  0.3034 #>  #> Test for Heterogeneity: #> Q(df = 17) = 75.4999, p-val = 5.188348e-09 #>  #> Model Results: #>  #>           estimate std.error z-stat      p-val ci.lb  ci.ub #> Intercept    0.516   0.08473   6.09 1.1283e-09  0.35 0.6821 #>  #> Adjusted Model (k = 18): #>  #> tau^2 (estimated amount of total heterogeneity): 0.1289 (SE = 0.0682) #> tau (square root of estimated tau^2 value):  0.3590 #>  #> Test for Heterogeneity: #> Q(df = 17) = 75.4999, p-val = 5.188348e-09 #>  #> Model Results: #>  #>                  estimate std.error z-stat   p-val   ci.lb  ci.ub #> Intercept          0.2675    0.2009 1.3311 0.18316 -0.1264 0.6613 #> 0.025 < p < 0.05   0.5008    0.5449 0.9191 0.35803 -0.5671 1.5688 #> 0.05 < p < 1       0.1535    0.1570 0.9777 0.32821 -0.1542 0.4611 #>  #> Likelihood Ratio Test: #> X^2(df = 2) = 3.844252, p-val = 0.1463 #>  #> Number of Effect Sizes per Interval: #>  #>                         Frequency #> p-values <0.025                14 #> 0.025 < p-values < 0.05         1 #> 0.05 < p-values < 1             3 fit_3PSM <- weightfunct(effect = dfd$y, v = dfd$se^2, steps = c(0.025), table = TRUE) fit_3PSM #>  #> Unadjusted Model (k = 18): #>  #> tau^2 (estimated amount of total heterogeneity): 0.0920 (SE = 0.0423) #> tau (square root of estimated tau^2 value):  0.3034 #>  #> Test for Heterogeneity: #> Q(df = 17) = 75.4999, p-val = 5.188348e-09 #>  #> Model Results: #>  #>           estimate std.error z-stat      p-val ci.lb  ci.ub #> Intercept    0.516   0.08473   6.09 1.1283e-09  0.35 0.6821 #>  #> Adjusted Model (k = 18): #>  #> tau^2 (estimated amount of total heterogeneity): 0.1148 (SE = 0.0577) #> tau (square root of estimated tau^2 value):  0.3388 #>  #> Test for Heterogeneity: #> Q(df = 17) = 75.4999, p-val = 5.188348e-09 #>  #> Model Results: #>  #>               estimate std.error z-stat    p-val     ci.lb  ci.ub #> Intercept       0.3220    0.1676  1.921 0.054698 -0.006484 0.6504 #> 0.025 < p < 1   0.2275    0.2004  1.135 0.256293 -0.165324 0.6204 #>  #> Likelihood Ratio Test: #> X^2(df = 1) = 3.107176, p-val = 0.077948 #>  #> Number of Effect Sizes per Interval: #>  #>                      Frequency #> p-values <0.025             14 #> 0.025 < p-values < 1         4 d2r(fit_3PSM$adj_est[2]) #> [1] 0.1589358 fit_rma_d <- rma(yi = y, sei = se, data = dfd) fit_sel_d <- selmodel(fit_rma_d, type = \"stepfun\", steps = c(0.025)) fit_sel_d #>  #> Random-Effects Model (k = 18; tau^2 estimator: ML) #>  #> tau^2 (estimated amount of total heterogeneity): 0.1148 (SE = 0.0577) #> tau (square root of estimated tau^2 value):      0.3388 #>  #> Test for Heterogeneity: #> LRT(df = 1) = 32.7499, p-val < .0001 #>  #> Model Results: #>  #> estimate      se    zval    pval    ci.lb   ci.ub     #>   0.3220  0.1676  1.9214  0.0547  -0.0065  0.6504  .  #>  #> Test for Selection Model Parameters: #> LRT(df = 1) = 3.1072, p-val = 0.0779 #>  #> Selection Model Results: #>  #>                      k  estimate      se     zval    pval   ci.lb   ci.ub       #> 0     < p <= 0.025  14    1.0000     ---      ---     ---     ---     ---       #> 0.025 < p <= 1       4    0.2275  0.2004  -3.8537  0.0001  0.0000  0.6204  ***  #>  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://https://fbartos.github.io/RoBMA/articles/Tutorial.html","id":"robust-bayesian-meta-analysis","dir":"Articles","previous_headings":"","what":"Robust Bayesian meta-analysis","title":"Tutorial: Adjusting for Publication Bias in JASP and R - Selection Models, PET-PEESE, and Robust Bayesian Meta-Analysis","text":"third final publication bias adjustment perform robust Bayesian meta-analysis (RoBMA). RoBMA uses Bayesian model-averaging combine inference PET-PEESE selection models. use RoBMA R package (RoBMA() function; Bartoš & Maier (2020)) fit default 36 model ensemble (called RoBMA-PSMA) based orthogonal combination models assuming presence absence effect size, heterogeneity, publication bias. models assuming presence publication bias split six weight function models models utilizing PET PEESE publication bias adjustment. fit model, can directly pass original correlation coefficients r argument sample sizes n argument – RoBMA() function internally transform Fisher’s z scale , default, return estimates Cohen’s d scale used specify prior distributions (settings can changed prior_scale transformation arguments, output can conveniently transformed later). set model argument \"PSMA\" fit 36 model ensemble use seed argument make analysis reproducible (uses MCMC sampling contrast previous methods). turn parallel estimation setting parallel = TRUE argument (parallel processing might cases fail, try rerunning model one time turning parallel processing case). step can take time depending CPU. example, take approximately 1 minute fast CPU (e.g., AMD Ryzen 3900x 12c/24t) ten minutes longer slower CPUs (e.g., 2.7 GHz Intel Core i5). use summary() function explore details fitted model. printed output consists two parts. first table called Components summary contains information fitted models. tells us estimated ensemble 18/36 models assuming presence effect, 18/36 models assuming presence heterogeneity, 32/36 models assuming presence publication bias. second column summarizes prior model probabilities models assuming either presence individual components – , see presence absence components balanced priori. third column contains information posterior probability models assuming presence components – can observe posterior model probabilities models assuming presence effect slightly increased 0.552. last column contains information evidence favor presence components. Evidence presence effect undecided; models assuming presence effect 1.232 times likely given data models assuming absence effect. However, find overwhelming evidence favor heterogeneity, models assuming presence heterogeneity 19,168 times likely given data models assuming absence heterogeneity, moderate evidence favor publication bias. name indicates, second table called Model-averaged estimates contains information model-averaged estimates. first row labeled mu corresponds model-averaged effect size estimate (Cohen’s d scale) second row labeled tau corresponds model-averaged heterogeneity estimates. estimated model-averaged weights different p-value intervals PET PEESE regression coefficients. convert estimates correlation coefficients adding output_scale = \"r\" argument summary function. Now, obtained model-averaged effect size estimate correlation scale. interested estimates model-averaging across models assuming presence effect (effect size estimate), heterogeneity (heterogeneity estimate), publication bias (publication bias weights PET PEESE regression coefficients), added conditional = TRUE argument summary function. quick textual summary model can also generated interpret() function. can also obtain summary information individual models specifying type = \"models\" option. resulting table shows prior posterior model probabilities inclusion Bayes factors individual models (also set short_name = TRUE argument reducing width output abbreviating names prior distributions). obtain summary individual model diagnostics, set type = \"diagnostics\" argument. resulting table provides information maximum MCMC error, relative MCMC error, minimum ESS, maximum R-hat aggregating parameters model. can see, obtain acceptable ESS R-hat diagnostic values. Finally, can also plot model-averaged posterior distribution plot() function. set prior = TRUE argument include prior distribution grey line (arrow point density zero) output_scale = \"r\" transform posterior distribution correlation scale (default figure output Cohen’s d scale). (par(mar = c(4, 4, 1, 4)) call increases left margin figure, secondary y-axis text cut .)","code":"fit_RoBMA <- RoBMA(r = df$r, n = df$n, seed = 1, model = \"PSMA\", parallel = TRUE) summary(fit_RoBMA) #> Call: #> RoBMA(r = df$r, n = df$n, model_type = \"PSMA\", parallel = TRUE,  #>     save = \"min\", seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect         18/36       0.500       0.552        1.231 #> Heterogeneity  18/36       0.500       1.000    19060.032 #> Bias           32/36       0.500       0.844        5.420 #>  #> Model-averaged estimates: #>                    Mean Median  0.025  0.975 #> mu                0.195  0.086 -0.008  0.598 #> tau               0.330  0.307  0.166  0.597 #> omega[0,0.025]    1.000  1.000  1.000  1.000 #> omega[0.025,0.05] 0.936  1.000  0.438  1.000 #> omega[0.05,0.5]   0.741  1.000  0.065  1.000 #> omega[0.5,0.95]   0.697  1.000  0.028  1.000 #> omega[0.95,0.975] 0.704  1.000  0.028  1.000 #> omega[0.975,1]    0.713  1.000  0.028  1.000 #> PET               0.828  0.000  0.000  3.291 #> PEESE             0.803  0.000  0.000 10.826 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #> (Estimated publication weights omega correspond to one-sided p-values.) summary(fit_RoBMA, output_scale = \"r\") #> Call: #> RoBMA(r = df$r, n = df$n, model_type = \"PSMA\", parallel = TRUE,  #>     save = \"min\", seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect         18/36       0.500       0.552        1.231 #> Heterogeneity  18/36       0.500       1.000    19060.032 #> Bias           32/36       0.500       0.844        5.420 #>  #> Model-averaged estimates: #>                    Mean Median  0.025  0.975 #> mu                0.095  0.043 -0.004  0.286 #> tau               0.165  0.154  0.083  0.299 #> omega[0,0.025]    1.000  1.000  1.000  1.000 #> omega[0.025,0.05] 0.936  1.000  0.438  1.000 #> omega[0.05,0.5]   0.741  1.000  0.065  1.000 #> omega[0.5,0.95]   0.697  1.000  0.028  1.000 #> omega[0.95,0.975] 0.704  1.000  0.028  1.000 #> omega[0.975,1]    0.713  1.000  0.028  1.000 #> PET               0.828  0.000  0.000  3.291 #> PEESE             1.605  0.000  0.000 21.652 #> The effect size estimates are summarized on the correlation scale and heterogeneity is summarized on the Fisher's z scale (priors were specified on the Cohen's d scale). #> (Estimated publication weights omega correspond to one-sided p-values.) interpret(fit_RoBMA, output_scale = \"r\") #> [1] \"Robust Bayesian meta-analysis found weak evidence in favor of the effect, BF_10 = 1.23, with mean model-averaged estimate correlation = 0.095, 95% CI [-0.004,  0.286]. Robust Bayesian meta-analysis found strong evidence in favor of the heterogeneity, BF^rf = 19060.03, with mean model-averaged estimate tau = 0.165, 95% CI [0.083, 0.299]. Robust Bayesian meta-analysis found moderate evidence in favor of the publication bias, BF_pb = 5.42.\" summary(fit_RoBMA, type = \"models\", short_name = TRUE) #> Call: #> RoBMA(r = df$r, n = df$n, model_type = \"PSMA\", parallel = TRUE,  #>     save = \"min\", seed = 1) #>  #> Robust Bayesian meta-analysis #> Models overview: #>  Model Prior Effect Prior Heterogeneity #>      1         S(0)                S(0) #>      2         S(0)                S(0) #>      3         S(0)                S(0) #>      4         S(0)                S(0) #>      5         S(0)                S(0) #>      6         S(0)                S(0) #>      7         S(0)                S(0) #>      8         S(0)                S(0) #>      9         S(0)                S(0) #>     10         S(0)         Ig(1, 0.15) #>     11         S(0)         Ig(1, 0.15) #>     12         S(0)         Ig(1, 0.15) #>     13         S(0)         Ig(1, 0.15) #>     14         S(0)         Ig(1, 0.15) #>     15         S(0)         Ig(1, 0.15) #>     16         S(0)         Ig(1, 0.15) #>     17         S(0)         Ig(1, 0.15) #>     18         S(0)         Ig(1, 0.15) #>     19      N(0, 1)                S(0) #>     20      N(0, 1)                S(0) #>     21      N(0, 1)                S(0) #>     22      N(0, 1)                S(0) #>     23      N(0, 1)                S(0) #>     24      N(0, 1)                S(0) #>     25      N(0, 1)                S(0) #>     26      N(0, 1)                S(0) #>     27      N(0, 1)                S(0) #>     28      N(0, 1)         Ig(1, 0.15) #>     29      N(0, 1)         Ig(1, 0.15) #>     30      N(0, 1)         Ig(1, 0.15) #>     31      N(0, 1)         Ig(1, 0.15) #>     32      N(0, 1)         Ig(1, 0.15) #>     33      N(0, 1)         Ig(1, 0.15) #>     34      N(0, 1)         Ig(1, 0.15) #>     35      N(0, 1)         Ig(1, 0.15) #>     36      N(0, 1)         Ig(1, 0.15) #>                   Prior Bias                 Prior prob. log(marglik) #>                                                    0.125       -74.67 #>            omega[2s: .05] ~ CumD(1, 1)             0.010       -49.60 #>        omega[2s: .1, .05] ~ CumD(1, 1, 1)          0.010       -47.53 #>            omega[1s: .05] ~ CumD(1, 1)             0.010       -41.70 #>      omega[1s: .05, .025] ~ CumD(1, 1, 1)          0.010       -38.04 #>        omega[1s: .5, .05] ~ CumD(1, 1, 1)          0.010       -44.42 #>  omega[1s: .5, .05, .025] ~ CumD(1, 1, 1, 1)       0.010       -40.79 #>                       PET ~ C(0, 1)[0, Inf]        0.031        -5.01 #>                     PEESE ~ C(0, 5)[0, Inf]        0.031       -12.17 #>                                                    0.125        -6.95 #>            omega[2s: .05] ~ CumD(1, 1)             0.010        -5.96 #>        omega[2s: .1, .05] ~ CumD(1, 1, 1)          0.010        -5.10 #>            omega[1s: .05] ~ CumD(1, 1)             0.010         2.72 #>      omega[1s: .05, .025] ~ CumD(1, 1, 1)          0.010         2.93 #>        omega[1s: .5, .05] ~ CumD(1, 1, 1)          0.010         2.90 #>  omega[1s: .5, .05, .025] ~ CumD(1, 1, 1, 1)       0.010         3.30 #>                       PET ~ C(0, 1)[0, Inf]        0.031         3.62 #>                     PEESE ~ C(0, 5)[0, Inf]        0.031         1.63 #>                                                    0.125       -13.17 #>            omega[2s: .05] ~ CumD(1, 1)             0.010       -13.10 #>        omega[2s: .1, .05] ~ CumD(1, 1, 1)          0.010       -12.87 #>            omega[1s: .05] ~ CumD(1, 1)             0.010       -12.76 #>      omega[1s: .05, .025] ~ CumD(1, 1, 1)          0.010       -12.87 #>        omega[1s: .5, .05] ~ CumD(1, 1, 1)          0.010       -13.30 #>  omega[1s: .5, .05, .025] ~ CumD(1, 1, 1, 1)       0.010       -13.25 #>                       PET ~ C(0, 1)[0, Inf]        0.031        -7.04 #>                     PEESE ~ C(0, 5)[0, Inf]        0.031        -7.58 #>                                                    0.125         1.79 #>            omega[2s: .05] ~ CumD(1, 1)             0.010         1.75 #>        omega[2s: .1, .05] ~ CumD(1, 1, 1)          0.010         2.16 #>            omega[1s: .05] ~ CumD(1, 1)             0.010         3.10 #>      omega[1s: .05, .025] ~ CumD(1, 1, 1)          0.010         3.01 #>        omega[1s: .5, .05] ~ CumD(1, 1, 1)          0.010         2.98 #>  omega[1s: .5, .05, .025] ~ CumD(1, 1, 1, 1)       0.010         3.07 #>                       PET ~ C(0, 1)[0, Inf]        0.031         2.74 #>                     PEESE ~ C(0, 5)[0, Inf]        0.031         2.54 #>  Post. prob. Inclusion BF #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.001 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.001 #>        0.000        0.001 #>        0.033        3.234 #>        0.040        4.008 #>        0.039        3.894 #>        0.059        5.941 #>        0.243        9.977 #>        0.033        1.059 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.000        0.000 #>        0.156        1.291 #>        0.012        1.200 #>        0.019        1.824 #>        0.048        4.803 #>        0.044        4.358 #>        0.043        4.242 #>        0.046        4.632 #>        0.101        3.485 #>        0.082        2.785 summary(fit_RoBMA, type = \"diagnostics\") #> Call: #> RoBMA(r = df$r, n = df$n, model_type = \"PSMA\", parallel = TRUE,  #>     save = \"min\", seed = 1) #>  #> Robust Bayesian meta-analysis #> Diagnostics overview: #>  Model Prior Effect Prior Heterogeneity #>      1     Spike(0)            Spike(0) #>      2     Spike(0)            Spike(0) #>      3     Spike(0)            Spike(0) #>      4     Spike(0)            Spike(0) #>      5     Spike(0)            Spike(0) #>      6     Spike(0)            Spike(0) #>      7     Spike(0)            Spike(0) #>      8     Spike(0)            Spike(0) #>      9     Spike(0)            Spike(0) #>     10     Spike(0)   InvGamma(1, 0.15) #>     11     Spike(0)   InvGamma(1, 0.15) #>     12     Spike(0)   InvGamma(1, 0.15) #>     13     Spike(0)   InvGamma(1, 0.15) #>     14     Spike(0)   InvGamma(1, 0.15) #>     15     Spike(0)   InvGamma(1, 0.15) #>     16     Spike(0)   InvGamma(1, 0.15) #>     17     Spike(0)   InvGamma(1, 0.15) #>     18     Spike(0)   InvGamma(1, 0.15) #>     19 Normal(0, 1)            Spike(0) #>     20 Normal(0, 1)            Spike(0) #>     21 Normal(0, 1)            Spike(0) #>     22 Normal(0, 1)            Spike(0) #>     23 Normal(0, 1)            Spike(0) #>     24 Normal(0, 1)            Spike(0) #>     25 Normal(0, 1)            Spike(0) #>     26 Normal(0, 1)            Spike(0) #>     27 Normal(0, 1)            Spike(0) #>     28 Normal(0, 1)   InvGamma(1, 0.15) #>     29 Normal(0, 1)   InvGamma(1, 0.15) #>     30 Normal(0, 1)   InvGamma(1, 0.15) #>     31 Normal(0, 1)   InvGamma(1, 0.15) #>     32 Normal(0, 1)   InvGamma(1, 0.15) #>     33 Normal(0, 1)   InvGamma(1, 0.15) #>     34 Normal(0, 1)   InvGamma(1, 0.15) #>     35 Normal(0, 1)   InvGamma(1, 0.15) #>     36 Normal(0, 1)   InvGamma(1, 0.15) #>                          Prior Bias                         max[error(MCMC)] #>                                                                           NA #>            omega[two-sided: .05] ~ CumDirichlet(1, 1)                0.00025 #>        omega[two-sided: .1, .05] ~ CumDirichlet(1, 1, 1)             0.00299 #>            omega[one-sided: .05] ~ CumDirichlet(1, 1)                0.00015 #>      omega[one-sided: .05, .025] ~ CumDirichlet(1, 1, 1)             0.00331 #>        omega[one-sided: .5, .05] ~ CumDirichlet(1, 1, 1)             0.00034 #>  omega[one-sided: .5, .05, .025] ~ CumDirichlet(1, 1, 1, 1)          0.00313 #>                              PET ~ Cauchy(0, 1)[0, Inf]              0.00237 #>                            PEESE ~ Cauchy(0, 5)[0, Inf]              0.01224 #>                                                                      0.00119 #>            omega[two-sided: .05] ~ CumDirichlet(1, 1)                0.00299 #>        omega[two-sided: .1, .05] ~ CumDirichlet(1, 1, 1)             0.00295 #>            omega[one-sided: .05] ~ CumDirichlet(1, 1)                0.00114 #>      omega[one-sided: .05, .025] ~ CumDirichlet(1, 1, 1)             0.00331 #>        omega[one-sided: .5, .05] ~ CumDirichlet(1, 1, 1)             0.00359 #>  omega[one-sided: .5, .05, .025] ~ CumDirichlet(1, 1, 1, 1)          0.00308 #>                              PET ~ Cauchy(0, 1)[0, Inf]              0.00455 #>                            PEESE ~ Cauchy(0, 5)[0, Inf]              0.02479 #>                                                                      0.00038 #>            omega[two-sided: .05] ~ CumDirichlet(1, 1)                0.00304 #>        omega[two-sided: .1, .05] ~ CumDirichlet(1, 1, 1)             0.00290 #>            omega[one-sided: .05] ~ CumDirichlet(1, 1)                0.00309 #>      omega[one-sided: .05, .025] ~ CumDirichlet(1, 1, 1)             0.00278 #>        omega[one-sided: .5, .05] ~ CumDirichlet(1, 1, 1)             0.00332 #>  omega[one-sided: .5, .05, .025] ~ CumDirichlet(1, 1, 1, 1)          0.00294 #>                              PET ~ Cauchy(0, 1)[0, Inf]              0.03243 #>                            PEESE ~ Cauchy(0, 5)[0, Inf]              0.05226 #>                                                                      0.00090 #>            omega[two-sided: .05] ~ CumDirichlet(1, 1)                0.00308 #>        omega[two-sided: .1, .05] ~ CumDirichlet(1, 1, 1)             0.00294 #>            omega[one-sided: .05] ~ CumDirichlet(1, 1)                0.00483 #>      omega[one-sided: .05, .025] ~ CumDirichlet(1, 1, 1)             0.00342 #>        omega[one-sided: .5, .05] ~ CumDirichlet(1, 1, 1)             0.00640 #>  omega[one-sided: .5, .05, .025] ~ CumDirichlet(1, 1, 1, 1)          0.00501 #>                              PET ~ Cauchy(0, 1)[0, Inf]              0.04083 #>                            PEESE ~ Cauchy(0, 5)[0, Inf]              0.07247 #>  max[error(MCMC)/SD] min(ESS) max(R-hat) #>                   NA       NA         NA #>                0.016     4158      1.001 #>                0.016     3793      1.001 #>                0.016     4622      1.000 #>                0.018     3357      1.003 #>                0.018     3509      1.001 #>                0.019     3064      1.003 #>                0.010     9917      1.001 #>                0.010     9589      1.000 #>                0.010     9632      1.001 #>                0.014     5518      1.002 #>                0.015     4565      1.001 #>                0.016     4395      1.001 #>                0.015     4502      1.003 #>                0.019     3206      1.002 #>                0.017     3480      1.003 #>                0.012     7342      1.001 #>                0.012     7051      1.000 #>                0.010     9712      1.001 #>                0.013     5522      1.000 #>                0.015     4382      1.001 #>                0.013     5771      1.000 #>                0.014     4859      1.001 #>                0.015     4430      1.000 #>                0.016     4135      1.001 #>                0.042      565      1.005 #>                0.024     1678      1.001 #>                0.011     7736      1.000 #>                0.014     5254      1.001 #>                0.016     4103      1.001 #>                0.021     2240      1.001 #>                0.020     2527      1.001 #>                0.030     1529      1.007 #>                0.024     1756      1.001 #>                0.038      692      1.001 #>                0.024     1765      1.005 par(mar = c(4, 4, 1, 4)) plot(fit_RoBMA, prior = TRUE, output_scale = \"r\", )"},{"path":"https://https://fbartos.github.io/RoBMA/articles/Tutorial.html","id":"specifying-different-priors","dir":"Articles","previous_headings":"Robust Bayesian meta-analysis","what":"Specifying Different Priors","title":"Tutorial: Adjusting for Publication Bias in JASP and R - Selection Models, PET-PEESE, and Robust Bayesian Meta-Analysis","text":"RoBMA package allows us fit ensembles highly customized meta-analytic models. reproduce ensemble perinull directional hypothesis test Appendix (see R package vignettes examples details). Instead using fully pre-specified model model = \"PSMA\" argument, explicitly specify prior distribution models assuming presence effect priors_effect = prior(\"normal\", parameters = list(mean = 0.60, sd = 0.20), truncation = list(0, Inf)) argument, assigns Normal(0.60, 0.20) distribution bounded positive numbers μ\\mu parameter (note prior distribution specified Cohen’s d scale, corresponding 95% prior probability mass contained approximately ρ\\rho = (0.10, 0.45) interval). Similarly, also replace default prior distribution models assuming absence effect perinull hypothesis priors_effect_null = prior(\"normal\", parameters = list(mean = 0, sd = 0.10)) argument sets 95% prior probability mass values ρ\\rho = (-0.10, 0.10) interval. previously, can use summary() function inspect model fit verify specified models correspond settings.","code":"fit_RoBMA2 <- RoBMA(r = df$r, n = df$n, seed = 2, parallel = TRUE,                     priors_effect      = prior(\"normal\", parameters = list(mean = 0.60, sd = 0.20), truncation = list(0, Inf)),                     priors_effect_null = prior(\"normal\", parameters = list(mean = 0,    sd = 0.10))) summary(fit_RoBMA2, type = \"models\") #> Call: #> RoBMA(r = df$r, n = df$n, priors_effect = prior(\"normal\", parameters = list(mean = 0.6,  #>     sd = 0.2), truncation = list(0, Inf)), priors_effect_null = prior(\"normal\",  #>     parameters = list(mean = 0, sd = 0.1)), parallel = TRUE,  #>     save = \"min\", seed = 2) #>  #> Robust Bayesian meta-analysis #> Models overview: #>  Model       Prior Effect       Prior Heterogeneity #>      1           Normal(0, 0.1)            Spike(0) #>      2           Normal(0, 0.1)            Spike(0) #>      3           Normal(0, 0.1)            Spike(0) #>      4           Normal(0, 0.1)            Spike(0) #>      5           Normal(0, 0.1)            Spike(0) #>      6           Normal(0, 0.1)            Spike(0) #>      7           Normal(0, 0.1)            Spike(0) #>      8           Normal(0, 0.1)            Spike(0) #>      9           Normal(0, 0.1)            Spike(0) #>     10           Normal(0, 0.1)   InvGamma(1, 0.15) #>     11           Normal(0, 0.1)   InvGamma(1, 0.15) #>     12           Normal(0, 0.1)   InvGamma(1, 0.15) #>     13           Normal(0, 0.1)   InvGamma(1, 0.15) #>     14           Normal(0, 0.1)   InvGamma(1, 0.15) #>     15           Normal(0, 0.1)   InvGamma(1, 0.15) #>     16           Normal(0, 0.1)   InvGamma(1, 0.15) #>     17           Normal(0, 0.1)   InvGamma(1, 0.15) #>     18           Normal(0, 0.1)   InvGamma(1, 0.15) #>     19 Normal(0.6, 0.2)[0, Inf]            Spike(0) #>     20 Normal(0.6, 0.2)[0, Inf]            Spike(0) #>     21 Normal(0.6, 0.2)[0, Inf]            Spike(0) #>     22 Normal(0.6, 0.2)[0, Inf]            Spike(0) #>     23 Normal(0.6, 0.2)[0, Inf]            Spike(0) #>     24 Normal(0.6, 0.2)[0, Inf]            Spike(0) #>     25 Normal(0.6, 0.2)[0, Inf]            Spike(0) #>     26 Normal(0.6, 0.2)[0, Inf]            Spike(0) #>     27 Normal(0.6, 0.2)[0, Inf]            Spike(0) #>     28 Normal(0.6, 0.2)[0, Inf]   InvGamma(1, 0.15) #>     29 Normal(0.6, 0.2)[0, Inf]   InvGamma(1, 0.15) #>     30 Normal(0.6, 0.2)[0, Inf]   InvGamma(1, 0.15) #>     31 Normal(0.6, 0.2)[0, Inf]   InvGamma(1, 0.15) #>     32 Normal(0.6, 0.2)[0, Inf]   InvGamma(1, 0.15) #>     33 Normal(0.6, 0.2)[0, Inf]   InvGamma(1, 0.15) #>     34 Normal(0.6, 0.2)[0, Inf]   InvGamma(1, 0.15) #>     35 Normal(0.6, 0.2)[0, Inf]   InvGamma(1, 0.15) #>     36 Normal(0.6, 0.2)[0, Inf]   InvGamma(1, 0.15) #>                          Prior Bias                         Prior prob. #>                                                                   0.125 #>            omega[two-sided: .05] ~ CumDirichlet(1, 1)             0.010 #>        omega[two-sided: .1, .05] ~ CumDirichlet(1, 1, 1)          0.010 #>            omega[one-sided: .05] ~ CumDirichlet(1, 1)             0.010 #>      omega[one-sided: .05, .025] ~ CumDirichlet(1, 1, 1)          0.010 #>        omega[one-sided: .5, .05] ~ CumDirichlet(1, 1, 1)          0.010 #>  omega[one-sided: .5, .05, .025] ~ CumDirichlet(1, 1, 1, 1)       0.010 #>                              PET ~ Cauchy(0, 1)[0, Inf]           0.031 #>                            PEESE ~ Cauchy(0, 5)[0, Inf]           0.031 #>                                                                   0.125 #>            omega[two-sided: .05] ~ CumDirichlet(1, 1)             0.010 #>        omega[two-sided: .1, .05] ~ CumDirichlet(1, 1, 1)          0.010 #>            omega[one-sided: .05] ~ CumDirichlet(1, 1)             0.010 #>      omega[one-sided: .05, .025] ~ CumDirichlet(1, 1, 1)          0.010 #>        omega[one-sided: .5, .05] ~ CumDirichlet(1, 1, 1)          0.010 #>  omega[one-sided: .5, .05, .025] ~ CumDirichlet(1, 1, 1, 1)       0.010 #>                              PET ~ Cauchy(0, 1)[0, Inf]           0.031 #>                            PEESE ~ Cauchy(0, 5)[0, Inf]           0.031 #>                                                                   0.125 #>            omega[two-sided: .05] ~ CumDirichlet(1, 1)             0.010 #>        omega[two-sided: .1, .05] ~ CumDirichlet(1, 1, 1)          0.010 #>            omega[one-sided: .05] ~ CumDirichlet(1, 1)             0.010 #>      omega[one-sided: .05, .025] ~ CumDirichlet(1, 1, 1)          0.010 #>        omega[one-sided: .5, .05] ~ CumDirichlet(1, 1, 1)          0.010 #>  omega[one-sided: .5, .05, .025] ~ CumDirichlet(1, 1, 1, 1)       0.010 #>                              PET ~ Cauchy(0, 1)[0, Inf]           0.031 #>                            PEESE ~ Cauchy(0, 5)[0, Inf]           0.031 #>                                                                   0.125 #>            omega[two-sided: .05] ~ CumDirichlet(1, 1)             0.010 #>        omega[two-sided: .1, .05] ~ CumDirichlet(1, 1, 1)          0.010 #>            omega[one-sided: .05] ~ CumDirichlet(1, 1)             0.010 #>      omega[one-sided: .05, .025] ~ CumDirichlet(1, 1, 1)          0.010 #>        omega[one-sided: .5, .05] ~ CumDirichlet(1, 1, 1)          0.010 #>  omega[one-sided: .5, .05, .025] ~ CumDirichlet(1, 1, 1, 1)       0.010 #>                              PET ~ Cauchy(0, 1)[0, Inf]           0.031 #>                            PEESE ~ Cauchy(0, 5)[0, Inf]           0.031 #>  log(marglik) Post. prob. Inclusion BF #>        -18.84       0.000        0.000 #>        -17.66       0.000        0.000 #>        -17.07       0.000        0.000 #>        -17.35       0.000        0.000 #>        -17.04       0.000        0.000 #>        -18.12       0.000        0.000 #>        -17.69       0.000        0.000 #>         -5.24       0.000        0.000 #>         -7.61       0.000        0.000 #>         -3.20       0.000        0.003 #>         -1.46       0.000        0.022 #>         -0.42       0.001        0.061 #>          3.01       0.020        1.926 #>          3.19       0.024        2.325 #>          3.08       0.021        2.087 #>          3.46       0.031        3.074 #>          3.64       0.112        3.915 #>          2.35       0.031        0.987 #>        -11.84       0.000        0.000 #>        -11.88       0.000        0.000 #>        -11.71       0.000        0.000 #>        -11.54       0.000        0.000 #>        -11.70       0.000        0.000 #>        -12.06       0.000        0.000 #>        -12.06       0.000        0.000 #>         -8.38       0.000        0.000 #>         -7.37       0.000        0.000 #>          3.36       0.338        3.574 #>          3.12       0.022        2.159 #>          3.43       0.030        2.967 #>          4.11       0.060        6.036 #>          3.86       0.047        4.644 #>          3.94       0.051        5.057 #>          3.85       0.046        4.584 #>          3.22       0.074        2.481 #>          3.44       0.092        3.124"},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"František Bartoš. Author, maintainer. Maximilian Maier. Author. Eric-Jan Wagenmakers. Thesis advisor. Joris Goosen. Contributor. Matthew Denwood. Copyright holder.           Original copyright holder modified code indicated. Martyn Plummer. Copyright holder.           Original copyright holder modified code indicated.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bartoš F, Maier M (2020). “RoBMA: R Package Robust Bayesian Meta-Analyses.” R package version 3.5.0, https://CRAN.R-project.org/package=RoBMA.","code":"@Misc{,   title = {RoBMA: An R Package for Robust Bayesian Meta-Analyses},   author = {František Bartoš and Maximilian Maier},   year = {2020},   note = {R package version 3.5.0},   url = {https://CRAN.R-project.org/package=RoBMA}, }"},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/index.html","id":"robust-bayesian-meta-analysis-robma","dir":"","previous_headings":"","what":"Robust Bayesian Meta-Analysis (RoBMA)","title":"Robust Bayesian Meta-Analyses","text":"package estimates ensemble meta-analytic models (assuming either presence absence effect, heterogeneity, publication bias) uses Bayesian model averaging combine . ensemble uses Bayes factors test presence absence individual components (e.g., effect vs. effect) model-averages parameter estimates based posterior model probabilities. user can define wide range prior distributions effect size, heterogeneity, publication bias components (including selection, PET, PEESE style models), moderators. package provides convenient functions summary, visualizations, fit diagnostics. package designed user-friendly provides wide range customization options. package also integrated JASP software (JASP Team, 2020) can used via graphical user interface. See manuscripts technical details examples: Bartoš et al. (2025) (https://doi.org/10.1037/met0000737) extends RoBMA-PSMA meta-regression Bartoš, Otte, et al. (2023) (https://doi.org/10.48550/arXiv.2306.11468) outlines binomial-normal Bayesian model-averaged meta-analysis binary outcomes (+ develops informed prior distributions log , log RR, RD, log HR medical settings, also see Bartoš et al. (2021) informed prior distributions Cohen’s d, based Cochrane Database Systematic Reviews) Bartoš, Maier, et al. (2023) (https://doi.org/10.1002/jrsm.1594) describes newest version publication bias adjustment, RoBMA-PSMA, combines selection models PET-PEESE, Maier et al. (2023) (https://doi.org/10.1037/met0000405) introduces RoBMA framework original version method, Bartoš et al. (2022) (https://doi.org/10.1177/25152459221109259) provides accessible tutorial method including implementation user-friendly graphical user interface JASP (JASP Team, 2020) also prepared multiple vignettes illustrate functionality package: Tutorial: Adjusting publication bias JASP R - Selection models, PET-PEESE, Robust Bayesian meta-analysis Reproducing Bayesian model-averaged meta-analysis (BMA) Robust Bayesian model-averaged meta-regression Hierarchical Bayesian model-averaged meta-analysis Informed Bayesian model-averaged meta-analysis medicine Informed Bayesian model-averaged meta-analysis binary outcomes Fitting custom meta-analytic ensembles Fast Robust Bayesian Meta-Analysis via Spike Slab Algorithm","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/index.html","id":"backwards-compatibility","dir":"","previous_headings":"Updates","what":"Backwards Compatibility","title":"Robust Bayesian Meta-Analyses","text":"Please note major releases RoBMA break backwards compatibility. latest version RoBMA 1 can installed using latest version RoBMA 2 can installed using (use source packages archived OSF repositories associated corresponding projects.)","code":"remotes::install_version(\"RoBMA\", version = \"1.2.1\") remotes::install_version(\"RoBMA\", version = \"2.3.2\")"},{"path":"https://https://fbartos.github.io/RoBMA/index.html","id":"news","dir":"","previous_headings":"Updates","what":"News","title":"Robust Bayesian Meta-Analyses","text":"3.0 version brings several features package: meta-regression models via RoBMA.reg() function binomial-normal meta-analytic models via BiBMA() function publication bias unadjusted models via NoBMA() NoBMA.reg() functions (wrappers around RoBMA() RoBMA.reg()) marginal summaries plots regression models via marginal_summary() marginal_plot() function prediction intervals, ^2, H^2 statistics using summary_heterogeneity() function spike slab algorithm faster model estimation via algorithm = \"ss\" argument 2.0 version brought several updates package: naming arguments specifying prior distributions different parameters/components models changed (priors_mu -> priors_effect, priors_tau -> priors_heterogeneity, priors_omega -> priors_bias), prior distributions specifying weight functions now use dedicated function (prior(distribution = \"two.sided\", parameters = ...) -> prior_weightfunction(distribution = \"two.sided\", parameters = ...)), new dedicated function specifying publication bias adjustment component / heterogeneity component (prior_none()), new dedicated functions specifying models PET PEESE publication bias adjustments (prior_PET(distribution = \"Cauchy\", parameters = ...) prior_PEESE(distribution = \"Cauchy\", parameters = ...)), new default prior distribution specification publication bias adjustment part models (corresponding RoBMA-PSMA model Bartoš, Maier, et al. (2023)), new model_type argument allowing specify different “pre-canned” models (\"PSMA\" = RoBMA-PSMA, \"PP\" = RoBMA-PP, \"2w\" = corresponding Maier et al. (2023)), combine_data function allows combination different effect sizes / variability measures common effect size measure (also used within RoBMA function) better improved automatic fitting procedure now enabled default (can turned autofit = FALSE) prior distributions can specified different scale supplied effect sizes (package fits model Fisher’s z scale back transforms results back scale used prior distributions specification, Cohen’s d default, can overwritten prior_scale transformation arguments), new prior distributions, e.g., beta fixed weight functions, plenty small changes arguments, output, etc…","code":""},{"path":"https://https://fbartos.github.io/RoBMA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Robust Bayesian Meta-Analyses","text":"package requires JAGS 4.3.2 installed. release version can installed CRAN: development version package can installed GitHub:","code":"install.packages(\"RoBMA\") devtools::install_github(\"FBartos/RoBMA\")"},{"path":"https://https://fbartos.github.io/RoBMA/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Robust Bayesian Meta-Analyses","text":"illustrate functionality package, fit RoBMA-PSMA model example Bartoš, Maier, et al. (2023) adjust publication bias infamous Bem (2011) “Feeling future” pre-cognition study. RoBMA-PSMA model combines six selection models PET-PEESE adjust publication bias. pre-print, analyze data described Bem et al. (2011) reply methodological critiques. First, load package data set included package. , fit meta-analytic model ensemble composed 36 models (new default settings RoBMA fitting function). models represent possible combinations prior distributions following components: spike zero, representing null hypothesis absence effect standard normal distribution, representing alternative hypothesis presence effect spike zero, representing null hypothesis absence heterogeneity (.e., fixed effect meta-analysis) inverse gamma distribution shape = 1 scale = 0.15, based Erp et al. (2017), representing alternative hypothesis presence heterogeneity (.e., random effect meta-analysis) prior distribution, representing absence publication bias eight prior distributions specifying two two-sided weight functions, four one-sided weight functions, PET PEESE publication bias adjustment, representing presence publication bias prior odds components default set make three model categories equally likely priory (0.5 prior probability presence effect, 0.5 prior probability presence heterogeneity, 0.5 prior probability presence publication bias). prior model probability publication bias adjustment component split equally among selection models represented six weightfunctions PET-PEESE models. main summary can obtained using summary.RoBMA() function. first table shows overview ensemble composition. number models, prior posterior model probabilities, inclusion Bayes factor ensemble components representing alternative hypothesis presence effect, heterogeneity, publication bias, can see data show weak evidence, barely worth mentioning, presence effect (BF10=0.479\\text{BF}_{10} = 0.479 -> BF01=2.09\\text{BF}_{01} = 2.09), moderate evidence absence heterogeneity (BFrf=0.143\\text{BF}_{\\text{rf}} = 0.143 -> BFfr=7.00BF_{\\text{fr}} = 7.00), strong evidence presence publication bias (BFpb=16.32\\text{BF}_{\\text{pb}} = 16.32). second table shows model-averaged estimates weighted individual models’ posterior probabilities. mean estimate μ=0.037\\mu =0.037, 95% CI [-0.041, 0.213], close zero, corresponding priory expected absence pre-cognition. heterogeneity estimate τ\\tau probability mass around zero due higher support models assuming absence heterogeneity. parameters omega, representing publication weights p-value interval decreasing increasing p-values, showing publication bias, well non zero PET PEESE estimates. can visualize estimated mean heterogeneity parameters using plot.RoBMA() function. arrows figures represent point probability mass μ=0\\mu = 0 τ=0\\tau = 0, corresponding null hypotheses absence effect heterogeneity, increasing posterior model probability 0.5 0.676 0.875 respectively.   can visualize publication bias adjustments selection models, visualizing posterior estimate model-averaged weightfunction shows sharp decrease publication weights studies p-values “marginal significance” (0.10) level,  PET-PEESE publication bias adjustment, visualizing individual studies’ standard errors effect sizes diamonds model-averaged estimate regression lines shows steady increase effect sizes increasing standard errors.  usual meta-analytic forest plot can obtained forest() function,  visualization effect size estimates models assuming presence effect can obtained plot_models() function.  Apart plotting, individual model performance can inspected using summary.RoBMA() function argument type = \"models\" overview individual model MCMC diagnostics can obtained setting type = \"diagnostics\" (shown lack space). can also visualize MCMC diagnostics using diagnostics function. function can display chains type = \"chain\" / posterior sample densities type = \"densities\", averaged auto-correlations type = \"autocorrelation\". , request chains trace plot μ\\mu parameter complex model setting show_models = 36 (model numbers can obtained summary function type = \"models\" argument).  package allows fit highly customized models different prior distribution functions, prior model probabilities, provides visualization options. See documentation find specific functions: RoBMA(), priors(), plot.RoBMA(). main package functionality also implemented within Meta Analysis module JASP 0.14 (JASP Team, 2020) soon updated accommodate 2.0 version package.","code":"library(RoBMA) #> Loading required namespace: runjags #> Loading required namespace: mvtnorm #> RoBMA version 3.3 now features spike-and-slab style model-averaging via the 'algorithm = \"ss\"' argument. #> See 'vignette(\"FastRoBMA\", package = \"RoBMA\")' for more details ('algorithm = \"ss\"' argument will become the default setting in the future major release of the package).  data(\"Bem2011\", package = \"RoBMA\") Bem2011 #>      d         se                                        study #> 1 0.25 0.10155048                  Detection of Erotic Stimuli #> 2 0.20 0.08246211                Avoidance of Negative Stimuli #> 3 0.26 0.10323629                        Retroactive Priming I #> 4 0.23 0.10182427                       Retroactive Priming II #> 5 0.22 0.10120277  Retroactive Habituation I - Negative trials #> 6 0.15 0.08210765 Retroactive Habituation II - Negative trials #> 7 0.09 0.07085372             Retroactive Induction of Boredom #> 8 0.19 0.10089846                     Facilitation of Recall I #> 9 0.42 0.14752627                    Facilitation of Recall II fit <- RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study, seed = 1) summary(fit) #> Call: #> RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study,  #>     seed = 1) #>  #> Robust Bayesian meta-analysis #> Components summary: #>               Models Prior prob. Post. prob. Inclusion BF #> Effect         18/36       0.500       0.324        0.479 #> Heterogeneity  18/36       0.500       0.125        0.143 #> Bias           32/36       0.500       0.942       16.323 #>  #> Model-averaged estimates: #>                    Mean Median  0.025  0.975 #> mu                0.037  0.000 -0.041  0.213 #> tau               0.010  0.000  0.000  0.113 #> omega[0,0.025]    1.000  1.000  1.000  1.000 #> omega[0.025,0.05] 0.935  1.000  0.338  1.000 #> omega[0.05,0.5]   0.780  1.000  0.009  1.000 #> omega[0.5,0.95]   0.768  1.000  0.007  1.000 #> omega[0.95,0.975] 0.786  1.000  0.007  1.000 #> omega[0.975,1]    0.801  1.000  0.007  1.000 #> PET               0.759  0.000  0.000  2.805 #> PEESE             6.183  0.000  0.000 25.463 #> The estimates are summarized on the Cohen's d scale (priors were specified on the Cohen's d scale). #> (Estimated publication weights omega correspond to one-sided p-values.) plot(fit, parameter = \"mu\", xlim = c(-0.5, 0.5)) plot(fit, parameter = \"tau\") plot(fit, parameter = \"weightfunction\", rescale_x = TRUE) plot(fit, parameter = \"PET-PEESE\", xlim = c(0, 0.25)) forest(fit) plot_models(fit, conditional = TRUE) diagnostics(fit, parameter = \"mu\", type = \"chains\", show_models = 36)"},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/adjusted_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute adjusted effect size — adjusted_effect","title":"Compute adjusted effect size — adjusted_effect","text":"adjusted_effect computes adjusted effect size fitted RoBMA.reg BiBMA.reg object. available models estimated using spike--slab algorithm (.e., algorithm = \"ss\").","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/adjusted_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute adjusted effect size — adjusted_effect","text":"","code":"adjusted_effect(   object,   conditional = FALSE,   output_scale = NULL,   probs = c(0.025, 0.975),   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/adjusted_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute adjusted effect size — adjusted_effect","text":"object fitted RoBMA object conditional show conditional estimates (assuming alternative true). Defaults FALSE. available type == \"ensemble\". output_scale transform  meta-analytic estimates different scale. Defaults NULL returns scale model estimated . probs quantiles posterior samples displayed. Defaults c(.025, .975) ... additional arguments","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/adjusted_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute adjusted effect size — adjusted_effect","text":"pooled_effect returns list tables class 'BayesTools_table'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/adjusted_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute adjusted effect size — adjusted_effect","text":"Non-default meta-regression specification (.e., using treatment contrasts predictors) might results intercept corresponding effect estimate baseline group. (.e., adjusting effect moderators). adjusted effect size function averages effect size estimate across moderators levels. Note Bayes factor test presence adjusted effect (summary function provides effect estimate baseline group test presence effect baseline group treatment contrasts specified). conditional estimate calculated conditional presence baseline group effect (.e., intercept).","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/Anderson2010.html","id":null,"dir":"Reference","previous_headings":"","what":"27 experimental studies from Anderson et al. (2010) that meet the best practice criteria — Anderson2010","title":"27 experimental studies from Anderson et al. (2010) that meet the best practice criteria — Anderson2010","text":"data set contains correlation coefficients, sample sizes, labels 27 experimental studies focusing effect violent video games aggressive behavior. full original data can found https://github.com/Joe-Hilgard/Anderson-meta.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Anderson2010.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"27 experimental studies from Anderson et al. (2010) that meet the best practice criteria — Anderson2010","text":"","code":"Anderson2010"},{"path":"https://https://fbartos.github.io/RoBMA/reference/Anderson2010.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"27 experimental studies from Anderson et al. (2010) that meet the best practice criteria — Anderson2010","text":"data.frame 3 columns 23 observations.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Anderson2010.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"27 experimental studies from Anderson et al. (2010) that meet the best practice criteria — Anderson2010","text":"data.frame.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Anderson2010.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"27 experimental studies from Anderson et al. (2010) that meet the best practice criteria — Anderson2010","text":"Anderson CA, Shibuya , Ihori N, Swing EL, Bushman BJ, Sakamoto , Rothstein HR, Saleem M (2010). “Violent video game effects aggression, empathy, prosocial behavior Eastern Western countries: meta-analytic review.” Psychological Bulletin, 136(2), 151–173. doi:10.1037/a0018251 .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Andrews2021.html","id":null,"dir":"Reference","previous_headings":"","what":"36 estimates of the effect of household chaos on child executive functions with the mean age and assessment type covariates from a meta-analysis by Andrews et al. (2021) — Andrews2021","title":"36 estimates of the effect of household chaos on child executive functions with the mean age and assessment type covariates from a meta-analysis by Andrews et al. (2021) — Andrews2021","text":"data set contains correlation coefficients r, standard errors se, executive functioning assessment type measure, mean age children study age. original data set assessed effect household chaos child executive functions (Andrews et al. 2021)  used example Bartoš et al. (2022) .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Andrews2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"36 estimates of the effect of household chaos on child executive functions with the mean age and assessment type covariates from a meta-analysis by Andrews et al. (2021) — Andrews2021","text":"","code":"Andrews2021"},{"path":"https://https://fbartos.github.io/RoBMA/reference/Andrews2021.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"36 estimates of the effect of household chaos on child executive functions with the mean age and assessment type covariates from a meta-analysis by Andrews et al. (2021) — Andrews2021","text":"data.frame 4 columns 36 observations.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Andrews2021.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"36 estimates of the effect of household chaos on child executive functions with the mean age and assessment type covariates from a meta-analysis by Andrews et al. (2021) — Andrews2021","text":"data.frame.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Andrews2021.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"36 estimates of the effect of household chaos on child executive functions with the mean age and assessment type covariates from a meta-analysis by Andrews et al. (2021) — Andrews2021","text":"Andrews K, Atkinson L, Harris M, Gonzalez (2021). “Examining effects household chaos child executive functions: meta-analysis.” Psychological Bulletin, 147(1), 16–32. doi:10.1037/bul0000311 . Bartoš F, Maier M, Quintana DS, Wagenmakers E (2022). “Adjusting publication bias JASP R — Selection models, PET-PEESE, robust Bayesian meta-analysis.” Advances Methods Practices Psychological Science, 5(3), 1–19. doi:10.1177/25152459221109259 .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Bem2011.html","id":null,"dir":"Reference","previous_headings":"","what":"9 experimental studies from Bem (2011) as described in Bem et al. (2011) — Bem2011","title":"9 experimental studies from Bem (2011) as described in Bem et al. (2011) — Bem2011","text":"data set contains Cohen's d effect sizes, standard errors, labels 9 experimental studies precognition infamous Bem (2011)  analyzed later meta-analysis (Bem et al. 2011) .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Bem2011.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"9 experimental studies from Bem (2011) as described in Bem et al. (2011) — Bem2011","text":"","code":"Bem2011"},{"path":"https://https://fbartos.github.io/RoBMA/reference/Bem2011.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"9 experimental studies from Bem (2011) as described in Bem et al. (2011) — Bem2011","text":"data.frame 3 columns 9 observations.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Bem2011.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"9 experimental studies from Bem (2011) as described in Bem et al. (2011) — Bem2011","text":"data.frame.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Bem2011.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"9 experimental studies from Bem (2011) as described in Bem et al. (2011) — Bem2011","text":"Bem DJ (2011). “Feeling future: Experimental evidence anomalous retroactive influences cognition affect.” Journal Personality Social Psychology, 100(3), 407–425. doi:10.1037/a0021524 . Bem DJ, Utts J, Johnson WO (2011). “Must psychologists change way analyze data?” Journal Personality Social Psychology, 101(4), 716–719. doi:10.1037/a0024777 .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Bayesian Model-Averaged Meta-Analysis of Binomial Data — BiBMA","title":"Estimate a Bayesian Model-Averaged Meta-Analysis of Binomial Data — BiBMA","text":"BiBMA estimate binomial-normal Bayesian model-averaged meta-analysis. interface allows complete customization ensemble different prior (list prior) distributions component.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Bayesian Model-Averaged Meta-Analysis of Binomial Data — BiBMA","text":"","code":"BiBMA(   x1,   x2,   n1,   n2,   study_names = NULL,   study_ids = NULL,   rescale_priors = 1,   priors_effect = set_default_binomial_priors(\"effect\", rescale = rescale_priors),   priors_heterogeneity = set_default_binomial_priors(\"heterogeneity\", rescale =     rescale_priors),   priors_effect_null = set_default_binomial_priors(\"effect\", null = TRUE),   priors_heterogeneity_null = set_default_binomial_priors(\"heterogeneity\", null = TRUE),   priors_hierarchical = set_default_binomial_priors(\"hierarchical\"),   priors_hierarchical_null = set_default_binomial_priors(\"hierarchical\", null = TRUE),   priors_baseline = set_default_binomial_priors(\"baseline\"),   priors_baseline_null = set_default_binomial_priors(\"baseline\", null = TRUE),   chains = 3,   sample = 5000,   burnin = 2000,   adapt = 500,   thin = 1,   parallel = FALSE,   autofit = TRUE,   autofit_control = set_autofit_control(),   convergence_checks = set_convergence_checks(),   algorithm = \"bridge\",   save = \"all\",   seed = NULL,   silent = TRUE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Bayesian Model-Averaged Meta-Analysis of Binomial Data — BiBMA","text":"x1 vector number successes first group x2 vector number successes second group n1 vector number observations first group n2 vector number observations second group study_names optional argument names studies study_ids optional argument specifying dependency studies (using multilevel model). Defaults NULL studies independent. rescale_priors re-scaling factor prior distributions. re-scaling factor allows adjust width default priors simultaneously. Defaults 1. priors_effect list prior distributions effect size (mu) parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"student\",   parameters = list(location = 0, scale = 0.58, df = 4)), based logOR meta-analytic estimates Cochrane Database Systematic Reviews (Bartoš et al. 2023) . priors_heterogeneity list prior distributions heterogeneity tau parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"invgamma\",  parameters = list(shape = 1.77, scale = 0.55)) based heterogeneities logOR estimates Cochrane Database Systematic Reviews (Bartoš et al. 2023) . priors_effect_null list prior distributions effect size (mu) parameter treated belonging null hypothesis. Defaults point null hypotheses zero, prior(distribution = \"point\", parameters = list(location = 0)). priors_heterogeneity_null list prior distributions heterogeneity tau parameter treated belonging null hypothesis. Defaults point null hypotheses zero (fixed effect meta-analytic models), prior(distribution = \"point\", parameters = list(location = 0)). priors_hierarchical list prior distributions correlation random effects (rho) parameter treated belonging alternative hypothesis. setting allows users fit hierarchical (three-level) meta-analysis study_ids supplied. Note experimental feature see News details. Defaults beta distribution prior(distribution = \"beta\", parameters = list(alpha = 1, beta = 1)). priors_hierarchical_null list prior distributions correlation random effects (rho) parameter treated belonging null hypothesis. Defaults NULL. priors_baseline prior distributions alternative hypothesis intercepts (pi) study. Defaults NULL. priors_baseline_null prior distributions null hypothesis intercepts (pi) study. Defaults independent uniform prior distribution intercept prior(\"beta\", parameters = list(alpha = 1, beta = 1), contrast = \"independent\"). chains number chains MCMC algorithm. sample number sampling iterations MCMC algorithm. Defaults 5000. burnin number burnin iterations MCMC algorithm. Defaults 2000. adapt number adaptation iterations MCMC algorithm. Defaults 500. thin thinning chains MCMC algorithm. Defaults 1. parallel whether individual models fitted parallel. Defaults FALSE. implementation completely stable might cause connection error. autofit whether model fitted convergence criteria (specified autofit_control) satisfied. Defaults TRUE. autofit_control allows pass autofit control settings set_autofit_control() function. See ?set_autofit_control options default settings. convergence_checks automatic convergence checks assess fitted models, passed set_convergence_checks() function. See ?set_convergence_checks options default settings. algorithm string specifying algorithm used model averaging. Defaults \"bridge\" results estimating individual models using JAGS computing marginal likelihood using bridge sampling. alternative \"ss\" uses spike slab like parameterization approximate Bayesian model averaging single model. Note significantly sample, burnin, adapt iterations needed \"ss\" algorithm. save whether models posterior distributions kept obtaining model-averaged result. Defaults \"\" remove anything. Set \"min\" significantly reduce size final object, however, model diagnostics manipulation object possible. seed seed set model fitting, marginal likelihood computation, posterior mixing reproducibility results. Defaults NULL - seed set. silent whether print messages regarding fitting process suppressed. Defaults TRUE. Note parallel = TRUE also suppresses messages. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a Bayesian Model-Averaged Meta-Analysis of Binomial Data — BiBMA","text":"NoBMA returns object class 'RoBMA'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a Bayesian Model-Averaged Meta-Analysis of Binomial Data — BiBMA","text":"BiBMA() function estimates binomial-normal Bayesian model-averaged meta-analysis described Bartoš et al. (2023) . See vignette(\"MedicineBiBMA\", package = \"RoBMA\") vignette reproduction Oduwole et al. (2018)  example. Also RoBMA() additional details. Generic summary.RoBMA(), print.RoBMA(), plot.RoBMA() functions provided facilitate manipulation ensemble. visual check individual model diagnostics can obtained using diagnostics() function. fitted model can updated modified update.RoBMA() function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a Bayesian Model-Averaged Meta-Analysis of Binomial Data — BiBMA","text":"Bartoš F, Otte WM, Gronau QF, Timmers B, Ly , Wagenmakers E (2023). “Empirical prior distributions Bayesian meta-analyses binary time--event outcomes.” doi:10.48550/arXiv.2306.11468 , Preprint available https://doi.org/10.48550/arXiv.2306.11468. Oduwole O, Udoh EE, Oyo-Ita , Meremikwu MM (2018). “Honey acute cough children.” Cochrane Database Systematic Reviews. doi:10.1002/14651858.CD007094.pub5 .","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a Bayesian Model-Averaged Meta-Analysis of Binomial Data — BiBMA","text":"","code":"if (FALSE) { # \\dontrun{ # using the example data from Oduwole (2018) and reproducing the example from # Bartos et al. (2023) with domain specific informed prior distributions  fit <- BiBMA(   x1          = c(5, 2),   x2          = c(0, 0),   n1          = c(35, 40),   n2          = c(39, 40),   priors_effect        = prior_informed(       \"Acute Respiratory Infections\",       type = \"logOR\", parameter = \"effect\"),   priors_heterogeneity = prior_informed(       \"Acute Respiratory Infections\",       type = \"logOR\", parameter = \"heterogeneity\")  )   summary(fit)   # produce summary on OR scale  summary(fit, output_scale = \"OR\")  } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — BiBMA.reg","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — BiBMA.reg","text":"RoBMA used estimate robust Bayesian meta-regression. interface allows complete customization ensemble different prior (list prior) distributions component.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — BiBMA.reg","text":"","code":"BiBMA.reg(   formula,   data,   test_predictors = TRUE,   study_names = NULL,   study_ids = NULL,   standardize_predictors = TRUE,   priors = NULL,   rescale_priors = 1,   priors_effect = set_default_binomial_priors(\"effect\", rescale = rescale_priors),   priors_heterogeneity = set_default_binomial_priors(\"heterogeneity\", rescale =     rescale_priors),   priors_effect_null = set_default_binomial_priors(\"effect\", null = TRUE),   priors_heterogeneity_null = set_default_binomial_priors(\"heterogeneity\", null = TRUE),   prior_covariates = set_default_binomial_priors(\"covariates\", rescale = rescale_priors),   prior_covariates_null = set_default_binomial_priors(\"covariates\", null = TRUE),   prior_factors = set_default_binomial_priors(\"factors\", rescale = rescale_priors),   prior_factors_null = set_default_binomial_priors(\"factors\", null = TRUE),   priors_hierarchical = set_default_binomial_priors(\"hierarchical\"),   priors_hierarchical_null = set_default_binomial_priors(\"hierarchical\", null = TRUE),   priors_baseline = set_default_binomial_priors(\"baseline\"),   priors_baseline_null = set_default_binomial_priors(\"baseline\", null = TRUE),   algorithm = \"bridge\",   chains = 3,   sample = 5000,   burnin = 2000,   adapt = 500,   thin = 1,   parallel = FALSE,   autofit = TRUE,   autofit_control = set_autofit_control(),   convergence_checks = set_convergence_checks(),   save = \"all\",   seed = NULL,   silent = TRUE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — BiBMA.reg","text":"formula formula meta-regression model data data.frame containing data meta-regression. Note column names correspond effect sizes (d, logOR, , r, z), measure sampling variability (se, v, n, lCI, uCI, t), predictors. See combine_data() complete list reserved names additional information specifying input data. test_predictors vector predictor names test presence moderation (.e., assigned null alternative prior distributions). Defaults TRUE, predictors tested using default prior distributions (.e., prior_covariates, prior_covariates_null, prior_factors, prior_factors_null). estimate adjust effect predictors use FALSE. priors specified, settings test_predictors overridden. study_names optional argument names studies study_ids optional argument specifying dependency studies (using multilevel model). Defaults NULL studies independent. standardize_predictors whether continuous predictors standardized prior estimating model. Defaults TRUE. Continuous predictor standardization important applying default prior distributions continuous predictors. Note resulting output corresponds standardized meta-regression coefficients. priors named list prior distributions predictor (names corresponding predictors). allows users specify null alternative hypothesis prior distributions predictor assigning corresponding element named list another named list (\"null\" \"alt\"). one prior specified given parameter, assumed correspond alternative hypotheses default null hypothesis specified (.e., prior_covariates_null prior_factors_null). named list one named prior distribution provided (either \"null\" \"alt\"), prior distribution used default distribution filled . Parameters without specified prior distributions assumed adjusted using default alternative hypothesis prior distributions (.e., prior_covariates prior_factors). priors specified, test_predictors ignored. rescale_priors re-scaling factor prior distributions. re-scaling factor allows adjust width default priors simultaneously. Defaults 1. priors_effect list prior distributions effect size (mu) parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"student\",   parameters = list(location = 0, scale = 0.58, df = 4)), based logOR meta-analytic estimates Cochrane Database Systematic Reviews (Bartoš et al. 2023) . priors_heterogeneity list prior distributions heterogeneity tau parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"invgamma\",  parameters = list(shape = 1.77, scale = 0.55)) based heterogeneities logOR estimates Cochrane Database Systematic Reviews (Bartoš et al. 2023) . priors_effect_null list prior distributions effect size (mu) parameter treated belonging null hypothesis. Defaults point null hypotheses zero, prior(distribution = \"point\", parameters = list(location = 0)). priors_heterogeneity_null list prior distributions heterogeneity tau parameter treated belonging null hypothesis. Defaults point null hypotheses zero (fixed effect meta-analytic models), prior(distribution = \"point\", parameters = list(location = 0)). prior_covariates prior distributions regression parameter continuous covariates effect size alternative hypothesis (unless set explicitly priors). Defaults relatively wide normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 0.25)). prior_covariates_null prior distributions regression parameter continuous covariates effect size null hypothesis (unless set explicitly priors). Defaults effect prior(\"spike\",  parameters = list(location = 0)). prior_factors prior distributions regression parameter categorical covariates effect size alternative hypothesis (unless set explicitly priors). Defaults relatively wide multivariate normal distribution specifying differences mean contrasts prior_factor(\"mnormal\", parameters = list(mean = 0, sd = 0.25), contrast = \"meandif\"). prior_factors_null prior distributions regression parameter categorical covariates effect size null hypothesis (unless set explicitly priors). Defaults effect prior(\"spike\",  parameters = list(location = 0)). priors_hierarchical list prior distributions correlation random effects (rho) parameter treated belonging alternative hypothesis. setting allows users fit hierarchical (three-level) meta-analysis study_ids supplied. Note experimental feature see News details. Defaults beta distribution prior(distribution = \"beta\", parameters = list(alpha = 1, beta = 1)). priors_hierarchical_null list prior distributions correlation random effects (rho) parameter treated belonging null hypothesis. Defaults NULL. priors_baseline prior distributions alternative hypothesis intercepts (pi) study. Defaults NULL. priors_baseline_null prior distributions null hypothesis intercepts (pi) study. Defaults independent uniform prior distribution intercept prior(\"beta\", parameters = list(alpha = 1, beta = 1), contrast = \"independent\"). algorithm string specifying algorithm used model averaging. Defaults \"bridge\" results estimating individual models using JAGS computing marginal likelihood using bridge sampling. alternative \"ss\" uses spike slab like parameterization approximate Bayesian model averaging single model. Note significantly sample, burnin, adapt iterations needed \"ss\" algorithm. chains number chains MCMC algorithm. sample number sampling iterations MCMC algorithm. Defaults 5000. burnin number burnin iterations MCMC algorithm. Defaults 2000. adapt number adaptation iterations MCMC algorithm. Defaults 500. thin thinning chains MCMC algorithm. Defaults 1. parallel whether individual models fitted parallel. Defaults FALSE. implementation completely stable might cause connection error. autofit whether model fitted convergence criteria (specified autofit_control) satisfied. Defaults TRUE. autofit_control allows pass autofit control settings set_autofit_control() function. See ?set_autofit_control options default settings. convergence_checks automatic convergence checks assess fitted models, passed set_convergence_checks() function. See ?set_convergence_checks options default settings. save whether models posterior distributions kept obtaining model-averaged result. Defaults \"\" remove anything. Set \"min\" significantly reduce size final object, however, model diagnostics manipulation object possible. seed seed set model fitting, marginal likelihood computation, posterior mixing reproducibility results. Defaults NULL - seed set. silent whether print messages regarding fitting process suppressed. Defaults TRUE. Note parallel = TRUE also suppresses messages. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — BiBMA.reg","text":"RoBMA.reg returns object class 'RoBMA.reg'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — BiBMA.reg","text":"BiBMA.reg() function estimates Bayesian model-averaged binomial meta-regression. See vignette(\"/MetaRegression\", package = \"RoBMA\") vignette describes use similar RoBMA.reg() function fit Bayesian meta-regression ensembles. See Bartoš et al. (2025)  details methodology BiBMA() details function options. default, function standardizes continuous predictors. , output interpreted standardized meta-regression coefficients. Generic summary.RoBMA(), print.RoBMA(), plot.RoBMA() functions provided facilitate manipulation ensemble. visual check individual model diagnostics can obtained using diagnostics() function. fitted model can updated modified update.RoBMA() function. Estimated marginal means can computed marginal_summary() function visualized marginal_plot() function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/BiBMA.reg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — BiBMA.reg","text":"Bartoš F, Maier M, Stanley TD, Wagenmakers E (2025). “Robust Bayesian meta-regression: Model-averaged moderation analysis presence publication bias.” Psychological Methods. doi:10.1037/met0000737 . Bartoš F, Otte WM, Gronau QF, Timmers B, Ly , Wagenmakers E (2023). “Empirical prior distributions Bayesian meta-analyses binary time--event outcomes.” doi:10.48550/arXiv.2306.11468 , Preprint available https://doi.org/10.48550/arXiv.2306.11468.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_RoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Check fitted RoBMA object for errors and warnings — check_RoBMA","title":"Check fitted RoBMA object for errors and warnings — check_RoBMA","text":"Checks fitted RoBMA object warnings errors prints console.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_RoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check fitted RoBMA object for errors and warnings — check_RoBMA","text":"","code":"check_RoBMA(fit)  check_RoBMA_convergence(fit)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_RoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check fitted RoBMA object for errors and warnings — check_RoBMA","text":"fit fitted RoBMA object.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_RoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check fitted RoBMA object for errors and warnings — check_RoBMA","text":"check_RoBMA returns vector error warning messages. check_RoBMA_convergence returns logical vector indicating whether models converged.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.BiBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints summary of ","title":"Prints summary of ","text":"check_setup prints summary \"RoBMA.reg\" ensemble implied specified prior distributions. useful checking ensemble configuration prior fitting models.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.BiBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints summary of ","text":"","code":"check_setup.BiBMA(   priors_effect = prior(distribution = \"student\", parameters = list(location = 0, scale =     0.58, df = 4)),   priors_heterogeneity = prior(distribution = \"invgamma\", parameters = list(shape = 1.77,     scale = 0.55)),   priors_effect_null = prior(distribution = \"point\", parameters = list(location = 0)),   priors_heterogeneity_null = prior(distribution = \"point\", parameters = list(location =     0)),   priors_baseline = NULL,   priors_baseline_null = prior_factor(\"beta\", parameters = list(alpha = 1, beta = 1),     contrast = \"independent\"),   models = FALSE,   silent = FALSE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.BiBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints summary of ","text":"priors_effect list prior distributions effect size (mu) parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"student\",   parameters = list(location = 0, scale = 0.58, df = 4)), based logOR meta-analytic estimates Cochrane Database Systematic Reviews (Bartoš et al. 2023) . priors_heterogeneity list prior distributions heterogeneity tau parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"invgamma\",  parameters = list(shape = 1.77, scale = 0.55)) based heterogeneities logOR estimates Cochrane Database Systematic Reviews (Bartoš et al. 2023) . priors_effect_null list prior distributions effect size (mu) parameter treated belonging null hypothesis. Defaults point null hypotheses zero, prior(distribution = \"point\", parameters = list(location = 0)). priors_heterogeneity_null list prior distributions heterogeneity tau parameter treated belonging null hypothesis. Defaults point null hypotheses zero (fixed effect meta-analytic models), prior(distribution = \"point\", parameters = list(location = 0)). priors_baseline prior distributions alternative hypothesis intercepts (pi) study. Defaults NULL. priors_baseline_null prior distributions null hypothesis intercepts (pi) study. Defaults independent uniform prior distribution intercept prior(\"beta\", parameters = list(alpha = 1, beta = 1), contrast = \"independent\"). models models' details printed. silent whether print messages regarding fitting process suppressed. Defaults TRUE. Note parallel = TRUE also suppresses messages. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.BiBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints summary of ","text":"check_setup.reg invisibly returns list summary tables.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints summary of ","title":"Prints summary of ","text":"check_setup prints summary \"RoBMA\" ensemble implied specified prior distributions. useful checking ensemble configuration prior fitting models.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints summary of ","text":"","code":"check_setup(   model_type = NULL,   priors_effect = prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)),   priors_heterogeneity = prior(distribution = \"invgamma\", parameters = list(shape = 1,     scale = 0.15)),   priors_bias = list(prior_weightfunction(distribution = \"two.sided\", parameters =     list(alpha = c(1, 1), steps = c(0.05)), prior_weights = 1/12),     prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.1)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1), steps = c(0.05)), prior_weights =     1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha =     c(1, 1, 1), steps = c(0.025, 0.05)), prior_weights = 1/12),           prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.5)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1, 1, 1), steps = c(0.025, 0.05, 0.5)),     prior_weights = 1/12), prior_PET(distribution = \"Cauchy\", parameters = list(0, 1),     truncation = list(0, Inf), prior_weights = 1/4), prior_PEESE(distribution = \"Cauchy\",     parameters = list(0, 5), truncation = list(0, Inf), prior_weights = 1/4)),   priors_effect_null = prior(distribution = \"point\", parameters = list(location = 0)),   priors_heterogeneity_null = prior(distribution = \"point\", parameters = list(location =     0)),   priors_bias_null = prior_none(),   priors_hierarchical = prior(\"beta\", parameters = list(alpha = 1, beta = 1)),   priors_hierarchical_null = NULL,   models = FALSE,   silent = FALSE )  check_setup.RoBMA(   model_type = NULL,   priors_effect = prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)),   priors_heterogeneity = prior(distribution = \"invgamma\", parameters = list(shape = 1,     scale = 0.15)),   priors_bias = list(prior_weightfunction(distribution = \"two.sided\", parameters =     list(alpha = c(1, 1), steps = c(0.05)), prior_weights = 1/12),     prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.1)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1), steps = c(0.05)), prior_weights =     1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha =     c(1, 1, 1), steps = c(0.025, 0.05)), prior_weights = 1/12),           prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.5)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1, 1, 1), steps = c(0.025, 0.05, 0.5)),     prior_weights = 1/12), prior_PET(distribution = \"Cauchy\", parameters = list(0, 1),     truncation = list(0, Inf), prior_weights = 1/4), prior_PEESE(distribution = \"Cauchy\",     parameters = list(0, 5), truncation = list(0, Inf), prior_weights = 1/4)),   priors_effect_null = prior(distribution = \"point\", parameters = list(location = 0)),   priors_heterogeneity_null = prior(distribution = \"point\", parameters = list(location =     0)),   priors_bias_null = prior_none(),   priors_hierarchical = prior(\"beta\", parameters = list(alpha = 1, beta = 1)),   priors_hierarchical_null = NULL,   models = FALSE,   silent = FALSE )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints summary of ","text":"model_type string specifying RoBMA ensemble. Defaults NULL. options \"PSMA\", \"PP\", \"2w\" override settings passed priors_effect, priors_heterogeneity, priors_effect, priors_effect_null, priors_heterogeneity_null, priors_bias_null, priors_effect. See details information different model types. priors_effect list prior distributions effect size (mu) parameter treated belonging alternative hypothesis. Defaults standard normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)). priors_heterogeneity list prior distributions heterogeneity tau parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"invgamma\", parameters = list(shape = 1, scale = .15)) based heterogeneities estimates psychology (van Erp et al. 2017) . priors_bias list prior distributions publication bias adjustment component treated belonging alternative hypothesis. Defaults list( prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1),     steps = c(0.05)),             prior_weights = 1/12), prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1, 1),     steps = c(0.05, 0.10)),       prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1),      steps = c(0.05)),             prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1),      steps = c(0.025, 0.05)),      prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1),      steps = c(0.05, 0.5)),        prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1, 1),      steps = c(0.025, 0.05, 0.5)), prior_weights = 1/12), prior_PET(distribution   = \"Cauchy\", parameters = list(0,1), truncation = list(0, Inf),      prior_weights = 1/4), prior_PEESE(distribution = \"Cauchy\", parameters = list(0,5), truncation = list(0, Inf),      prior_weights = 1/4) ), corresponding RoBMA-PSMA model introduce Bartoš et al. (2023) . priors_effect_null list prior distributions effect size (mu) parameter treated belonging null hypothesis. Defaults point null hypotheses zero, prior(distribution = \"point\", parameters = list(location = 0)). priors_heterogeneity_null list prior distributions heterogeneity tau parameter treated belonging null hypothesis. Defaults point null hypotheses zero (fixed effect meta-analytic models), prior(distribution = \"point\", parameters = list(location = 0)). priors_bias_null list prior weight functions omega parameter treated belonging null hypothesis. Defaults publication bias adjustment, prior_none(). priors_hierarchical list prior distributions correlation random effects (rho) parameter treated belonging alternative hypothesis. setting allows users fit hierarchical (three-level) meta-analysis study_ids supplied. Note experimental feature see News details. Defaults beta distribution prior(distribution = \"beta\", parameters = list(alpha = 1, beta = 1)). priors_hierarchical_null list prior distributions correlation random effects (rho) parameter treated belonging null hypothesis. Defaults NULL. models models' details printed. silent print results.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints summary of ","text":"check_setup invisibly returns list summary tables.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints summary of ","title":"Prints summary of ","text":"check_setup prints summary \"RoBMA.reg\" ensemble implied specified prior distributions. useful checking ensemble configuration prior fitting models. check_setup prints summary \"RoBMA.reg\" ensemble implied specified prior distributions. useful checking ensemble configuration prior fitting models.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints summary of ","text":"","code":"check_setup.reg(   formula,   data,   test_predictors = TRUE,   study_names = NULL,   study_ids = NULL,   transformation = if (any(colnames(data) != \"y\")) \"fishers_z\" else \"none\",   prior_scale = if (any(colnames(data) != \"y\")) \"cohens_d\" else \"none\",   standardize_predictors = TRUE,   effect_direction = \"positive\",   priors = NULL,   model_type = NULL,   priors_effect = prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)),   priors_heterogeneity = prior(distribution = \"invgamma\", parameters = list(shape = 1,     scale = 0.15)),   priors_bias = list(prior_weightfunction(distribution = \"two.sided\", parameters =     list(alpha = c(1, 1), steps = c(0.05)), prior_weights = 1/12),     prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.1)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1), steps = c(0.05)), prior_weights =     1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha =     c(1, 1, 1), steps = c(0.025, 0.05)), prior_weights = 1/12),           prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.5)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1, 1, 1), steps = c(0.025, 0.05, 0.5)),     prior_weights = 1/12), prior_PET(distribution = \"Cauchy\", parameters = list(0, 1),     truncation = list(0, Inf), prior_weights = 1/4), prior_PEESE(distribution = \"Cauchy\",     parameters = list(0, 5), truncation = list(0, Inf), prior_weights = 1/4)),   priors_effect_null = prior(distribution = \"point\", parameters = list(location = 0)),   priors_heterogeneity_null = prior(distribution = \"point\", parameters = list(location =     0)),   priors_bias_null = prior_none(),   priors_hierarchical = prior(\"beta\", parameters = list(alpha = 1, beta = 1)),   priors_hierarchical_null = NULL,   prior_covariates = prior(\"normal\", parameters = list(mean = 0, sd = 0.25)),   prior_covariates_null = prior(\"spike\", parameters = list(location = 0)),   prior_factors = prior_factor(\"mnormal\", parameters = list(mean = 0, sd = 0.25),     contrast = \"meandif\"),   prior_factors_null = prior(\"spike\", parameters = list(location = 0)),   models = FALSE,   silent = FALSE,   ... )  check_setup.RoBMA.reg(   formula,   data,   test_predictors = TRUE,   study_names = NULL,   study_ids = NULL,   transformation = if (any(colnames(data) != \"y\")) \"fishers_z\" else \"none\",   prior_scale = if (any(colnames(data) != \"y\")) \"cohens_d\" else \"none\",   standardize_predictors = TRUE,   effect_direction = \"positive\",   priors = NULL,   model_type = NULL,   priors_effect = prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)),   priors_heterogeneity = prior(distribution = \"invgamma\", parameters = list(shape = 1,     scale = 0.15)),   priors_bias = list(prior_weightfunction(distribution = \"two.sided\", parameters =     list(alpha = c(1, 1), steps = c(0.05)), prior_weights = 1/12),     prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.1)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1), steps = c(0.05)), prior_weights =     1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha =     c(1, 1, 1), steps = c(0.025, 0.05)), prior_weights = 1/12),           prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.5)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1, 1, 1), steps = c(0.025, 0.05, 0.5)),     prior_weights = 1/12), prior_PET(distribution = \"Cauchy\", parameters = list(0, 1),     truncation = list(0, Inf), prior_weights = 1/4), prior_PEESE(distribution = \"Cauchy\",     parameters = list(0, 5), truncation = list(0, Inf), prior_weights = 1/4)),   priors_effect_null = prior(distribution = \"point\", parameters = list(location = 0)),   priors_heterogeneity_null = prior(distribution = \"point\", parameters = list(location =     0)),   priors_bias_null = prior_none(),   priors_hierarchical = prior(\"beta\", parameters = list(alpha = 1, beta = 1)),   priors_hierarchical_null = NULL,   prior_covariates = prior(\"normal\", parameters = list(mean = 0, sd = 0.25)),   prior_covariates_null = prior(\"spike\", parameters = list(location = 0)),   prior_factors = prior_factor(\"mnormal\", parameters = list(mean = 0, sd = 0.25),     contrast = \"meandif\"),   prior_factors_null = prior(\"spike\", parameters = list(location = 0)),   models = FALSE,   silent = FALSE,   ... )  check_setup.reg(   formula,   data,   test_predictors = TRUE,   study_names = NULL,   study_ids = NULL,   transformation = if (any(colnames(data) != \"y\")) \"fishers_z\" else \"none\",   prior_scale = if (any(colnames(data) != \"y\")) \"cohens_d\" else \"none\",   standardize_predictors = TRUE,   effect_direction = \"positive\",   priors = NULL,   model_type = NULL,   priors_effect = prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)),   priors_heterogeneity = prior(distribution = \"invgamma\", parameters = list(shape = 1,     scale = 0.15)),   priors_bias = list(prior_weightfunction(distribution = \"two.sided\", parameters =     list(alpha = c(1, 1), steps = c(0.05)), prior_weights = 1/12),     prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.1)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1), steps = c(0.05)), prior_weights =     1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha =     c(1, 1, 1), steps = c(0.025, 0.05)), prior_weights = 1/12),           prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1,     1), steps = c(0.05, 0.5)), prior_weights = 1/12), prior_weightfunction(distribution =     \"one.sided\", parameters = list(alpha = c(1, 1, 1, 1), steps = c(0.025, 0.05, 0.5)),     prior_weights = 1/12), prior_PET(distribution = \"Cauchy\", parameters = list(0, 1),     truncation = list(0, Inf), prior_weights = 1/4), prior_PEESE(distribution = \"Cauchy\",     parameters = list(0, 5), truncation = list(0, Inf), prior_weights = 1/4)),   priors_effect_null = prior(distribution = \"point\", parameters = list(location = 0)),   priors_heterogeneity_null = prior(distribution = \"point\", parameters = list(location =     0)),   priors_bias_null = prior_none(),   priors_hierarchical = prior(\"beta\", parameters = list(alpha = 1, beta = 1)),   priors_hierarchical_null = NULL,   prior_covariates = prior(\"normal\", parameters = list(mean = 0, sd = 0.25)),   prior_covariates_null = prior(\"spike\", parameters = list(location = 0)),   prior_factors = prior_factor(\"mnormal\", parameters = list(mean = 0, sd = 0.25),     contrast = \"meandif\"),   prior_factors_null = prior(\"spike\", parameters = list(location = 0)),   models = FALSE,   silent = FALSE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints summary of ","text":"formula formula meta-regression model data data.frame containing data meta-regression. Note column names correspond effect sizes (d, logOR, , r, z), measure sampling variability (se, v, n, lCI, uCI, t), predictors. See combine_data() complete list reserved names additional information specifying input data. test_predictors vector predictor names test presence moderation (.e., assigned null alternative prior distributions). Defaults TRUE, predictors tested using default prior distributions (.e., prior_covariates, prior_covariates_null, prior_factors, prior_factors_null). estimate adjust effect predictors use FALSE. priors specified, settings test_predictors overridden. study_names optional argument names studies study_ids optional argument specifying dependency studies (using multilevel model). Defaults NULL studies independent. transformation transformation applied supplied effect sizes fitting individual models. Defaults \"fishers_z\". highly recommend using \"fishers_z\" transformation since variance stabilizing measure bias PET PEESE style models. options \"cohens_d\", correlation coefficient \"r\" \"logOR\". Supplying \"none\" treat effect sizes unstandardized refrain transformations. prior_scale effect size scale used define priors. Defaults \"cohens_d\". options \"fishers_z\", correlation coefficient \"r\", \"logOR\". prior scale need match effect sizes measure - samples prior distributions internally transformed match transformation data. prior_scale corresponds effect size scale default output, can changed within summary function. standardize_predictors whether continuous predictors standardized prior estimating model. Defaults TRUE. Continuous predictor standardization important applying default prior distributions continuous predictors. Note resulting output corresponds standardized meta-regression coefficients. effect_direction expected direction effect. Correctly specifying expected direction effect crucial one-sided selection models, specify cut-offs using one-sided p-values. Defaults \"positive\" (another option \"negative\"). priors named list prior distributions predictor (names corresponding predictors). allows users specify null alternative hypothesis prior distributions predictor assigning corresponding element named list another named list (\"null\" \"alt\"). one prior specified given parameter, assumed correspond alternative hypotheses default null hypothesis specified (.e., prior_covariates_null prior_factors_null). named list one named prior distribution provided (either \"null\" \"alt\"), prior distribution used default distribution filled . Parameters without specified prior distributions assumed adjusted using default alternative hypothesis prior distributions (.e., prior_covariates prior_factors). priors specified, test_predictors ignored. model_type string specifying RoBMA ensemble. Defaults NULL. options \"PSMA\", \"PP\", \"2w\" override settings passed priors_effect, priors_heterogeneity, priors_effect, priors_effect_null, priors_heterogeneity_null, priors_bias_null, priors_effect. See details information different model types. priors_effect list prior distributions effect size (mu) parameter treated belonging alternative hypothesis. Defaults standard normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)). priors_heterogeneity list prior distributions heterogeneity tau parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"invgamma\", parameters = list(shape = 1, scale = .15)) based heterogeneities estimates psychology (van Erp et al. 2017) . priors_bias list prior distributions publication bias adjustment component treated belonging alternative hypothesis. Defaults list( prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1),     steps = c(0.05)),             prior_weights = 1/12), prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1, 1),     steps = c(0.05, 0.10)),       prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1),      steps = c(0.05)),             prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1),      steps = c(0.025, 0.05)),      prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1),      steps = c(0.05, 0.5)),        prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1, 1),      steps = c(0.025, 0.05, 0.5)), prior_weights = 1/12), prior_PET(distribution   = \"Cauchy\", parameters = list(0,1), truncation = list(0, Inf),      prior_weights = 1/4), prior_PEESE(distribution = \"Cauchy\", parameters = list(0,5), truncation = list(0, Inf),      prior_weights = 1/4) ), corresponding RoBMA-PSMA model introduce Bartoš et al. (2023) . priors_effect_null list prior distributions effect size (mu) parameter treated belonging null hypothesis. Defaults point null hypotheses zero, prior(distribution = \"point\", parameters = list(location = 0)). priors_heterogeneity_null list prior distributions heterogeneity tau parameter treated belonging null hypothesis. Defaults point null hypotheses zero (fixed effect meta-analytic models), prior(distribution = \"point\", parameters = list(location = 0)). priors_bias_null list prior weight functions omega parameter treated belonging null hypothesis. Defaults publication bias adjustment, prior_none(). priors_hierarchical list prior distributions correlation random effects (rho) parameter treated belonging alternative hypothesis. setting allows users fit hierarchical (three-level) meta-analysis study_ids supplied. Note experimental feature see News details. Defaults beta distribution prior(distribution = \"beta\", parameters = list(alpha = 1, beta = 1)). priors_hierarchical_null list prior distributions correlation random effects (rho) parameter treated belonging null hypothesis. Defaults NULL. prior_covariates prior distributions regression parameter continuous covariates effect size alternative hypothesis (unless set explicitly priors). Defaults relatively wide normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 0.25)). prior_covariates_null prior distributions regression parameter continuous covariates effect size null hypothesis (unless set explicitly priors). Defaults effect prior(\"spike\",  parameters = list(location = 0)). prior_factors prior distributions regression parameter categorical covariates effect size alternative hypothesis (unless set explicitly priors). Defaults relatively wide multivariate normal distribution specifying differences mean contrasts prior_factor(\"mnormal\", parameters = list(mean = 0, sd = 0.25), contrast = \"meandif\"). prior_factors_null prior distributions regression parameter categorical covariates effect size null hypothesis (unless set explicitly priors). Defaults effect prior(\"spike\",  parameters = list(location = 0)). models models' details printed. silent print results. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/check_setup.reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints summary of ","text":"check_setup.reg invisibly returns list summary tables. check_setup.reg invisibly returns list summary tables.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/combine_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Combines different effect sizes into a common metric — combine_data","title":"Combines different effect sizes into a common metric — combine_data","text":"combine_data combines different effect sizes common measure specified transformation. Either data.frame data columns named corresponding arguments vectors individual values can passed.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/combine_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combines different effect sizes into a common metric — combine_data","text":"","code":"combine_data(   d = NULL,   r = NULL,   z = NULL,   logOR = NULL,   OR = NULL,   t = NULL,   y = NULL,   se = NULL,   v = NULL,   n = NULL,   lCI = NULL,   uCI = NULL,   study_names = NULL,   study_ids = NULL,   weight = NULL,   data = NULL,   transformation = \"fishers_z\",   return_all = FALSE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/combine_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combines different effect sizes into a common metric — combine_data","text":"d vector effect sizes measured Cohen's d / Hedges' g (standardized mean differences) r vector effect sizes measured correlations z vector effect sizes measured Fisher's z logOR vector effect sizes measured log odds ratios vector effect sizes measured odds ratios t vector t/z-statistics y vector unspecified effect sizes (note effect size transformations unavailable type input) se vector standard errors effect sizes v vector variances effect sizes n vector overall sample sizes lCI vector lower bounds confidence intervals uCI vector upper bounds confidence intervals study_names optional argument names studies study_ids optional argument specifying dependency studies (using multilevel model). Defaults NULL studies independent. weight specifies likelihood weights individual estimates. Notes untested experimental feature. data data frame column names corresponding variable names used supply data individually transformation transformation applied supplied effect sizes fitting individual models. Defaults \"fishers_z\". highly recommend using \"fishers_z\" transformation since variance stabilizing measure bias PET PEESE style models. options \"cohens_d\", correlation coefficient \"r\" \"logOR\". Supplying \"none\" treat effect sizes unstandardized refrain transformations. return_all whether data frame containing filled values returned. Defaults FALSE ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/combine_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combines different effect sizes into a common metric — combine_data","text":"combine_data returns data.frame.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/combine_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combines different effect sizes into a common metric — combine_data","text":"aim function combine different, already calculated, effect size measures. order obtain effect size measures raw values, e.g, mean differences, standard deviations, sample sizes, use escalc function. function checks input values transforming input common effect size measure following fashion: obtains missing standard errors squaring variances obtains missing standard errors confidence intervals (transformation Fisher's z scale d r). obtains missing sample sizes (standard errors logOR) t-statistics effect sizes obtains missing standard errors sample sizes effect sizes obtains missing sample sizes standard errors effect sizes obtains missing t-statistics sample sizes effect sizes (standard errors effect sizes logOR) changes effect sizes direction positive transforms effect sizes common effect size transforms standard errors common metric transforms NULL unstandardized effect size y supplied, steps 4-9 skipped.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/contr.BayesTools.html","id":null,"dir":"Reference","previous_headings":"","what":"BayesTools Contrast Matrices — contr.BayesTools","title":"BayesTools Contrast Matrices — contr.BayesTools","text":"BayesTools provides several contrast matrix functions Bayesian factor analysis. functions create different types contrast matrices can used factor variables Bayesian models.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/contr.BayesTools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BayesTools Contrast Matrices — contr.BayesTools","text":"","code":"contr.orthonormal(n, contrasts = TRUE)  contr.meandif(n, contrasts = TRUE)  contr.independent(n, contrasts = TRUE)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/contr.BayesTools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BayesTools Contrast Matrices — contr.BayesTools","text":"n vector levels factor, number levels contrasts logical indicating whether contrasts computed","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/contr.BayesTools.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BayesTools Contrast Matrices — contr.BayesTools","text":"package includes following contrast functions: contr.orthonormal Return matrix orthonormal contrasts. Code based stanova::contr.bayes corresponding description Rouder et al. (2012) . Returns matrix n rows k columns, k = n - 1 contrasts = TRUE k = n contrasts = FALSE. contr.meandif Return matrix mean difference contrasts. adjustment contr.orthonormal ascertains prior distributions difference gran mean factor level identical independent number factor levels (hold orthonormal contrast). Furthermore, contrast re-scaled specified prior distribution exactly corresponds prior distribution difference factor level grand mean – approximately twice scale contr.orthonormal. Returns matrix n rows k columns, k = n - 1 contrasts = TRUE k = n contrasts = FALSE. contr.independent Return matrix independent contrasts – level term. Returns matrix n rows k columns, k = n contrasts = TRUE k = n contrasts = FALSE.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/contr.BayesTools.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BayesTools Contrast Matrices — contr.BayesTools","text":"Rouder JN, Morey RD, Speckman PL, Province JM (2012). “Default Bayes factors ANOVA designs.” Journal Mathematical Psychology, 56(5), 356–374. doi:10.1016/j.jmp.2012.08.001 .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/contr.BayesTools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BayesTools Contrast Matrices — contr.BayesTools","text":"","code":"# Orthonormal contrasts contr.orthonormal(c(1, 2)) #>            [,1] #> [1,] -0.7071068 #> [2,]  0.7071068 contr.orthonormal(c(1, 2, 3)) #>            [,1]       [,2] #> [1,]  0.0000000  0.8164966 #> [2,] -0.7071068 -0.4082483 #> [3,]  0.7071068 -0.4082483  # Mean difference contrasts contr.meandif(c(1, 2)) #>      [,1] #> [1,]   -1 #> [2,]    1 contr.meandif(c(1, 2, 3)) #>            [,1] [,2] #> [1,]  0.0000000  1.0 #> [2,] -0.8660254 -0.5 #> [3,]  0.8660254 -0.5  # Independent contrasts contr.independent(c(1, 2)) #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 contr.independent(c(1, 2, 3)) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1"},{"path":"https://https://fbartos.github.io/RoBMA/reference/diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks a fitted RoBMA object — diagnostics","title":"Checks a fitted RoBMA object — diagnostics","text":"diagnostics creates visual checks individual models convergence. Numerical overview individual models can obtained summary(object, type = \"models\", diagnostics = TRUE), even detailed information summary(object, type = \"individual\").","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks a fitted RoBMA object — diagnostics","text":"","code":"diagnostics(   fit,   parameter,   type,   plot_type = \"base\",   show_models = NULL,   lags = 30,   title = is.null(show_models) | length(show_models) > 1,   ... )  diagnostics_autocorrelation(   fit,   parameter = NULL,   plot_type = \"base\",   show_models = NULL,   lags = 30,   title = is.null(show_models) | length(show_models) > 1,   ... )  diagnostics_trace(   fit,   parameter = NULL,   plot_type = \"base\",   show_models = NULL,   title = is.null(show_models) | length(show_models) > 1,   ... )  diagnostics_density(   fit,   parameter = NULL,   plot_type = \"base\",   show_models = NULL,   title = is.null(show_models) | length(show_models) > 1,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks a fitted RoBMA object — diagnostics","text":"fit fitted RoBMA object parameter parameter plotted. Either \"mu\", \"tau\", \"omega\", \"PET\", \"PEESE\". type type MCMC diagnostic plotted. Options \"chains\" chains' trace plots, \"autocorrelation\" autocorrelation chains, \"densities\" overlaying densities individual chains. Can abbreviated first letters. plot_type whether use base plot \"base\" ggplot2 \"ggplot\" plotting. Defaults \"base\". show_models MCMC diagnostics models plotted. Defaults NULL plots MCMC diagnostics specified parameter every model part ensemble. lags number lags shown type = \"autocorrelation\". Defaults 30. title whether model number displayed title. Defaults TRUE one model selected. ... additional arguments passed par plot_type = \"base\".","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks a fitted RoBMA object — diagnostics","text":"diagnostics returns either NULL plot_type = \"base\" object/list objects (depending number parameters plotted) class 'ggplot2' plot_type = \"ggplot2\".","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/diagnostics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks a fitted RoBMA object — diagnostics","text":"visualization functions based stan_plot function color schemes.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks a fitted RoBMA object — diagnostics","text":"","code":"if (FALSE) { # \\dontrun{ # using the example data from Anderson et al. 2010 and fitting the default model # (note that the model can take a while to fit) fit <- RoBMA(r = Anderson2010$r, n = Anderson2010$n, study_names = Anderson2010$labels)  ### ggplot2 version of all of the plots can be obtained by adding 'model_type = \"ggplot\" # diagnostics function allows to visualize diagnostics of a fitted RoBMA object, for example, # the trace plot for the mean parameter in each model model diagnostics(fit, parameter = \"mu\", type = \"chain\")  # in order to show the trace plot only for the 11th model, add show_models parameter diagnostics(fit, parameter = \"mu\", type = \"chain\", show_models = 11)  # furthermore, the autocorrelations diagnostics(fit, parameter = \"mu\", type = \"autocorrelation\")  # and overlying densities for each plot can also be visualize diagnostics(fit, parameter = \"mu\", type = \"densities\") } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/effect_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Effect size transformations — effect_sizes","title":"Effect size transformations — effect_sizes","text":"Functions transforming different effect size measures.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/effect_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effect size transformations — effect_sizes","text":"","code":"d2r(d)  d2z(d)  d2logOR(d)  d2OR(d)  r2d(r)  r2z(r)  r2logOR(r)  r2OR(r)  z2r(z)  z2d(z)  z2logOR(z)  z2OR(z)  logOR2r(logOR)  logOR2z(logOR)  logOR2d(logOR)  logOR2OR(logOR)  OR2r(OR)  OR2z(OR)  OR2logOR(OR)  OR2d(OR)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/effect_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Effect size transformations — effect_sizes","text":"d Cohen's d. r correlation coefficient. z Fisher's z. logOR log(odds ratios). offs ratios.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/effect_sizes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Effect size transformations — effect_sizes","text":"transformations based (Borenstein et al. 2011) . case direct transformation available, transformations chained provide effect size interest.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/effect_sizes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Effect size transformations — effect_sizes","text":"Borenstein M, Hedges LV, Higgins JP, Rothstein HR (2011). Introduction meta-analysis. John Wiley & Sons.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/extract_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Posterior Samples from a RoBMA Model — extract_posterior","title":"Extract Posterior Samples from a RoBMA Model — extract_posterior","text":"Extracts posterior samples specified parameter RoBMA model object.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/extract_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Posterior Samples from a RoBMA Model — extract_posterior","text":"","code":"extract_posterior(   x,   parameter = \"mu\",   conditional = FALSE,   output_scale = NULL,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/extract_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Posterior Samples from a RoBMA Model — extract_posterior","text":"x fitted RoBMA object parameter parameter posterior samples extracted. Defaults \"mu\" (effect size). additional options  \"tau\" (heterogeneity), \"weightfunction\" (estimated weightfunction), \"PET\" \"PEESE\" (PET-PEESE coefficients). conditional whether conditional estimates extracted. Defaults FALSE extracts model-averaged estimates. Note \"weightfunction\" \"PET-PEESE\" always ignoring type publication bias adjustment. output_scale transform effect sizes meta-analytic effect size estimate different scale. Defaults NULL returns scale model estimated . ... additional arguments passed method.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/extract_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Posterior Samples from a RoBMA Model — extract_posterior","text":"matrix containing posterior samples specified parameter.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/extract_posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Posterior Samples from a RoBMA Model — extract_posterior","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming 'fit' is a fitted RoBMA model: posterior_mu <- extract_posterior(fit, parameter = \"mu\") } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/forest.html","id":null,"dir":"Reference","previous_headings":"","what":"Forest plot for a RoBMA object — forest","title":"Forest plot for a RoBMA object — forest","text":"forest creates forest plot \"RoBMA\" object.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forest plot for a RoBMA object — forest","text":"","code":"forest(   x,   conditional = FALSE,   plot_type = \"base\",   output_scale = NULL,   order = NULL,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forest plot for a RoBMA object — forest","text":"x fitted RoBMA object conditional whether conditional estimates plotted. Defaults FALSE plots model-averaged estimates. Note \"weightfunction\" \"PET-PEESE\" always ignoring type publication bias adjustment. plot_type whether use base plot \"base\" ggplot2 \"ggplot\" plotting. Defaults \"base\". output_scale transform effect sizes meta-analytic effect size estimate different scale. Defaults NULL returns scale model estimated . order order studies. Defaults NULL - ordering supplied fitting function. Studies can ordered either \"increasing\" \"decreasing\" effect size, labels \"alphabetical\". ... list additional graphical arguments passed plotting function. Supported arguments lwd, lty, col, col.fill, xlab, ylab, main, xlim, ylim adjust line thickness, line type, line color, fill color, x-label, y-label, title, x-axis range, y-axis range respectively.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forest plot for a RoBMA object — forest","text":"forest returns either NULL plot_type = \"base\" object object class 'ggplot2' plot_type = \"ggplot2\".","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/forest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forest plot for a RoBMA object — forest","text":"","code":"if (FALSE) { # \\dontrun{ # using the example data from Anderson et al. 2010 and fitting the default model # (note that the model can take a while to fit) fit <- RoBMA(r = Anderson2010$r, n = Anderson2010$n, study_names = Anderson2010$labels)  ### ggplot2 version of all of the plots can be obtained by adding 'model_type = \"ggplot\" # the forest function creates a forest plot for a fitted RoBMA object, for example, # the forest plot for the individual studies and the model-averaged effect size estimate forest(fit)  # the conditional effect size estimate forest(fit, conditional = TRUE)  # or transforming the effect size estimates to Fisher's z forest(fit, output_scale = \"fishers_z\") } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/interpret.html","id":null,"dir":"Reference","previous_headings":"","what":"Interprets results of a RoBMA model. — interpret","title":"Interprets results of a RoBMA model. — interpret","text":"interpret creates brief textual summary fitted RoBMA object.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/interpret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interprets results of a RoBMA model. — interpret","text":"","code":"interpret(object, output_scale = NULL)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/interpret.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interprets results of a RoBMA model. — interpret","text":"object fitted RoBMA object output_scale transform  meta-analytic estimates different scale. Defaults NULL returns scale model estimated .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/interpret.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interprets results of a RoBMA model. — interpret","text":"interpret returns character.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/is.RoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Reports whether x is a RoBMA object — is.RoBMA","title":"Reports whether x is a RoBMA object — is.RoBMA","text":"Reports whether x RoBMA object","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/is.RoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reports whether x is a RoBMA object — is.RoBMA","text":"","code":"is.RoBMA(x)  is.RoBMA.reg(x)  is.NoBMA(x)  is.NoBMA.reg(x)  is.BiBMA(x)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/is.RoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reports whether x is a RoBMA object — is.RoBMA","text":"x object test","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/is.RoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reports whether x is a RoBMA object — is.RoBMA","text":"returns boolean.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Kroupova2021.html","id":null,"dir":"Reference","previous_headings":"","what":"881 estimates from 69 studies of a relationship between employment and educational outcomes collected by Kroupova et al. (2021) — Kroupova2021","title":"881 estimates from 69 studies of a relationship between employment and educational outcomes collected by Kroupova et al. (2021) — Kroupova2021","text":"data set contains partial correlation coefficients, standard errors, study labels, samples sizes, type educational outcome, intensity employment, gender student population, study location, study design, whether study controlled endogenity, whether study controlled motivation. original data set including additional variables publication can found http://meta-analysis.cz/students. (Note standard errors employment intensities missing.)","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Kroupova2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"881 estimates from 69 studies of a relationship between employment and educational outcomes collected by Kroupova et al. (2021) — Kroupova2021","text":"","code":"Kroupova2021"},{"path":"https://https://fbartos.github.io/RoBMA/reference/Kroupova2021.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"881 estimates from 69 studies of a relationship between employment and educational outcomes collected by Kroupova et al. (2021) — Kroupova2021","text":"data.frame 11 columns 881 observations.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Kroupova2021.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"881 estimates from 69 studies of a relationship between employment and educational outcomes collected by Kroupova et al. (2021) — Kroupova2021","text":"data.frame.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Kroupova2021.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"881 estimates from 69 studies of a relationship between employment and educational outcomes collected by Kroupova et al. (2021) — Kroupova2021","text":"Kroupova K, Havranek T, Irsova Z (2021). “Student employment education: meta-analysis.” CEPR Discussion Paper. https://www.ssrn.com/abstract=3928863.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Lui2015.html","id":null,"dir":"Reference","previous_headings":"","what":"18 studies of a relationship between acculturation mismatch and intergenerational cultural conflict collected by Lui (2015) — Lui2015","title":"18 studies of a relationship between acculturation mismatch and intergenerational cultural conflict collected by Lui (2015) — Lui2015","text":"data set contains correlation coefficients r, sample sizes n, labels study assessing relationship acculturation mismatch (result contrast collectivist cultures Asian Latin immigrant groups individualist culture United States) intergenerational cultural conflict (Lui 2015)  used example Bartoš et al. (2022) .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Lui2015.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"18 studies of a relationship between acculturation mismatch and intergenerational cultural conflict collected by Lui (2015) — Lui2015","text":"","code":"Lui2015"},{"path":"https://https://fbartos.github.io/RoBMA/reference/Lui2015.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"18 studies of a relationship between acculturation mismatch and intergenerational cultural conflict collected by Lui (2015) — Lui2015","text":"data.frame 3 columns 18 observations.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Lui2015.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"18 studies of a relationship between acculturation mismatch and intergenerational cultural conflict collected by Lui (2015) — Lui2015","text":"data.frame.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Lui2015.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"18 studies of a relationship between acculturation mismatch and intergenerational cultural conflict collected by Lui (2015) — Lui2015","text":"Bartoš F, Maier M, Quintana DS, Wagenmakers E (2022). “Adjusting publication bias JASP R — Selection models, PET-PEESE, robust Bayesian meta-analysis.” Advances Methods Practices Psychological Science, 5(3), 1–19. doi:10.1177/25152459221109259 . Lui PP (2015). “Intergenerational cultural conflict, mental health, educational outcomes among Asian Latino/Americans: Qualitative meta-analytic review.” Psychological Bulletin, 141(2), 404–446. doi:10.1037/a0038449 .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/marginal_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots marginal estimates of a fitted RoBMA regression object — marginal_plot","title":"Plots marginal estimates of a fitted RoBMA regression object — marginal_plot","text":"marginal_plot allows visualize prior posterior distributions marginal estimates RoBMA regression model.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/marginal_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots marginal estimates of a fitted RoBMA regression object — marginal_plot","text":"","code":"marginal_plot(   x,   parameter,   conditional = FALSE,   plot_type = \"base\",   prior = FALSE,   output_scale = NULL,   dots_prior = NULL,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/marginal_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots marginal estimates of a fitted RoBMA regression object — marginal_plot","text":"x fitted RoBMA regression object parameter regression parameter plotted conditional whether conditional marginal estimates plotted. Defaults FALSE plots model-averaged estimates. plot_type whether use base plot \"base\" ggplot2 \"ggplot\" plotting. Defaults \"base\". prior whether prior distribution added figure. Defaults FALSE. output_scale transform effect sizes meta-analytic effect size estimate different scale. Defaults NULL returns scale model estimated . dots_prior list additional graphical arguments passed plotting function prior distribution. Supported arguments lwd, lty, col, col.fill, adjust line thickness, line type, line color, fill color prior distribution respectively. ... list additional graphical arguments passed plotting function. Supported arguments lwd, lty, col, col.fill, xlab, ylab, main, xlim, ylim adjust line thickness, line type, line color, fill color, x-label, y-label, title, x-axis range, y-axis range respectively.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/marginal_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots marginal estimates of a fitted RoBMA regression object — marginal_plot","text":"plot.RoBMA returns either NULL plot_type = \"base\" object object class 'ggplot2' plot_type = \"ggplot2\".","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/marginal_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize marginal estimates of a fitted RoBMA regression object — marginal_summary","title":"Summarize marginal estimates of a fitted RoBMA regression object — marginal_summary","text":"marginal_summary creates summary tables marginal estimates RoBMA regression model.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/marginal_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize marginal estimates of a fitted RoBMA regression object — marginal_summary","text":"","code":"marginal_summary(   object,   conditional = FALSE,   output_scale = NULL,   probs = c(0.025, 0.975),   logBF = FALSE,   BF01 = FALSE )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/marginal_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize marginal estimates of a fitted RoBMA regression object — marginal_summary","text":"object fitted RoBMA regression object conditional show conditional estimates (assuming alternative true). output_scale transform  meta-analytic estimates different scale. Defaults NULL returns scale model estimated . probs quantiles posterior samples displayed. Defaults c(.025, .975) logBF show log Bayes factors. Defaults FALSE. BF01 show Bayes factors support null hypotheses. Defaults FALSE.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/marginal_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize marginal estimates of a fitted RoBMA regression object — marginal_summary","text":"marginal_summary returns list tables class 'BayesTools_table'.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Bayesian Model-Averaged Meta-Analysis — NoBMA","title":"Estimate a Bayesian Model-Averaged Meta-Analysis — NoBMA","text":"NoBMA wrapper around RoBMA() can used estimate publication bias unadjusted Bayesian model-averaged meta-analysis. interface allows complete customization ensemble different prior (list prior) distributions component.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Bayesian Model-Averaged Meta-Analysis — NoBMA","text":"","code":"NoBMA(   d = NULL,   r = NULL,   logOR = NULL,   OR = NULL,   z = NULL,   y = NULL,   se = NULL,   v = NULL,   n = NULL,   lCI = NULL,   uCI = NULL,   t = NULL,   study_names = NULL,   study_ids = NULL,   data = NULL,   weight = NULL,   transformation = if (is.null(y)) \"fishers_z\" else \"none\",   prior_scale = if (is.null(y)) \"cohens_d\" else \"none\",   model_type = NULL,   rescale_priors = 1,   priors_effect = set_default_priors(\"effect\", rescale = rescale_priors),   priors_heterogeneity = set_default_priors(\"heterogeneity\", rescale = rescale_priors),   priors_effect_null = set_default_priors(\"effect\", null = TRUE),   priors_heterogeneity_null = set_default_priors(\"heterogeneity\", null = TRUE),   priors_hierarchical = set_default_priors(\"hierarchical\"),   priors_hierarchical_null = set_default_priors(\"hierarchical\", null = TRUE),   algorithm = \"bridge\",   chains = 3,   sample = 5000,   burnin = 2000,   adapt = 500,   thin = 1,   parallel = FALSE,   autofit = TRUE,   autofit_control = set_autofit_control(),   convergence_checks = set_convergence_checks(),   save = \"all\",   seed = NULL,   silent = TRUE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Bayesian Model-Averaged Meta-Analysis — NoBMA","text":"d vector effect sizes measured Cohen's d / Hedges' g (standardized mean differences) r vector effect sizes measured correlations logOR vector effect sizes measured log odds ratios vector effect sizes measured odds ratios z vector effect sizes measured Fisher's z y vector unspecified effect sizes (note effect size transformations unavailable type input) se vector standard errors effect sizes v vector variances effect sizes n vector overall sample sizes lCI vector lower bounds confidence intervals uCI vector upper bounds confidence intervals t vector t/z-statistics study_names optional argument names studies study_ids optional argument specifying dependency studies (using multilevel model). Defaults NULL studies independent. data data object created combine_data function. alternative input entry specifying d, r, y, etc... directly. .e., RoBMA function allow passing data.frame referencing columns. weight specifies likelihood weights individual estimates. Notes untested experimental feature. transformation transformation applied supplied effect sizes fitting individual models. Defaults \"fishers_z\". highly recommend using \"fishers_z\" transformation since variance stabilizing measure bias PET PEESE style models. options \"cohens_d\", correlation coefficient \"r\" \"logOR\". Supplying \"none\" treat effect sizes unstandardized refrain transformations. prior_scale effect size scale used define priors. Defaults \"cohens_d\". options \"fishers_z\", correlation coefficient \"r\", \"logOR\". prior scale need match effect sizes measure - samples prior distributions internally transformed match transformation data. prior_scale corresponds effect size scale default output, can changed within summary function. model_type string specifying RoBMA ensemble. Defaults NULL. options \"PSMA\", \"PP\", \"2w\" override settings passed priors_effect, priors_heterogeneity, priors_effect, priors_effect_null, priors_heterogeneity_null, priors_bias_null, priors_effect. See details information different model types. rescale_priors re-scaling factor prior distributions. re-scaling factor allows adjust width default priors simultaneously. Defaults 1. priors_effect list prior distributions effect size (mu) parameter treated belonging alternative hypothesis. Defaults standard normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)). priors_heterogeneity list prior distributions heterogeneity tau parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"invgamma\", parameters = list(shape = 1, scale = .15)) based heterogeneities estimates psychology (van Erp et al. 2017) . priors_effect_null list prior distributions effect size (mu) parameter treated belonging null hypothesis. Defaults point null hypotheses zero, prior(distribution = \"point\", parameters = list(location = 0)). priors_heterogeneity_null list prior distributions heterogeneity tau parameter treated belonging null hypothesis. Defaults point null hypotheses zero (fixed effect meta-analytic models), prior(distribution = \"point\", parameters = list(location = 0)). priors_hierarchical list prior distributions correlation random effects (rho) parameter treated belonging alternative hypothesis. setting allows users fit hierarchical (three-level) meta-analysis study_ids supplied. Note experimental feature see News details. Defaults beta distribution prior(distribution = \"beta\", parameters = list(alpha = 1, beta = 1)). priors_hierarchical_null list prior distributions correlation random effects (rho) parameter treated belonging null hypothesis. Defaults NULL. algorithm string specifying algorithm used model averaging. Defaults \"bridge\" results estimating individual models using JAGS computing marginal likelihood using bridge sampling. alternative \"ss\" uses spike slab like parameterization approximate Bayesian model averaging single model. Note significantly sample, burnin, adapt iterations needed \"ss\" algorithm. chains number chains MCMC algorithm. sample number sampling iterations MCMC algorithm. Defaults 5000. burnin number burnin iterations MCMC algorithm. Defaults 2000. adapt number adaptation iterations MCMC algorithm. Defaults 500. thin thinning chains MCMC algorithm. Defaults 1. parallel whether individual models fitted parallel. Defaults FALSE. implementation completely stable might cause connection error. autofit whether model fitted convergence criteria (specified autofit_control) satisfied. Defaults TRUE. autofit_control allows pass autofit control settings set_autofit_control() function. See ?set_autofit_control options default settings. convergence_checks automatic convergence checks assess fitted models, passed set_convergence_checks() function. See ?set_convergence_checks options default settings. save whether models posterior distributions kept obtaining model-averaged result. Defaults \"\" remove anything. Set \"min\" significantly reduce size final object, however, model diagnostics manipulation object possible. seed seed set model fitting, marginal likelihood computation, posterior mixing reproducibility results. Defaults NULL - seed set. silent whether print messages regarding fitting process suppressed. Defaults TRUE. Note parallel = TRUE also suppresses messages. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a Bayesian Model-Averaged Meta-Analysis — NoBMA","text":"NoBMA returns object class 'RoBMA'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a Bayesian Model-Averaged Meta-Analysis — NoBMA","text":"See RoBMA() details. Note default prior distributions relatively wide informed prior distributions testing presence moderation considered.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Bayesian Model-Averaged Meta-Regression — NoBMA.reg","title":"Estimate a Bayesian Model-Averaged Meta-Regression — NoBMA.reg","text":"NoBMA.reg wrapper around RoBMA.reg() can used estimate publication bias unadjusted Bayesian model-averaged meta-regression. interface allows complete customization ensemble different prior (list prior) distributions component.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Bayesian Model-Averaged Meta-Regression — NoBMA.reg","text":"","code":"NoBMA.reg(   formula,   data,   test_predictors = TRUE,   study_names = NULL,   study_ids = NULL,   transformation = if (any(colnames(data) != \"y\")) \"fishers_z\" else \"none\",   prior_scale = if (any(colnames(data) != \"y\")) \"cohens_d\" else \"none\",   standardize_predictors = TRUE,   priors = NULL,   model_type = NULL,   rescale_priors = 1,   priors_effect = set_default_priors(\"effect\", rescale = rescale_priors),   priors_heterogeneity = set_default_priors(\"heterogeneity\", rescale = rescale_priors),   priors_effect_null = set_default_priors(\"effect\", null = TRUE),   priors_heterogeneity_null = set_default_priors(\"heterogeneity\", null = TRUE),   priors_hierarchical = set_default_priors(\"hierarchical\"),   priors_hierarchical_null = set_default_priors(\"hierarchical\", null = TRUE),   prior_covariates = set_default_priors(\"covariates\", rescale = rescale_priors),   prior_covariates_null = set_default_priors(\"covariates\", null = TRUE),   prior_factors = set_default_priors(\"factors\", rescale = rescale_priors),   prior_factors_null = set_default_priors(\"factors\", null = TRUE),   algorithm = \"bridge\",   chains = 3,   sample = 5000,   burnin = 2000,   adapt = 500,   thin = 1,   parallel = FALSE,   autofit = TRUE,   autofit_control = set_autofit_control(),   convergence_checks = set_convergence_checks(),   save = \"all\",   seed = NULL,   silent = TRUE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Bayesian Model-Averaged Meta-Regression — NoBMA.reg","text":"formula formula meta-regression model data data.frame containing data meta-regression. Note column names correspond effect sizes (d, logOR, , r, z), measure sampling variability (se, v, n, lCI, uCI, t), predictors. See combine_data() complete list reserved names additional information specifying input data. test_predictors vector predictor names test presence moderation (.e., assigned null alternative prior distributions). Defaults TRUE, predictors tested using default prior distributions (.e., prior_covariates, prior_covariates_null, prior_factors, prior_factors_null). estimate adjust effect predictors use FALSE. priors specified, settings test_predictors overridden. study_names optional argument names studies study_ids optional argument specifying dependency studies (using multilevel model). Defaults NULL studies independent. transformation transformation applied supplied effect sizes fitting individual models. Defaults \"fishers_z\". highly recommend using \"fishers_z\" transformation since variance stabilizing measure bias PET PEESE style models. options \"cohens_d\", correlation coefficient \"r\" \"logOR\". Supplying \"none\" treat effect sizes unstandardized refrain transformations. prior_scale effect size scale used define priors. Defaults \"cohens_d\". options \"fishers_z\", correlation coefficient \"r\", \"logOR\". prior scale need match effect sizes measure - samples prior distributions internally transformed match transformation data. prior_scale corresponds effect size scale default output, can changed within summary function. standardize_predictors whether continuous predictors standardized prior estimating model. Defaults TRUE. Continuous predictor standardization important applying default prior distributions continuous predictors. Note resulting output corresponds standardized meta-regression coefficients. priors named list prior distributions predictor (names corresponding predictors). allows users specify null alternative hypothesis prior distributions predictor assigning corresponding element named list another named list (\"null\" \"alt\"). one prior specified given parameter, assumed correspond alternative hypotheses default null hypothesis specified (.e., prior_covariates_null prior_factors_null). named list one named prior distribution provided (either \"null\" \"alt\"), prior distribution used default distribution filled . Parameters without specified prior distributions assumed adjusted using default alternative hypothesis prior distributions (.e., prior_covariates prior_factors). priors specified, test_predictors ignored. model_type string specifying RoBMA ensemble. Defaults NULL. options \"PSMA\", \"PP\", \"2w\" override settings passed priors_effect, priors_heterogeneity, priors_effect, priors_effect_null, priors_heterogeneity_null, priors_bias_null, priors_effect. See details information different model types. rescale_priors re-scaling factor prior distributions. re-scaling factor allows adjust width default priors simultaneously. Defaults 1. priors_effect list prior distributions effect size (mu) parameter treated belonging alternative hypothesis. Defaults standard normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)). priors_heterogeneity list prior distributions heterogeneity tau parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"invgamma\", parameters = list(shape = 1, scale = .15)) based heterogeneities estimates psychology (van Erp et al. 2017) . priors_effect_null list prior distributions effect size (mu) parameter treated belonging null hypothesis. Defaults point null hypotheses zero, prior(distribution = \"point\", parameters = list(location = 0)). priors_heterogeneity_null list prior distributions heterogeneity tau parameter treated belonging null hypothesis. Defaults point null hypotheses zero (fixed effect meta-analytic models), prior(distribution = \"point\", parameters = list(location = 0)). priors_hierarchical list prior distributions correlation random effects (rho) parameter treated belonging alternative hypothesis. setting allows users fit hierarchical (three-level) meta-analysis study_ids supplied. Note experimental feature see News details. Defaults beta distribution prior(distribution = \"beta\", parameters = list(alpha = 1, beta = 1)). priors_hierarchical_null list prior distributions correlation random effects (rho) parameter treated belonging null hypothesis. Defaults NULL. prior_covariates prior distributions regression parameter continuous covariates effect size alternative hypothesis (unless set explicitly priors). Defaults relatively wide normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 0.25)). prior_covariates_null prior distributions regression parameter continuous covariates effect size null hypothesis (unless set explicitly priors). Defaults effect prior(\"spike\",  parameters = list(location = 0)). prior_factors prior distributions regression parameter categorical covariates effect size alternative hypothesis (unless set explicitly priors). Defaults relatively wide multivariate normal distribution specifying differences mean contrasts prior_factor(\"mnormal\", parameters = list(mean = 0, sd = 0.25), contrast = \"meandif\"). prior_factors_null prior distributions regression parameter categorical covariates effect size null hypothesis (unless set explicitly priors). Defaults effect prior(\"spike\",  parameters = list(location = 0)). algorithm string specifying algorithm used model averaging. Defaults \"bridge\" results estimating individual models using JAGS computing marginal likelihood using bridge sampling. alternative \"ss\" uses spike slab like parameterization approximate Bayesian model averaging single model. Note significantly sample, burnin, adapt iterations needed \"ss\" algorithm. chains number chains MCMC algorithm. sample number sampling iterations MCMC algorithm. Defaults 5000. burnin number burnin iterations MCMC algorithm. Defaults 2000. adapt number adaptation iterations MCMC algorithm. Defaults 500. thin thinning chains MCMC algorithm. Defaults 1. parallel whether individual models fitted parallel. Defaults FALSE. implementation completely stable might cause connection error. autofit whether model fitted convergence criteria (specified autofit_control) satisfied. Defaults TRUE. autofit_control allows pass autofit control settings set_autofit_control() function. See ?set_autofit_control options default settings. convergence_checks automatic convergence checks assess fitted models, passed set_convergence_checks() function. See ?set_convergence_checks options default settings. save whether models posterior distributions kept obtaining model-averaged result. Defaults \"\" remove anything. Set \"min\" significantly reduce size final object, however, model diagnostics manipulation object possible. seed seed set model fitting, marginal likelihood computation, posterior mixing reproducibility results. Defaults NULL - seed set. silent whether print messages regarding fitting process suppressed. Defaults TRUE. Note parallel = TRUE also suppresses messages. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a Bayesian Model-Averaged Meta-Regression — NoBMA.reg","text":"NoBMA.reg returns object class 'RoBMA'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/NoBMA.reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a Bayesian Model-Averaged Meta-Regression — NoBMA.reg","text":"See RoBMA.reg() details. Note default prior distributions relatively wide informed prior distributions testing presence moderation considered.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot.RoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a fitted RoBMA object — plot.RoBMA","title":"Plots a fitted RoBMA object — plot.RoBMA","text":"plot.RoBMA allows visualize different \"RoBMA\" object parameters various ways. See type different model types.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot.RoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a fitted RoBMA object — plot.RoBMA","text":"","code":"# S3 method for class 'RoBMA' plot(   x,   parameter = \"mu\",   conditional = FALSE,   plot_type = \"base\",   prior = FALSE,   output_scale = NULL,   rescale_x = FALSE,   show_data = TRUE,   dots_prior = NULL,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot.RoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a fitted RoBMA object — plot.RoBMA","text":"x fitted RoBMA object parameter parameter plotted. Defaults \"mu\" (effect size). additional options \"tau\" (heterogeneity), \"weightfunction\" (estimated weightfunction), \"PET-PEESE\" (PET-PEESE regression). conditional whether conditional estimates plotted. Defaults FALSE plots model-averaged estimates. Note \"weightfunction\" \"PET-PEESE\" always ignoring type publication bias adjustment. plot_type whether use base plot \"base\" ggplot2 \"ggplot\" plotting. Defaults \"base\". prior whether prior distribution added figure. Defaults FALSE. output_scale transform effect sizes meta-analytic effect size estimate different scale. Defaults NULL returns scale model estimated . rescale_x whether x-axis \"weightfunction\" re-scaled make x-ticks equally spaced. Defaults FALSE. show_data whether study estimates standard errors show \"PET-PEESE\" plot. Defaults TRUE. dots_prior list additional graphical arguments passed plotting function prior distribution. Supported arguments lwd, lty, col, col.fill, adjust line thickness, line type, line color, fill color prior distribution respectively. ... list additional graphical arguments passed plotting function. Supported arguments lwd, lty, col, col.fill, xlab, ylab, main, xlim, ylim adjust line thickness, line type, line color, fill color, x-label, y-label, title, x-axis range, y-axis range respectively.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot.RoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a fitted RoBMA object — plot.RoBMA","text":"plot.RoBMA returns either NULL plot_type = \"base\" object object class 'ggplot2' plot_type = \"ggplot2\".","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot.RoBMA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a fitted RoBMA object — plot.RoBMA","text":"","code":"if (FALSE) { # \\dontrun{ # using the example data from Anderson et al. 2010 and fitting the default model # (note that the model can take a while to fit) fit <- RoBMA(r = Anderson2010$r, n = Anderson2010$n, study_names = Anderson2010$labels)  ### ggplot2 version of all of the plots can be obtained by adding 'model_type = \"ggplot\" # the 'plot' function allows to visualize the results of a fitted RoBMA object, for example; # the model-averaged effect size estimate plot(fit, parameter = \"mu\")  # and show both the prior and posterior distribution plot(fit, parameter = \"mu\", prior = TRUE)  # conditional plots can by obtained by specifying plot(fit, parameter = \"mu\", conditional = TRUE)  # plotting function also allows to visualize the weight function plot(fit, parameter = \"weightfunction\")  # re-scale the x-axis plot(fit, parameter = \"weightfunction\", rescale_x = TRUE)  # or visualize the PET-PEESE regression line plot(fit, parameter = \"PET-PEESE\") } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Models plot for a RoBMA object — plot_models","title":"Models plot for a RoBMA object — plot_models","text":"plot_models plots individual models' estimates \"RoBMA\" object.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Models plot for a RoBMA object — plot_models","text":"","code":"plot_models(   x,   parameter = \"mu\",   conditional = FALSE,   output_scale = NULL,   plot_type = \"base\",   order = \"decreasing\",   order_by = \"model\",   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Models plot for a RoBMA object — plot_models","text":"x fitted RoBMA object parameter parameter plotted. Defaults \"mu\" (effect size). additional option \"tau\" (heterogeneity). conditional whether conditional estimates plotted. Defaults FALSE plots model-averaged estimates. Note \"weightfunction\" \"PET-PEESE\" always ignoring type publication bias adjustment. output_scale transform effect sizes meta-analytic effect size estimate different scale. Defaults NULL returns scale model estimated . plot_type whether use base plot \"base\" ggplot2 \"ggplot\" plotting. Defaults \"base\". order models ordered. Defaults \"decreasing\" orders decreasing order accordance order_by argument. alternative \"increasing\". order_by feature use order models. Defaults \"model\" orders models according number. alternatives \"estimate\" (effect size estimates), \"probability\" (posterior model probability), \"BF\" (inclusion Bayes factor). ... list additional graphical arguments passed plotting function. Supported arguments lwd, lty, col, col.fill, xlab, ylab, main, xlim, ylim adjust line thickness, line type, line color, fill color, x-label, y-label, title, x-axis range, y-axis range respectively.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Models plot for a RoBMA object — plot_models","text":"plot_models returns either NULL plot_type = \"base\" object object class 'ggplot2' plot_type = \"ggplot2\".","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/plot_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Models plot for a RoBMA object — plot_models","text":"","code":"if (FALSE) { # \\dontrun{ # using the example data from Anderson et al. 2010 and fitting the default model # (note that the model can take a while to fit) fit <- RoBMA(r = Anderson2010$r, n = Anderson2010$n, study_names = Anderson2010$labels)  ### ggplot2 version of all of the plots can be obtained by adding 'model_type = \"ggplot\" # the plot_models function creates a plot for of the individual models' estimates, for example, # the effect size estimates from the individual models can be obtained with plot_models(fit)  # and effect size estimates from only the conditional models plot_models(fit, conditional = TRUE) } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/pooled_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute pooled effect size — pooled_effect","title":"Compute pooled effect size — pooled_effect","text":"pooled_effect computes pooled effect size fitted RoBMA.reg BiBMA.reg object. available models estimated using spike--slab algorithm (.e., algorithm = \"ss\").","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/pooled_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute pooled effect size — pooled_effect","text":"","code":"pooled_effect(   object,   conditional = FALSE,   output_scale = NULL,   probs = c(0.025, 0.975),   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/pooled_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute pooled effect size — pooled_effect","text":"object fitted RoBMA object conditional show conditional estimates (assuming alternative true). Defaults FALSE. available type == \"ensemble\". output_scale transform  meta-analytic estimates different scale. Defaults NULL returns scale model estimated . probs quantiles posterior samples displayed. Defaults c(.025, .975) ... additional arguments","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/pooled_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute pooled effect size — pooled_effect","text":"pooled_effect returns list tables class 'BayesTools_table'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/pooled_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute pooled effect size — pooled_effect","text":"meta-regression specification results intercept corresponding adjusted effect estimate (.e., adjusting effect moderators). case moderators inbalance, adjusted effect estimate might representative sample studies. pooled effect size function averages effect size estimate across moderators proportionately moderators levels observed data set. Note Bayes factor test presence pooled effect (summary function provides adjusted effect test presence adjusted effect). conditional estimate calculated conditional presence adjusted effect (.e., intercept).","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/Poulsen2006.html","id":null,"dir":"Reference","previous_headings":"","what":"5 studies with a tactile outcome assessment from Poulsen et al. (2006) of the effect of potassium-containing toothpaste on dentine hypersensitivity — Poulsen2006","title":"5 studies with a tactile outcome assessment from Poulsen et al. (2006) of the effect of potassium-containing toothpaste on dentine hypersensitivity — Poulsen2006","text":"data set contains Cohen's d effect sizes, standard errors, labels 5 studies assessing tactile outcome meta-analysis effect potassium-containing toothpaste dentine hypersensitivity (Poulsen et al. 2006)  used example Bartoš et al. (2021) .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Poulsen2006.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"5 studies with a tactile outcome assessment from Poulsen et al. (2006) of the effect of potassium-containing toothpaste on dentine hypersensitivity — Poulsen2006","text":"","code":"Poulsen2006"},{"path":"https://https://fbartos.github.io/RoBMA/reference/Poulsen2006.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"5 studies with a tactile outcome assessment from Poulsen et al. (2006) of the effect of potassium-containing toothpaste on dentine hypersensitivity — Poulsen2006","text":"data.frame 3 columns 5 observations.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Poulsen2006.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"5 studies with a tactile outcome assessment from Poulsen et al. (2006) of the effect of potassium-containing toothpaste on dentine hypersensitivity — Poulsen2006","text":"data.frame.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/Poulsen2006.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"5 studies with a tactile outcome assessment from Poulsen et al. (2006) of the effect of potassium-containing toothpaste on dentine hypersensitivity — Poulsen2006","text":"Bartoš F, Gronau QF, Timmers B, Otte WM, Ly , Wagenmakers E (2021). “Bayesian model-averaged meta-analysis medicine.” Statistics Medicine, 40(30), 6743–6761. doi:10.1002/sim.9170 . Poulsen S, Errboe M, Mevil YL, Glenny (2006). “Potassium containing toothpastes dentine hypersensitivity.” Cochrane Database Systematic Reviews. doi:10.1002/14651858.cd001476.pub2 .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.marginal_summary.RoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints marginal_summary object for RoBMA method — print.marginal_summary.RoBMA","title":"Prints marginal_summary object for RoBMA method — print.marginal_summary.RoBMA","text":"Prints marginal_summary object RoBMA method","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.marginal_summary.RoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints marginal_summary object for RoBMA method — print.marginal_summary.RoBMA","text":"","code":"# S3 method for class 'marginal_summary.RoBMA' print(x, ...)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.marginal_summary.RoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints marginal_summary object for RoBMA method — print.marginal_summary.RoBMA","text":"x summary RoBMA object ... additional arguments","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.marginal_summary.RoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints marginal_summary object for RoBMA method — print.marginal_summary.RoBMA","text":"print.marginal_summary.RoBMA invisibly returns print statement.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.RoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints a fitted RoBMA object — print.RoBMA","title":"Prints a fitted RoBMA object — print.RoBMA","text":"Prints fitted RoBMA object","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.RoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints a fitted RoBMA object — print.RoBMA","text":"","code":"# S3 method for class 'RoBMA' print(x, ...)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.RoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints a fitted RoBMA object — print.RoBMA","text":"x fitted RoBMA object. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.RoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints a fitted RoBMA object — print.RoBMA","text":"print.RoBMA invisibly returns print statement.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.summary.RoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints summary object for RoBMA method — print.summary.RoBMA","title":"Prints summary object for RoBMA method — print.summary.RoBMA","text":"Prints summary object RoBMA method","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.summary.RoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints summary object for RoBMA method — print.summary.RoBMA","text":"","code":"# S3 method for class 'summary.RoBMA' print(x, ...)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.summary.RoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints summary object for RoBMA method — print.summary.RoBMA","text":"x summary RoBMA object ... additional arguments","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/print.summary.RoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints summary object for RoBMA method — print.summary.RoBMA","text":"print.summary.RoBMA invisibly returns print statement.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a prior distribution — prior","title":"Creates a prior distribution — prior","text":"prior creates prior distribution. prior can visualized plot function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a prior distribution — prior","text":"","code":"prior(   distribution,   parameters,   truncation = list(lower = -Inf, upper = Inf),   prior_weights = 1 )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a prior distribution — prior","text":"distribution name prior distribution. possible options \"point\" point density characterized location parameter. \"normal\" normal distribution characterized mean sd parameters. \"lognormal\" lognormal distribution characterized meanlog sdlog parameters. \"cauchy\" Cauchy distribution characterized location scale parameters. Internally converted generalized t-distribution df = 1. \"t\" generalized t-distribution characterized location, scale, df parameters. \"gamma\" gamma distribution characterized either shape rate, shape scale parameters. later internally converted shape rate parametrization \"invgamma\" inverse-gamma distribution characterized shape scale parameters. JAGS part uses 1/gamma distribution shape rate parameter. \"beta\" beta distribution characterized alpha beta parameters. \"exp\" exponential distribution characterized either rate scale parameter. later internally converted rate. \"uniform\" uniform distribution defined range b parameters list appropriate parameters given distribution. truncation list two elements, lower upper, define lower upper truncation distribution. Defaults list(lower = -Inf, upper = Inf). truncation automatically set bounds support. prior_weights prior odds associated given distribution. value passed model fitting function, creates models corresponding combinations prior distributions model parameters sets model priors odds product prior distributions.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a prior distribution — prior","text":"prior prior_none return object class 'prior'. named list containing distribution name, parameters, prior weights.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a prior distribution — prior","text":"","code":"# create a standard normal prior distribution p1 <- prior(distribution = \"normal\", parameters = list(mean = 1, sd = 1))  # create a half-normal standard normal prior distribution p2 <- prior(distribution = \"normal\", parameters = list(mean = 1, sd = 1), truncation = list(lower = 0, upper = Inf))  # the prior distribution can be visualized using the plot function # (see ?plot.prior for all options) plot(p1)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a prior distribution for factors — prior_factor","title":"Creates a prior distribution for factors — prior_factor","text":"prior_factor creates prior distribution fitting models factor predictors. (Note results across different operating systems might vary due differences JAGS numerical precision.)","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a prior distribution for factors — prior_factor","text":"","code":"prior_factor(   distribution,   parameters,   truncation = list(lower = -Inf, upper = Inf),   prior_weights = 1,   contrast = \"meandif\" )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a prior distribution for factors — prior_factor","text":"distribution name prior distribution. possible options \"point\" point density characterized location parameter. \"normal\" normal distribution characterized mean sd parameters. \"lognormal\" lognormal distribution characterized meanlog sdlog parameters. \"cauchy\" Cauchy distribution characterized location scale parameters. Internally converted generalized t-distribution df = 1. \"t\" generalized t-distribution characterized location, scale, df parameters. \"gamma\" gamma distribution characterized either shape rate, shape scale parameters. later internally converted shape rate parametrization \"invgamma\" inverse-gamma distribution characterized shape scale parameters. JAGS part uses 1/gamma distribution shape rate parameter. \"beta\" beta distribution characterized alpha beta parameters. \"exp\" exponential distribution characterized either rate scale parameter. later internally converted rate. \"uniform\" uniform distribution defined range b parameters list appropriate parameters given distribution. truncation list two elements, lower upper, define lower upper truncation distribution. Defaults list(lower = -Inf, upper = Inf). truncation automatically set bounds support. prior_weights prior odds associated given distribution. value passed model fitting function, creates models corresponding combinations prior distributions model parameters sets model priors odds product prior distributions. contrast type contrast prior distribution. possible options \"meandif\" contrast centered around grand mean equal marginal distributions, making prior distribution exchangeable across factor levels. contrast \"orthonormal\", marginal distributions identical regardless number factor levels specified prior distribution corresponds difference grand mean factor level. supports distribution = \"mnormal\" distribution = \"mt\" generates corresponding multivariate normal/t distributions. \"orthonormal\" contrast centered around grand mean equal marginal distributions, making prior distribution exchangeable across factor levels. supports distribution = \"mnormal\" distribution = \"mt\" generates corresponding multivariate normal/t distributions. \"treatment\" contrasts using first level comparison group setting equal prior distribution differences individual factor levels comparison level. \"independent\" contrasts specifying dependent prior distribution factor level (note leads overparameterized model intercept included).","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a prior distribution for factors — prior_factor","text":"return object class 'prior'.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a prior distribution for factors — prior_factor","text":"","code":"# create an orthonormal prior distribution p1 <- prior_factor(distribution = \"mnormal\", contrast = \"orthonormal\",                    parameters = list(mean = 0, sd = 1))"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_informed.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an informed prior distribution based on research — prior_informed","title":"Creates an informed prior distribution based on research — prior_informed","text":"prior_informed creates informed prior distribution based past research. prior can visualized plot function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_informed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an informed prior distribution based on research — prior_informed","text":"","code":"prior_informed(name, parameter = NULL, type = \"smd\")"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_informed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an informed prior distribution based on research — prior_informed","text":"name name prior distribution. many options based prior psychological medical research. psychology, possible options \"van Erp\" informed prior distribution heterogeneity parameter tau meta-analytic effect size estimates based standardized mean differences (van Erp et al. 2017), \"Oosterwijk\" informed prior distribution effect sizes expected social psychology based prior elicitation dr. Oosterwijk (Gronau et al. 2017). medicine, possible options based Bartoš et al. (2021)  Bartoš et al. (2023) developed empirical prior distributions effect size heterogeneity parameters continuous outcomes (standardized mean differences), dichotomous outcomes (logOR, logRR, risk differences), time event outcomes (logHR) based Cochrane database systematic reviews. Use \"Cochrane\" prior distribution based whole database call print(prior_informed_medicine_names) inspect names 46 subfields set appropriate parameter type. parameter parameter name describing prior distribution supposed produced cases name corresponds multiple prior distributions. Relevant empirical medical prior distributions. type prior type describing prior distribution supposed produced cases name parameter correspond multiple prior distributions. Relevant empirical medical prior distributions following options \"smd\" standardized mean differences \"logOR\" log odds ratios \"logRR\" log risk ratios \"RD\" risk differences \"logHR\" hazard ratios","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_informed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an informed prior distribution based on research — prior_informed","text":"prior_informed returns object class 'prior'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_informed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates an informed prior distribution based on research — prior_informed","text":"details can found van Erp et al. (2017) , Gronau et al. (2017) , Bartoš et al. (2021) .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_informed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creates an informed prior distribution based on research — prior_informed","text":"Bartoš F, Gronau QF, Timmers B, Otte WM, Ly , Wagenmakers E (2021). “Bayesian model-averaged meta-analysis medicine.” Statistics Medicine, 40(30), 6743–6761. doi:10.1002/sim.9170 . Gronau QF, Van Erp S, Heck DW, Cesario J, Jonas KJ, Wagenmakers E (2017). “Bayesian model-averaged meta-analysis power pose effect informed default priors: case felt power.” Comprehensive Results Social Psychology, 2(1), 123–138. doi:10.1080/23743603.2017.1326760 . van Erp S, Verhagen J, Grasman RP, Wagenmakers E (2017). “Estimates -study heterogeneity 705 meta-analyses reported Psychological Bulletin 1990–2013.” Journal Open Psychology Data, 5(1), 1–5. doi:10.5334/jopd.33 .","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_informed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an informed prior distribution based on research — prior_informed","text":"","code":"# prior distribution representing expected effect sizes in social psychology # based on prior elicitation with dr. Oosterwijk p1 <- prior_informed(\"Oosterwijk\")  # the prior distribution can be visualized using the plot function # (see ?plot.prior for all options) plot(p1)    # empirical prior distribution for the standardized mean differences from the oral health # medical subfield based on meta-analytic effect size estimates from the # Cochrane database of systematic reviews p2 <- prior_informed(\"Oral Health\", parameter =\"effect\", type =\"smd\") print(p2) #> Student-t(0, 0.51, 5)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_none.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a prior distribution — prior_none","title":"Creates a prior distribution — prior_none","text":"prior creates prior distribution. prior can visualized plot function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_none.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a prior distribution — prior_none","text":"","code":"prior_none(prior_weights = 1)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_none.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a prior distribution — prior_none","text":"prior_weights prior odds associated given distribution. value passed model fitting function, creates models corresponding combinations prior distributions model parameters sets model priors odds product prior distributions.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_none.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a prior distribution — prior_none","text":"prior prior_none return object class 'prior'. named list containing distribution name, parameters, prior weights.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_none.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a prior distribution — prior_none","text":"","code":"# create a standard normal prior distribution p1 <- prior(distribution = \"normal\", parameters = list(mean = 1, sd = 1))  # create a half-normal standard normal prior distribution p2 <- prior(distribution = \"normal\", parameters = list(mean = 1, sd = 1), truncation = list(lower = 0, upper = Inf))  # the prior distribution can be visualized using the plot function # (see ?plot.prior for all options) plot(p1)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PEESE.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a prior distribution for PET or PEESE models — prior_PEESE","title":"Creates a prior distribution for PET or PEESE models — prior_PEESE","text":"prior creates prior distribution fitting PET PEESE style models RoBMA. prior distribution can visualized plot function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PEESE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a prior distribution for PET or PEESE models — prior_PEESE","text":"","code":"prior_PEESE(   distribution,   parameters,   truncation = list(lower = 0, upper = Inf),   prior_weights = 1 )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PEESE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a prior distribution for PET or PEESE models — prior_PEESE","text":"distribution name prior distribution. possible options \"point\" point density characterized location parameter. \"normal\" normal distribution characterized mean sd parameters. \"lognormal\" lognormal distribution characterized meanlog sdlog parameters. \"cauchy\" Cauchy distribution characterized location scale parameters. Internally converted generalized t-distribution df = 1. \"t\" generalized t-distribution characterized location, scale, df parameters. \"gamma\" gamma distribution characterized either shape rate, shape scale parameters. later internally converted shape rate parametrization \"invgamma\" inverse-gamma distribution characterized shape scale parameters. JAGS part uses 1/gamma distribution shape rate parameter. \"beta\" beta distribution characterized alpha beta parameters. \"exp\" exponential distribution characterized either rate scale parameter. later internally converted rate. \"uniform\" uniform distribution defined range b parameters list appropriate parameters given distribution. truncation list two elements, lower upper, define lower upper truncation distribution. Defaults list(lower = -Inf, upper = Inf). truncation automatically set bounds support. prior_weights prior odds associated given distribution. value passed model fitting function, creates models corresponding combinations prior distributions model parameters sets model priors odds product prior distributions.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PEESE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a prior distribution for PET or PEESE models — prior_PEESE","text":"prior_PET prior_PEESE return object class 'prior'.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PEESE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a prior distribution for PET or PEESE models — prior_PEESE","text":"","code":"# create a half-Cauchy prior distribution # (PET and PEESE specific functions automatically set lower truncation at 0) p1 <- prior_PET(distribution = \"Cauchy\", parameters = list(location = 0, scale = 1))  plot(p1)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PET.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a prior distribution for PET or PEESE models — prior_PET","title":"Creates a prior distribution for PET or PEESE models — prior_PET","text":"prior creates prior distribution fitting PET PEESE style models RoBMA. prior distribution can visualized plot function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a prior distribution for PET or PEESE models — prior_PET","text":"","code":"prior_PET(   distribution,   parameters,   truncation = list(lower = 0, upper = Inf),   prior_weights = 1 )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PET.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a prior distribution for PET or PEESE models — prior_PET","text":"distribution name prior distribution. possible options \"point\" point density characterized location parameter. \"normal\" normal distribution characterized mean sd parameters. \"lognormal\" lognormal distribution characterized meanlog sdlog parameters. \"cauchy\" Cauchy distribution characterized location scale parameters. Internally converted generalized t-distribution df = 1. \"t\" generalized t-distribution characterized location, scale, df parameters. \"gamma\" gamma distribution characterized either shape rate, shape scale parameters. later internally converted shape rate parametrization \"invgamma\" inverse-gamma distribution characterized shape scale parameters. JAGS part uses 1/gamma distribution shape rate parameter. \"beta\" beta distribution characterized alpha beta parameters. \"exp\" exponential distribution characterized either rate scale parameter. later internally converted rate. \"uniform\" uniform distribution defined range b parameters list appropriate parameters given distribution. truncation list two elements, lower upper, define lower upper truncation distribution. Defaults list(lower = -Inf, upper = Inf). truncation automatically set bounds support. prior_weights prior odds associated given distribution. value passed model fitting function, creates models corresponding combinations prior distributions model parameters sets model priors odds product prior distributions.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PET.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a prior distribution for PET or PEESE models — prior_PET","text":"prior_PET prior_PEESE return object class 'prior'.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_PET.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a prior distribution for PET or PEESE models — prior_PET","text":"","code":"# create a half-Cauchy prior distribution # (PET and PEESE specific functions automatically set lower truncation at 0) p1 <- prior_PET(distribution = \"Cauchy\", parameters = list(location = 0, scale = 1))  plot(p1)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_weightfunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a prior distribution for a weight function — prior_weightfunction","title":"Creates a prior distribution for a weight function — prior_weightfunction","text":"prior_weightfunction creates prior distribution fitting RoBMA selection model. prior can visualized plot function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_weightfunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a prior distribution for a weight function — prior_weightfunction","text":"","code":"prior_weightfunction(distribution, parameters, prior_weights = 1)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_weightfunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a prior distribution for a weight function — prior_weightfunction","text":"distribution name prior distribution. possible options \"two.sided\" two-sided weight function characterized vector steps vector alpha parameters. alpha parameter determines alpha parameter Dirichlet distribution cumulative sum used weights omega. \"one.sided\" one-sided weight function characterized either vector steps vector alpha parameter, leading monotonic one-sided function, vector steps, vector alpha1, vector alpha2 parameters leading non-monotonic one-sided weight function. alpha / alpha1 alpha2 parameters determine alpha parameter Dirichlet distribution cumulative sum used weights omega. parameters list appropriate parameters given distribution. prior_weights prior odds associated given distribution. model fitting function usually creates models corresponding combinations prior distributions model parameters, sets model priors odds product prior distributions.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_weightfunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a prior distribution for a weight function — prior_weightfunction","text":"prior_weightfunction returns object class 'prior'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_weightfunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a prior distribution for a weight function — prior_weightfunction","text":"Constrained cases weight functions can specified adding \".fixed\" distribution name, .e., \"two.sided.fixed\" \"one.sided.fixed\". cases, functions specified using steps omega parameters, omega parameter vector weights corresponds relative publication probability (.e., parameters estimated).","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/prior_weightfunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a prior distribution for a weight function — prior_weightfunction","text":"","code":"p1 <- prior_weightfunction(\"one-sided\", parameters = list(steps = c(.05, .10), alpha = c(1, 1, 1)))  # the prior distribution can be visualized using the plot function # (see ?plot.prior for all options) plot(p1)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"RoBMA: Robust Bayesian meta-analysis — RoBMA-package","title":"RoBMA: Robust Bayesian meta-analysis — RoBMA-package","text":"RoBMA: Bayesian model-averaged meta-analysis adjustments publication bias ability specify informed prior distributions draw inference inclusion Bayes factors.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA-package.html","id":"user-guide","dir":"Reference","previous_headings":"","what":"User guide","title":"RoBMA: Robust Bayesian meta-analysis — RoBMA-package","text":"See Bartoš et al. (2023) , Maier et al. (2023) , Bartoš et al. (2022)  details regarding RoBMA methodology. details regarding customization model ensembles provided Reproducing BMA, BMA Medicine, Fitting Custom Meta-Analytic Ensembles vignettes. Please, use \"Issues\" section GitHub repository ask questions.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"RoBMA: Robust Bayesian meta-analysis — RoBMA-package","text":"Bartoš F, Maier M, Quintana DS, Wagenmakers E (2022). “Adjusting publication bias JASP R — Selection models, PET-PEESE, robust Bayesian meta-analysis.” Advances Methods Practices Psychological Science, 5(3), 1–19. doi:10.1177/25152459221109259 . Bartoš F, Maier M, Wagenmakers E, Doucouliagos H, Stanley TD (2023). “Robust Bayesian meta-analysis: Model-averaging across complementary publication bias adjustment methods.” Research Synthesis Methods, 14(1), 99–116. doi:10.1002/jrsm.1594 . Maier M, Bartoš F, Wagenmakers E (2023). “Robust Bayesian Meta-Analysis: Addressing publication bias model-averaging.” Psychological Methods, 28(1), 107–122. doi:10.1037/met0000405 .","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"RoBMA: Robust Bayesian meta-analysis — RoBMA-package","text":"František Bartoš f.bartos96@gmail.com","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Robust Bayesian Meta-Analysis — RoBMA","title":"Estimate a Robust Bayesian Meta-Analysis — RoBMA","text":"RoBMA used estimate robust Bayesian meta-analysis. interface allows complete customization ensemble different prior (list prior) distributions component.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Robust Bayesian Meta-Analysis — RoBMA","text":"","code":"RoBMA(   d = NULL,   r = NULL,   logOR = NULL,   OR = NULL,   z = NULL,   y = NULL,   se = NULL,   v = NULL,   n = NULL,   lCI = NULL,   uCI = NULL,   t = NULL,   study_names = NULL,   study_ids = NULL,   data = NULL,   weight = NULL,   transformation = if (is.null(y)) \"fishers_z\" else \"none\",   prior_scale = if (is.null(y)) \"cohens_d\" else \"none\",   effect_direction = \"positive\",   model_type = NULL,   rescale_priors = 1,   priors_effect = set_default_priors(\"effect\", rescale = rescale_priors),   priors_heterogeneity = set_default_priors(\"heterogeneity\", rescale = rescale_priors),   priors_bias = set_default_priors(\"bias\", rescale = rescale_priors),   priors_effect_null = set_default_priors(\"effect\", null = TRUE),   priors_heterogeneity_null = set_default_priors(\"heterogeneity\", null = TRUE),   priors_bias_null = set_default_priors(\"bias\", null = TRUE),   priors_hierarchical = set_default_priors(\"hierarchical\"),   priors_hierarchical_null = set_default_priors(\"hierarchical\", null = TRUE),   algorithm = \"bridge\",   chains = 3,   sample = 5000,   burnin = 2000,   adapt = 500,   thin = 1,   parallel = FALSE,   autofit = TRUE,   autofit_control = set_autofit_control(),   convergence_checks = set_convergence_checks(),   save = \"all\",   seed = NULL,   silent = TRUE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Robust Bayesian Meta-Analysis — RoBMA","text":"d vector effect sizes measured Cohen's d / Hedges' g (standardized mean differences) r vector effect sizes measured correlations logOR vector effect sizes measured log odds ratios vector effect sizes measured odds ratios z vector effect sizes measured Fisher's z y vector unspecified effect sizes (note effect size transformations unavailable type input) se vector standard errors effect sizes v vector variances effect sizes n vector overall sample sizes lCI vector lower bounds confidence intervals uCI vector upper bounds confidence intervals t vector t/z-statistics study_names optional argument names studies study_ids optional argument specifying dependency studies (using multilevel model). Defaults NULL studies independent. data data object created combine_data function. alternative input entry specifying d, r, y, etc... directly. .e., RoBMA function allow passing data.frame referencing columns. weight specifies likelihood weights individual estimates. Notes untested experimental feature. transformation transformation applied supplied effect sizes fitting individual models. Defaults \"fishers_z\". highly recommend using \"fishers_z\" transformation since variance stabilizing measure bias PET PEESE style models. options \"cohens_d\", correlation coefficient \"r\" \"logOR\". Supplying \"none\" treat effect sizes unstandardized refrain transformations. prior_scale effect size scale used define priors. Defaults \"cohens_d\". options \"fishers_z\", correlation coefficient \"r\", \"logOR\". prior scale need match effect sizes measure - samples prior distributions internally transformed match transformation data. prior_scale corresponds effect size scale default output, can changed within summary function. effect_direction expected direction effect. Correctly specifying expected direction effect crucial one-sided selection models, specify cut-offs using one-sided p-values. Defaults \"positive\" (another option \"negative\"). model_type string specifying RoBMA ensemble. Defaults NULL. options \"PSMA\", \"PP\", \"2w\" override settings passed priors_effect, priors_heterogeneity, priors_effect, priors_effect_null, priors_heterogeneity_null, priors_bias_null, priors_effect. See details information different model types. rescale_priors re-scaling factor prior distributions. re-scaling factor allows adjust width default priors simultaneously. Defaults 1. priors_effect list prior distributions effect size (mu) parameter treated belonging alternative hypothesis. Defaults standard normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)). priors_heterogeneity list prior distributions heterogeneity tau parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"invgamma\", parameters = list(shape = 1, scale = .15)) based heterogeneities estimates psychology (van Erp et al. 2017) . priors_bias list prior distributions publication bias adjustment component treated belonging alternative hypothesis. Defaults list( prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1),     steps = c(0.05)),             prior_weights = 1/12), prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1, 1),     steps = c(0.05, 0.10)),       prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1),      steps = c(0.05)),             prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1),      steps = c(0.025, 0.05)),      prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1),      steps = c(0.05, 0.5)),        prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1, 1),      steps = c(0.025, 0.05, 0.5)), prior_weights = 1/12), prior_PET(distribution   = \"Cauchy\", parameters = list(0,1), truncation = list(0, Inf),      prior_weights = 1/4), prior_PEESE(distribution = \"Cauchy\", parameters = list(0,5), truncation = list(0, Inf),      prior_weights = 1/4) ), corresponding RoBMA-PSMA model introduce Bartoš et al. (2023) . priors_effect_null list prior distributions effect size (mu) parameter treated belonging null hypothesis. Defaults point null hypotheses zero, prior(distribution = \"point\", parameters = list(location = 0)). priors_heterogeneity_null list prior distributions heterogeneity tau parameter treated belonging null hypothesis. Defaults point null hypotheses zero (fixed effect meta-analytic models), prior(distribution = \"point\", parameters = list(location = 0)). priors_bias_null list prior weight functions omega parameter treated belonging null hypothesis. Defaults publication bias adjustment, prior_none(). priors_hierarchical list prior distributions correlation random effects (rho) parameter treated belonging alternative hypothesis. setting allows users fit hierarchical (three-level) meta-analysis study_ids supplied. Note experimental feature see News details. Defaults beta distribution prior(distribution = \"beta\", parameters = list(alpha = 1, beta = 1)). priors_hierarchical_null list prior distributions correlation random effects (rho) parameter treated belonging null hypothesis. Defaults NULL. algorithm string specifying algorithm used model averaging. Defaults \"bridge\" results estimating individual models using JAGS computing marginal likelihood using bridge sampling. alternative \"ss\" uses spike slab like parameterization approximate Bayesian model averaging single model. Note significantly sample, burnin, adapt iterations needed \"ss\" algorithm. chains number chains MCMC algorithm. sample number sampling iterations MCMC algorithm. Defaults 5000. burnin number burnin iterations MCMC algorithm. Defaults 2000. adapt number adaptation iterations MCMC algorithm. Defaults 500. thin thinning chains MCMC algorithm. Defaults 1. parallel whether individual models fitted parallel. Defaults FALSE. implementation completely stable might cause connection error. autofit whether model fitted convergence criteria (specified autofit_control) satisfied. Defaults TRUE. autofit_control allows pass autofit control settings set_autofit_control() function. See ?set_autofit_control options default settings. convergence_checks automatic convergence checks assess fitted models, passed set_convergence_checks() function. See ?set_convergence_checks options default settings. save whether models posterior distributions kept obtaining model-averaged result. Defaults \"\" remove anything. Set \"min\" significantly reduce size final object, however, model diagnostics manipulation object possible. seed seed set model fitting, marginal likelihood computation, posterior mixing reproducibility results. Defaults NULL - seed set. silent whether print messages regarding fitting process suppressed. Defaults TRUE. Note parallel = TRUE also suppresses messages. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a Robust Bayesian Meta-Analysis — RoBMA","text":"RoBMA returns object class 'RoBMA'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a Robust Bayesian Meta-Analysis — RoBMA","text":"default settings RoBMA 2.0 package corresponds RoBMA-PSMA ensemble proposed Bartoš et al. (2023) . previous versions package (.e., RoBMA < 2.0) used specifications proposed Maier et al. (2023)  (specification can easily obtained setting model_type = \"2w\". RoBMA-PP specification Bartoš et al. (2023)  can obtained setting model_type = \"PP\". complete list default prior distributions described set_default_priors(). Note inclusion PET PEESE style publication bias adjustments models might pick small-study effects. remove true heterogeneity due study design, sub-populations, treatments etc. potentially causing small-study effects, use meta-regression via RoBMA.reg() function, remove PET PEESE style models publication bias adjustment component ensemble. vignette(\"CustomEnsembles\", package = \"RoBMA\") vignette(\"ReproducingBMA\", package = \"RoBMA\") vignettes  describe use RoBMA() fit custom meta-analytic ensembles (see prior(), prior_weightfunction(), prior_PET(), prior_PEESE() information prior distributions). RoBMA function first generates models combination provided priors model parameters. , individual models fitted using autorun.jags function. marginal likelihood computed using bridge_sampler function. individual models combined ensemble using posterior model probabilities using BayesTools package. Generic summary.RoBMA(), print.RoBMA(), plot.RoBMA() functions provided facilitate manipulation ensemble. visual check individual model diagnostics can obtained using diagnostics() function. fitted model can updated modified update.RoBMA() function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a Robust Bayesian Meta-Analysis — RoBMA","text":"Bartoš F, Maier M, Wagenmakers E, Doucouliagos H, Stanley TD (2023). “Robust Bayesian meta-analysis: Model-averaging across complementary publication bias adjustment methods.” Research Synthesis Methods, 14(1), 99–116. doi:10.1002/jrsm.1594 . Maier M, Bartoš F, Wagenmakers E (2023). “Robust Bayesian Meta-Analysis: Addressing publication bias model-averaging.” Psychological Methods, 28(1), 107–122. doi:10.1037/met0000405 . van Erp S, Verhagen J, Grasman RP, Wagenmakers E (2017). “Estimates -study heterogeneity 705 meta-analyses reported Psychological Bulletin 1990–2013.” Journal Open Psychology Data, 5(1), 1–5. doi:10.5334/jopd.33 .","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a Robust Bayesian Meta-Analysis — RoBMA","text":"","code":"if (FALSE) { # \\dontrun{ # using the example data from Bem 2011 and fitting the default (RoBMA-PSMA) model fit <- RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study)  # in order to speed up the process, we can turn the parallelization on fit <- RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study, parallel = TRUE)  # we can get a quick overview of the model coefficients just by printing the model fit  # a more detailed overview using the summary function (see '?summary.RoBMA' for all options) summary(fit)  # the model-averaged effect size estimate can be visualized using the plot function # (see ?plot.RoBMA for all options) plot(fit, parameter = \"mu\")  # forest plot can be obtained with the forest function (see ?forest for all options) forest(fit)  # plot of the individual model estimates can be obtained with the plot_models function #  (see ?plot_models for all options) plot_models(fit)  # diagnostics for the individual parameters in individual models can be obtained using diagnostics # function (see 'diagnostics' for all options) diagnostics(fit, parameter = \"mu\", type = \"chains\")  # the RoBMA-PP can be fitted with addition of the 'model_type' argument fit_PP <- RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study, model_type = \"PP\")  # as well as the original version of RoBMA (with two weightfunctions) fit_original <- RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study,                       model_type = \"2w\")  # or different prior distribution for the effect size (e.g., a half-normal distribution) # (see 'vignette(\"CustomEnsembles\")' for a detailed guide on specifying a custom model ensemble) fit <- RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study,              priors_effect = prior(\"normal\", parameters = list(0, 1),                                    truncation = list(0, Inf))) } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — RoBMA.reg","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — RoBMA.reg","text":"RoBMA used estimate robust Bayesian meta-regression. interface allows complete customization ensemble different prior (list prior) distributions component.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — RoBMA.reg","text":"","code":"RoBMA.reg(   formula,   data,   test_predictors = TRUE,   study_names = NULL,   study_ids = NULL,   transformation = if (any(colnames(data) != \"y\")) \"fishers_z\" else \"none\",   prior_scale = if (any(colnames(data) != \"y\")) \"cohens_d\" else \"none\",   standardize_predictors = TRUE,   effect_direction = \"positive\",   priors = NULL,   model_type = NULL,   rescale_priors = 1,   priors_effect = set_default_priors(\"effect\", rescale = rescale_priors),   priors_heterogeneity = set_default_priors(\"heterogeneity\", rescale = rescale_priors),   priors_bias = set_default_priors(\"bias\", rescale = rescale_priors),   priors_effect_null = set_default_priors(\"effect\", null = TRUE),   priors_heterogeneity_null = set_default_priors(\"heterogeneity\", null = TRUE),   priors_bias_null = set_default_priors(\"bias\", null = TRUE),   priors_hierarchical = set_default_priors(\"hierarchical\"),   priors_hierarchical_null = set_default_priors(\"hierarchical\", null = TRUE),   prior_covariates = set_default_priors(\"covariates\", rescale = rescale_priors),   prior_covariates_null = set_default_priors(\"covariates\", null = TRUE),   prior_factors = set_default_priors(\"factors\", rescale = rescale_priors),   prior_factors_null = set_default_priors(\"factors\", null = TRUE),   algorithm = \"bridge\",   chains = 3,   sample = 5000,   burnin = 2000,   adapt = 500,   thin = 1,   parallel = FALSE,   autofit = TRUE,   autofit_control = set_autofit_control(),   convergence_checks = set_convergence_checks(),   save = \"all\",   seed = NULL,   silent = TRUE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — RoBMA.reg","text":"formula formula meta-regression model data data.frame containing data meta-regression. Note column names correspond effect sizes (d, logOR, , r, z), measure sampling variability (se, v, n, lCI, uCI, t), predictors. See combine_data() complete list reserved names additional information specifying input data. test_predictors vector predictor names test presence moderation (.e., assigned null alternative prior distributions). Defaults TRUE, predictors tested using default prior distributions (.e., prior_covariates, prior_covariates_null, prior_factors, prior_factors_null). estimate adjust effect predictors use FALSE. priors specified, settings test_predictors overridden. study_names optional argument names studies study_ids optional argument specifying dependency studies (using multilevel model). Defaults NULL studies independent. transformation transformation applied supplied effect sizes fitting individual models. Defaults \"fishers_z\". highly recommend using \"fishers_z\" transformation since variance stabilizing measure bias PET PEESE style models. options \"cohens_d\", correlation coefficient \"r\" \"logOR\". Supplying \"none\" treat effect sizes unstandardized refrain transformations. prior_scale effect size scale used define priors. Defaults \"cohens_d\". options \"fishers_z\", correlation coefficient \"r\", \"logOR\". prior scale need match effect sizes measure - samples prior distributions internally transformed match transformation data. prior_scale corresponds effect size scale default output, can changed within summary function. standardize_predictors whether continuous predictors standardized prior estimating model. Defaults TRUE. Continuous predictor standardization important applying default prior distributions continuous predictors. Note resulting output corresponds standardized meta-regression coefficients. effect_direction expected direction effect. Correctly specifying expected direction effect crucial one-sided selection models, specify cut-offs using one-sided p-values. Defaults \"positive\" (another option \"negative\"). priors named list prior distributions predictor (names corresponding predictors). allows users specify null alternative hypothesis prior distributions predictor assigning corresponding element named list another named list (\"null\" \"alt\"). one prior specified given parameter, assumed correspond alternative hypotheses default null hypothesis specified (.e., prior_covariates_null prior_factors_null). named list one named prior distribution provided (either \"null\" \"alt\"), prior distribution used default distribution filled . Parameters without specified prior distributions assumed adjusted using default alternative hypothesis prior distributions (.e., prior_covariates prior_factors). priors specified, test_predictors ignored. model_type string specifying RoBMA ensemble. Defaults NULL. options \"PSMA\", \"PP\", \"2w\" override settings passed priors_effect, priors_heterogeneity, priors_effect, priors_effect_null, priors_heterogeneity_null, priors_bias_null, priors_effect. See details information different model types. rescale_priors re-scaling factor prior distributions. re-scaling factor allows adjust width default priors simultaneously. Defaults 1. priors_effect list prior distributions effect size (mu) parameter treated belonging alternative hypothesis. Defaults standard normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 1)). priors_heterogeneity list prior distributions heterogeneity tau parameter treated belonging alternative hypothesis. Defaults prior(distribution = \"invgamma\", parameters = list(shape = 1, scale = .15)) based heterogeneities estimates psychology (van Erp et al. 2017) . priors_bias list prior distributions publication bias adjustment component treated belonging alternative hypothesis. Defaults list( prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1),     steps = c(0.05)),             prior_weights = 1/12), prior_weightfunction(distribution = \"two.sided\", parameters = list(alpha = c(1, 1, 1),     steps = c(0.05, 0.10)),       prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1),      steps = c(0.05)),             prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1),      steps = c(0.025, 0.05)),      prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1),      steps = c(0.05, 0.5)),        prior_weights = 1/12), prior_weightfunction(distribution = \"one.sided\", parameters = list(alpha = c(1, 1, 1, 1),      steps = c(0.025, 0.05, 0.5)), prior_weights = 1/12), prior_PET(distribution   = \"Cauchy\", parameters = list(0,1), truncation = list(0, Inf),      prior_weights = 1/4), prior_PEESE(distribution = \"Cauchy\", parameters = list(0,5), truncation = list(0, Inf),      prior_weights = 1/4) ), corresponding RoBMA-PSMA model introduce Bartoš et al. (2023) . priors_effect_null list prior distributions effect size (mu) parameter treated belonging null hypothesis. Defaults point null hypotheses zero, prior(distribution = \"point\", parameters = list(location = 0)). priors_heterogeneity_null list prior distributions heterogeneity tau parameter treated belonging null hypothesis. Defaults point null hypotheses zero (fixed effect meta-analytic models), prior(distribution = \"point\", parameters = list(location = 0)). priors_bias_null list prior weight functions omega parameter treated belonging null hypothesis. Defaults publication bias adjustment, prior_none(). priors_hierarchical list prior distributions correlation random effects (rho) parameter treated belonging alternative hypothesis. setting allows users fit hierarchical (three-level) meta-analysis study_ids supplied. Note experimental feature see News details. Defaults beta distribution prior(distribution = \"beta\", parameters = list(alpha = 1, beta = 1)). priors_hierarchical_null list prior distributions correlation random effects (rho) parameter treated belonging null hypothesis. Defaults NULL. prior_covariates prior distributions regression parameter continuous covariates effect size alternative hypothesis (unless set explicitly priors). Defaults relatively wide normal distribution prior(distribution = \"normal\", parameters = list(mean = 0, sd = 0.25)). prior_covariates_null prior distributions regression parameter continuous covariates effect size null hypothesis (unless set explicitly priors). Defaults effect prior(\"spike\",  parameters = list(location = 0)). prior_factors prior distributions regression parameter categorical covariates effect size alternative hypothesis (unless set explicitly priors). Defaults relatively wide multivariate normal distribution specifying differences mean contrasts prior_factor(\"mnormal\", parameters = list(mean = 0, sd = 0.25), contrast = \"meandif\"). prior_factors_null prior distributions regression parameter categorical covariates effect size null hypothesis (unless set explicitly priors). Defaults effect prior(\"spike\",  parameters = list(location = 0)). algorithm string specifying algorithm used model averaging. Defaults \"bridge\" results estimating individual models using JAGS computing marginal likelihood using bridge sampling. alternative \"ss\" uses spike slab like parameterization approximate Bayesian model averaging single model. Note significantly sample, burnin, adapt iterations needed \"ss\" algorithm. chains number chains MCMC algorithm. sample number sampling iterations MCMC algorithm. Defaults 5000. burnin number burnin iterations MCMC algorithm. Defaults 2000. adapt number adaptation iterations MCMC algorithm. Defaults 500. thin thinning chains MCMC algorithm. Defaults 1. parallel whether individual models fitted parallel. Defaults FALSE. implementation completely stable might cause connection error. autofit whether model fitted convergence criteria (specified autofit_control) satisfied. Defaults TRUE. autofit_control allows pass autofit control settings set_autofit_control() function. See ?set_autofit_control options default settings. convergence_checks automatic convergence checks assess fitted models, passed set_convergence_checks() function. See ?set_convergence_checks options default settings. save whether models posterior distributions kept obtaining model-averaged result. Defaults \"\" remove anything. Set \"min\" significantly reduce size final object, however, model diagnostics manipulation object possible. seed seed set model fitting, marginal likelihood computation, posterior mixing reproducibility results. Defaults NULL - seed set. silent whether print messages regarding fitting process suppressed. Defaults TRUE. Note parallel = TRUE also suppresses messages. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — RoBMA.reg","text":"RoBMA.reg returns object class 'RoBMA.reg'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — RoBMA.reg","text":"vignette(\"/MetaRegression\", package = \"RoBMA\") vignette describes use RoBMA.reg() function fit Bayesian meta-regression ensembles. See Bartoš et al. (2025)  details methodology RoBMA() details function options. default, function standardizes continuous predictors. , output interpreted standardized meta-regression coefficients. RoBMA.reg function first generates models combination provided priors model parameters. , individual models fitted using autorun.jags function. marginal likelihood computed using bridge_sampler function. individual models combined ensemble using posterior model probabilities using BayesTools package. Generic summary.RoBMA(), print.RoBMA(), plot.RoBMA() functions provided facilitate manipulation ensemble. visual check individual model diagnostics can obtained using diagnostics() function. fitted model can updated modified update.RoBMA() function. Estimated marginal means can computed marginal_summary() function visualized marginal_plot() function.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.reg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — RoBMA.reg","text":"Bartoš F, Maier M, Stanley TD, Wagenmakers E (2025). “Robust Bayesian meta-regression: Model-averaged moderation analysis presence publication bias.” Psychological Methods. doi:10.1037/met0000737 . Bartoš F, Maier M, Wagenmakers E, Doucouliagos H, Stanley TD (2023). “Robust Bayesian meta-analysis: Model-averaging across complementary publication bias adjustment methods.” Research Synthesis Methods, 14(1), 99–116. doi:10.1002/jrsm.1594 . van Erp S, Verhagen J, Grasman RP, Wagenmakers E (2017). “Estimates -study heterogeneity 705 meta-analyses reported Psychological Bulletin 1990–2013.” Journal Open Psychology Data, 5(1), 1–5. doi:10.5334/jopd.33 .","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA.reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a Robust Bayesian Meta-Analysis Meta-Regression — RoBMA.reg","text":"","code":"if (FALSE) { # \\dontrun{ # using the example data from Andrews et al. (2021) and reproducing the example from # Bartos et al. (2024) with measure and age covariate.   # note the the Andrews2021 data.frame columns identify the effect size \"r\" and  # the standard error \"se\" of the effect size that are used to estimate the model  fit_RoBMA <- RoBMA.reg(~ measure + age, data = Andrews2021, parallel = TRUE, seed = 1)   # summarize the results  summary(fit_RoBMA, output_scale = \"r\")   # compute effect size estimates for each group  marginal_summary(fit_RoBMA, output_scale = \"r\")   # visualize the effect size estimates for each group  marginal_plot(fit_RoBMA, parameter = \"measure\", output_scale = \"r\", lwd = 2) } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Control MCMC fitting process — RoBMA_control","title":"Control MCMC fitting process — RoBMA_control","text":"Controls settings autofit process MCMC JAGS sampler (specifies termination criteria), values convergence checks.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control MCMC fitting process — RoBMA_control","text":"","code":"set_autofit_control(   max_Rhat = 1.05,   min_ESS = 500,   max_error = NULL,   max_SD_error = NULL,   max_time = list(time = 60, unit = \"mins\"),   sample_extend = 1000,   restarts = 10,   max_extend = 10 )  set_convergence_checks(   max_Rhat = 1.05,   min_ESS = 500,   max_error = NULL,   max_SD_error = NULL,   remove_failed = FALSE,   balance_probability = TRUE )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control MCMC fitting process — RoBMA_control","text":"max_Rhat maximum value R-hat diagnostic. Defaults 1.05. min_ESS minimum estimated sample size. Defaults 500. max_error maximum value MCMC error. Defaults NULL. aware PEESE publication bias adjustment can estimates different scale rest output, resulting relatively large max MCMC error. max_SD_error maximum value proportion MCMC error estimated SD parameter. Defaults NULL. max_time list time unit specifying maximum autofitting process per model. Passed difftime function (possible units \"secs\", \"mins\", \"hours\", \"days\", \"weeks\", \"years\"). Defaults list(time = 60, unit = \"mins\"). sample_extend number samples extend fitting process criteria satisfied. Defaults 1000. restarts number times new initial values generated case model fails initialize. Defaults 10. max_extend number times automatic fitting function stopped. remove_failed whether models satisfying convergence checks removed inference. Defaults FALSE - warning raised. balance_probability whether prior model probability balanced across combinations models H0/H1 effect / heterogeneity / bias case non-convergence. Defaults TRUE.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control MCMC fitting process — RoBMA_control","text":"set_autofit_control returns list autofit control settings set_convergence_checks returns list convergence checks settings.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options for the RoBMA package — RoBMA_options","title":"Options for the RoBMA package — RoBMA_options","text":"placeholder object functions RoBMA package. (adapted runjags R package).","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options for the RoBMA package — RoBMA_options","text":"","code":"RoBMA.options(...)  RoBMA.get_option(name)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options for the RoBMA package — RoBMA_options","text":"... named option(s) change - list available options, see details . name name option get current value - list available options, see details .","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/RoBMA_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Options for the RoBMA package — RoBMA_options","text":"current value available RoBMA options (applying changes specified) returned invisibly named list.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/sample_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample sizes to standard errors calculations — sample_sizes","title":"Sample sizes to standard errors calculations — sample_sizes","text":"Functions transforming standard errors sample sizes (assuming equal sample sizes per group).","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/sample_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample sizes to standard errors calculations — sample_sizes","text":"","code":"se_d(d, n)  n_d(d, se)  se_r(r, n)  n_r(r, se)  se_z(n)  n_z(se)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/sample_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample sizes to standard errors calculations — sample_sizes","text":"d Cohen's d n sample size corresponding effect size se standard error corresponding effect size r correlation coefficient","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/sample_sizes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample sizes to standard errors calculations — sample_sizes","text":"Calculations Cohen's d, Fisher's z, log() based (Borenstein et al. 2011) . Calculations correlation coefficient modified make standard error corresponding computed Fisher's z scale sample size (order make transformations consistent). case direct transformation available, transformations chained provide effect size interest. Note sample size standard error calculation log() available. standard error highly dependent odds within groups sample sizes individual events required. Theoretically, sample size obtained transforming effect size standard error different measure obtaining sample size using corresponding function, however, leads poor approximation recommended.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/sample_sizes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample sizes to standard errors calculations — sample_sizes","text":"Borenstein M, Hedges LV, Higgins JP, Rothstein HR (2011). Introduction meta-analysis. John Wiley & Sons.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_binomial_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default prior distributions for binomial meta-analytic models — set_default_binomial_priors","title":"Set default prior distributions for binomial meta-analytic models — set_default_binomial_priors","text":"Set default prior distributions BiBMA models.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_binomial_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default prior distributions for binomial meta-analytic models — set_default_binomial_priors","text":"","code":"set_default_binomial_priors(parameter, null = FALSE, rescale = 1)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_binomial_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default prior distributions for binomial meta-analytic models — set_default_binomial_priors","text":"parameter character string specifying parameter prior distribution set. Available options \"effect\", \"heterogeneity\", \"baseline\", \"covariates\", \"factors\". null logical indicating whether prior distribution set null hypothesis. Defaults FALSE. rescale numeric value specifying re-scaling factor default prior distributions. Defaults 1. Allows convenient re-scaling prior distributions simultaneously.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_binomial_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default prior distributions for binomial meta-analytic models — set_default_binomial_priors","text":"prior distribution object list prior distribution objects.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_binomial_priors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set default prior distributions for binomial meta-analytic models — set_default_binomial_priors","text":"default prior based binary outcome meta-analyses Cochrane Database Systematic Reviews outlined Bartoš et al. (2023) . Specifically, prior distributions : alternative hypothesis: Effect: T distribution mean 0, scale 0.58, 4 degrees freedom. Heterogeneity: Inverse gamma distribution shape 1.77 scale 0.55. Baseline: prior distribution. Standardized continuous covariates: Normal distribution mean 0 standard deviation 0.29. Factors (via -level differences grand mean): Normal distribution mean 0 standard deviation 0.29. null hypothesis: Effect: Point distribution 0. Heterogeneity: Point distribution 0. Baseline: Independent uniform distributions. Standardized continuous covariates: Point distribution 0. Factors (via -level differences grand mean): Point distribution 0. rescaling factor adjusts width effect, heterogeneity, covariates, factor, PEESE-style model prior distributions. PET-style weight function prior distributions scale-invariant.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_binomial_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set default prior distributions for binomial meta-analytic models — set_default_binomial_priors","text":"","code":"set_default_binomial_priors(\"effect\") #> Student-t(0, 0.58, 4) set_default_binomial_priors(\"heterogeneity\") #> InvGamma(1.77, 0.55) set_default_binomial_priors(\"baseline\") #> NULL"},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default prior distributions — set_default_priors","title":"Set default prior distributions — set_default_priors","text":"Set default prior distributions RoBMA models.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default prior distributions — set_default_priors","text":"","code":"set_default_priors(parameter, null = FALSE, rescale = 1)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default prior distributions — set_default_priors","text":"parameter character string specifying parameter prior distribution set. Available options \"effect\", \"heterogeneity\", \"bias\", \"hierarchical\", \"covariates\", \"factors\". null logical indicating whether prior distribution set null hypothesis. Defaults FALSE. rescale numeric value specifying re-scaling factor default prior distributions. Defaults 1. Allows convenient re-scaling prior distributions simultaneously.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default prior distributions — set_default_priors","text":"prior distribution object list prior distribution objects.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_priors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set default prior distributions — set_default_priors","text":"default prior distributions corresponds specification RoBMA-PSMA RoBMA-regression outlined Bartoš et al. (2023)  Bartoš et al. (2025) . Specifically, prior distributions : alternative hypothesis: Effect: Normal distribution mean 0 standard deviation 1. Heterogeneity: Inverse gamma distribution shape 1 scale 0.15. Bias: list 8 prior distributions defining publication bias adjustments: Two-sided: Weight function steps 0.05. Two-sided: Weight function steps 0.05 0.1. One-sided: Weight function steps 0.05. One-sided: Weight function steps 0.025 0.05. One-sided: Weight function steps 0.05 0.5. One-sided: Weight function steps 0.025, 0.05, 0.5. PET-type model regression coefficient: Cauchy distribution location 0 scale 1. PEESE-type model regression coefficient: Cauchy distribution location 0 scale 5. weight functions use unit cumulative Dirichlet prior distribution relative prior probabilities. Standardized continuous covariates: Normal distribution mean 0 standard deviation 0.25. Factors (via -level differences grand mean): Normal distribution mean 0 standard deviation 0.25. null hypothesis: Effect: Point distribution 0. Heterogeneity: Point distribution 0. Bias: prior distribution. Standardized continuous covariates: Point distribution 0. Factors (via -level differences grand mean): Point distribution 0. rescaling factor adjusts width effect, heterogeneity, covariates, factor, PEESE-style model prior distributions. PET-style weight function prior distributions scale-invariant.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/set_default_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set default prior distributions — set_default_priors","text":"","code":"set_default_priors(\"effect\") #> Normal(0, 1) set_default_priors(\"heterogeneity\") #> InvGamma(1, 0.15) set_default_priors(\"bias\") #> [[1]] #> omega[two-sided: .05] ~ CumDirichlet(1, 1) #> [[2]] #> omega[two-sided: .1, .05] ~ CumDirichlet(1, 1, 1) #> [[3]] #> omega[one-sided: .05] ~ CumDirichlet(1, 1) #> [[4]] #> omega[one-sided: .05, .025] ~ CumDirichlet(1, 1, 1) #> [[5]] #> omega[one-sided: .5, .05] ~ CumDirichlet(1, 1, 1) #> [[6]] #> omega[one-sided: .5, .05, .025] ~ CumDirichlet(1, 1, 1, 1) #> [[7]] #> PET ~ Cauchy(0, 1)[0, Inf] #> [[8]] #> PEESE ~ Cauchy(0, 5)[0, Inf]"},{"path":"https://https://fbartos.github.io/RoBMA/reference/standard_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard errors transformations — standard_errors","title":"Standard errors transformations — standard_errors","text":"Functions transforming standard errors different effect size measures.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/standard_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard errors transformations — standard_errors","text":"","code":"se_d2se_logOR(se_d, logOR)  se_d2se_r(se_d, d)  se_r2se_d(se_r, r)  se_logOR2se_d(se_logOR, logOR)  se_d2se_z(se_d, d)  se_r2se_z(se_r, r)  se_r2se_logOR(se_r, r)  se_logOR2se_r(se_logOR, logOR)  se_logOR2se_z(se_logOR, logOR)  se_z2se_d(se_z, z)  se_z2se_r(se_z, z)  se_z2se_logOR(se_z, z)"},{"path":"https://https://fbartos.github.io/RoBMA/reference/standard_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard errors transformations — standard_errors","text":"se_d standard error Cohen's d logOR log(odds ratios) d Cohen's d se_r standard error correlation coefficient r correlation coefficient se_logOR standard error log(odds ratios) se_z standard error Fisher's z z Fisher's z","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/standard_errors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard errors transformations — standard_errors","text":"Transformations Cohen's d, Fisher's z, log() based (Borenstein et al. 2011) . Calculations correlation coefficient modified make standard error corresponding computed Fisher's z scale sample size (order make transformations consistent). case direct transformation available, transformations chained provide effect size interest. important keep mind transformations approximations true values. experience, se_d2se_z works well values se(Cohen's d) < 0.5. forget effect sizes standardized variance Cohen's d = 1. Therefore, standard error study larger unless participants provided negative information (course, variance dependent effect size well, , can therefore larger). setting prior distributions, attempt transform standard normal distribution Cohen's d (mean = 0, sd = 1) normal distribution Fisher's z mean 0 sd = se_d2se_z(0, 1). approximation work well range values. Instead, approximate sd distribution Fisher's z using samples way: sd(d2z(rnorm(10000, 0, 1))) , specify distribution Cohen's d directly.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/standard_errors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standard errors transformations — standard_errors","text":"Borenstein M, Hedges LV, Higgins JP, Rothstein HR (2011). Introduction meta-analysis. John Wiley & Sons.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary.RoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize fitted RoBMA object — summary.RoBMA","title":"Summarize fitted RoBMA object — summary.RoBMA","text":"summary.RoBMA creates summary tables RoBMA object.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary.RoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize fitted RoBMA object — summary.RoBMA","text":"","code":"# S3 method for class 'RoBMA' summary(   object,   type = \"ensemble\",   conditional = FALSE,   output_scale = NULL,   probs = c(0.025, 0.975),   logBF = FALSE,   BF01 = FALSE,   short_name = FALSE,   remove_spike_0 = FALSE,   standardized_coefficients = TRUE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary.RoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize fitted RoBMA object — summary.RoBMA","text":"object fitted RoBMA object type whether show overall RoBMA results (\"ensemble\"), overview individual models (\"models\"), overview individual models MCMC diagnostics (\"diagnostics\"), detailed summary individual models (\"individual\"). Can abbreviated first letters. conditional show conditional estimates (assuming alternative true). Defaults FALSE. available type == \"ensemble\". output_scale transform  meta-analytic estimates different scale. Defaults NULL returns scale model estimated . probs quantiles posterior samples displayed. Defaults c(.025, .975) logBF show log Bayes factors. Defaults FALSE. BF01 show Bayes factors support null hypotheses. Defaults FALSE. short_name whether priors names shortened first (couple) letters. Defaults FALSE. remove_spike_0 whether spike prior distributions location zero omitted summary. Defaults FALSE. standardized_coefficients whether show standardized meta-regression coefficients. Defaults TRUE. set FALSE, raw (unstandardized) meta-regression coefficients returned continuous predictors. affects meta-regression models. ... additional arguments","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary.RoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize fitted RoBMA object — summary.RoBMA","text":"summary.RoBMA returns list tables class 'BayesTools_table'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary.RoBMA.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Summarize fitted RoBMA object — summary.RoBMA","text":"See diagnostics() visual convergence checks individual models.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary.RoBMA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize fitted RoBMA object — summary.RoBMA","text":"","code":"if (FALSE) { # \\dontrun{ # using the example data from Anderson et al. 2010 and fitting the default model # (note that the model can take a while to fit) fit <- RoBMA(r = Anderson2010$r, n = Anderson2010$n, study_names = Anderson2010$labels)  # summary can provide many details about the model summary(fit)  # estimates from the conditional models can be obtained with summary(fit, conditional = TRUE)  # overview of the models and their prior and posterior probability, marginal likelihood, # and inclusion Bayes factor can be obtained with summary(fit, type = \"models\")  # diagnostics overview, containing the maximum R-hat, minimum ESS, maximum MCMC error, and # maximum MCMC error / sd across parameters for each individual model can be obtained with summary(fit, type = \"diagnostics\")  # summary of individual models and their parameters can be further obtained by summary(fit, type = \"individual\")  # for meta-regression models, raw (unstandardized) coefficients can be obtained with # data(Kroupova2021)  # example data with predictors # fit_reg <- RoBMA.reg(r ~ age, data = Kroupova2021[1:20,]) # summary(fit_reg, standardized_coefficients = FALSE) } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary_heterogeneity.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizes heterogeneity of a RoBMA model — summary_heterogeneity","title":"Summarizes heterogeneity of a RoBMA model — summary_heterogeneity","text":"Computes prediction interval, absolute heterogeneity  (tau, tau^2), relative measures heterogeneity (^2, H^2) fitted RoBMA object.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary_heterogeneity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizes heterogeneity of a RoBMA model — summary_heterogeneity","text":"","code":"summary_heterogeneity(   object,   type = \"ensemble\",   conditional = FALSE,   output_scale = NULL,   probs = c(0.025, 0.975),   short_name = FALSE,   remove_spike_0 = FALSE )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary_heterogeneity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizes heterogeneity of a RoBMA model — summary_heterogeneity","text":"object fitted RoBMA object type whether show overall RoBMA results (\"ensemble\") detailed summary individual models (\"individual\"). Can abbreviated first letters. conditional show conditional estimates (assuming alternative true). Defaults FALSE. available type == \"ensemble\". output_scale transform  meta-analytic estimates different scale. Defaults NULL returns scale model estimated . probs quantiles posterior samples displayed. Defaults c(.025, .975) short_name whether priors names shortened first (couple) letters. Defaults FALSE. remove_spike_0 whether spike prior distributions location zero omitted summary. Defaults FALSE.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary_heterogeneity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizes heterogeneity of a RoBMA model — summary_heterogeneity","text":"summary_heterogeneity returns list tables class 'BayesTools_table'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/summary_heterogeneity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarizes heterogeneity of a RoBMA model — summary_heterogeneity","text":"conditional argument allows computing conditional prediction interval based models assuming presence effect conditional heterogeneity estimates tau, tau^2, ^2, H^2 assuming presence heterogeneity. Relative heterogeneity measures (^2 H^2) available BiBMA models.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/true_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute estimated true effect sizes — true_effects","title":"Compute estimated true effect sizes — true_effects","text":"true_effects computes estimated true effect size fitted RoBMA object. estimates correspond frequentist \"Best Linear Unbiased Predictions (BLUPs)\". available normal-normal models estimated using spike--slab algorithm (.e., algorithm = \"ss\").","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/true_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute estimated true effect sizes — true_effects","text":"","code":"true_effects(   object,   conditional = FALSE,   output_scale = NULL,   probs = c(0.025, 0.975),   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/true_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute estimated true effect sizes — true_effects","text":"object fitted RoBMA object conditional show conditional estimates (assuming alternative true). Defaults FALSE. available type == \"ensemble\". output_scale transform  meta-analytic estimates different scale. Defaults NULL returns scale model estimated . probs quantiles posterior samples displayed. Defaults c(.025, .975) ... additional arguments","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/true_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute estimated true effect sizes — true_effects","text":"pooled_effect returns list tables class 'BayesTools_table'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/true_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute estimated true effect sizes — true_effects","text":"conditional estimate calculated conditional presence effect (meta-analysis) intercept (meta-regression).","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.BiBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates a fitted BiBMA object — update.BiBMA","title":"Updates a fitted BiBMA object — update.BiBMA","text":"update.BiBMA can used add additional model existing \"BiBMA\" object specifying either null alternative prior parameter prior odds model (prior_weights), see vignette(\"CustomEnsembles\") vignette, change prior odds fitted models specifying vector prior_weights length fitted models, refitting models failed converge updated settings control parameters, changing convergence criteria recalculating ensemble results specifying new control argument setting refit_failed == FALSE.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.BiBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates a fitted BiBMA object — update.BiBMA","text":"","code":"# S3 method for class 'BiBMA' update(   object,   refit_failed = TRUE,   extend_all = FALSE,   prior_effect = NULL,   prior_heterogeneity = NULL,   prior_baseline = NULL,   prior_weights = NULL,   prior_effect_null = NULL,   prior_heterogeneity_null = NULL,   prior_baseline_null = NULL,   study_names = NULL,   chains = NULL,   adapt = NULL,   burnin = NULL,   sample = NULL,   thin = NULL,   autofit = NULL,   parallel = NULL,   autofit_control = NULL,   convergence_checks = NULL,   save = \"all\",   seed = NULL,   silent = TRUE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.BiBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates a fitted BiBMA object — update.BiBMA","text":"object fitted BiBMA object refit_failed whether failed models refitted. Relevant new priors prior_weights supplied. Defaults TRUE. extend_all extend sampling fitted models based \"sample_extend\" argument set_autofit_control() function. Defaults FALSE. prior_effect prior distribution effect size (mu) parameter treated belonging alternative hypothesis. Defaults NULL. prior_heterogeneity prior distribution heterogeneity tau parameter treated belonging alternative hypothesis. Defaults NULL. prior_baseline prior distribution intercepts (pi) study treated belonging alternative hypothesis. Defaults NULL. prior_weights either single value specifying prior model weight newly specified model using priors argument, vector length already fitted models update prior weights. prior_effect_null prior distribution effect size (mu) parameter treated belonging null hypothesis. Defaults NULL. prior_heterogeneity_null prior distribution heterogeneity tau parameter treated belonging null hypothesis. Defaults NULL. prior_baseline_null prior distribution intercepts (pi) study treated belonging null hypothesis. Defaults NULL. study_names optional argument names studies chains number chains MCMC algorithm. adapt number adaptation iterations MCMC algorithm. Defaults 500. burnin number burnin iterations MCMC algorithm. Defaults 2000. sample number sampling iterations MCMC algorithm. Defaults 5000. thin thinning chains MCMC algorithm. Defaults 1. autofit whether model fitted convergence criteria (specified autofit_control) satisfied. Defaults TRUE. parallel whether individual models fitted parallel. Defaults FALSE. implementation completely stable might cause connection error. autofit_control allows pass autofit control settings set_autofit_control() function. See ?set_autofit_control options default settings. convergence_checks automatic convergence checks assess fitted models, passed set_convergence_checks() function. See ?set_convergence_checks options default settings. save whether models posterior distributions kept obtaining model-averaged result. Defaults \"\" remove anything. Set \"min\" significantly reduce size final object, however, model diagnostics manipulation object possible. seed seed set model fitting, marginal likelihood computation, posterior mixing reproducibility results. Defaults NULL - seed set. silent whether print messages regarding fitting process suppressed. Defaults TRUE. Note parallel = TRUE also suppresses messages. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.BiBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates a fitted BiBMA object — update.BiBMA","text":"BiBMA returns object class 'BiBMA'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.BiBMA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Updates a fitted BiBMA object — update.BiBMA","text":"See BiBMA() details.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.RoBMA.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates a fitted RoBMA object — update.RoBMA","title":"Updates a fitted RoBMA object — update.RoBMA","text":"update.RoBMA can used add additional model existing \"RoBMA\" object specifying either null alternative prior parameter prior odds model (prior_weights), see vignette(\"CustomEnsembles\") vignette, change prior odds fitted models specifying vector prior_weights length fitted models, refitting models failed converge updated settings control parameters, changing convergence criteria recalculating ensemble results specifying new control argument setting refit_failed == FALSE.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.RoBMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates a fitted RoBMA object — update.RoBMA","text":"","code":"# S3 method for class 'RoBMA' update(   object,   refit_failed = TRUE,   extend_all = FALSE,   prior_effect = NULL,   prior_heterogeneity = NULL,   prior_bias = NULL,   prior_hierarchical = NULL,   prior_weights = NULL,   prior_effect_null = NULL,   prior_heterogeneity_null = NULL,   prior_bias_null = NULL,   prior_hierarchical_null = NULL,   study_names = NULL,   chains = NULL,   adapt = NULL,   burnin = NULL,   sample = NULL,   thin = NULL,   autofit = NULL,   parallel = NULL,   autofit_control = NULL,   convergence_checks = NULL,   save = \"all\",   seed = NULL,   silent = TRUE,   ... )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.RoBMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates a fitted RoBMA object — update.RoBMA","text":"object fitted RoBMA object refit_failed whether failed models refitted. Relevant new priors prior_weights supplied. Defaults TRUE. extend_all extend sampling fitted models based \"sample_extend\" argument set_autofit_control() function. Defaults FALSE. prior_effect prior distribution effect size (mu) parameter treated belonging alternative hypothesis. Defaults NULL. prior_heterogeneity prior distribution heterogeneity tau parameter treated belonging alternative hypothesis. Defaults NULL. prior_bias prior distribution publication bias adjustment component treated belonging alternative hypothesis. Defaults NULL. prior_hierarchical prior distribution correlation random effects (rho) parameter treated belonging alternative hypothesis. setting allows users fit hierarchical (three-level) meta-analysis study_ids supplied. Note experimental feature see News details. Defaults beta distribution prior(distribution = \"beta\", parameters = list(alpha = 1, beta = 1)). prior_weights either single value specifying prior model weight newly specified model using priors argument, vector length already fitted models update prior weights. prior_effect_null prior distribution effect size (mu) parameter treated belonging null hypothesis. Defaults NULL. prior_heterogeneity_null prior distribution heterogeneity tau parameter treated belonging null hypothesis. Defaults NULL. prior_bias_null prior distribution publication bias adjustment component treated belonging null hypothesis. Defaults NULL. prior_hierarchical_null prior distribution correlation random effects (rho) parameter treated belonging null hypothesis. Defaults NULL. study_names optional argument names studies chains number chains MCMC algorithm. adapt number adaptation iterations MCMC algorithm. Defaults 500. burnin number burnin iterations MCMC algorithm. Defaults 2000. sample number sampling iterations MCMC algorithm. Defaults 5000. thin thinning chains MCMC algorithm. Defaults 1. autofit whether model fitted convergence criteria (specified autofit_control) satisfied. Defaults TRUE. parallel whether individual models fitted parallel. Defaults FALSE. implementation completely stable might cause connection error. autofit_control allows pass autofit control settings set_autofit_control() function. See ?set_autofit_control options default settings. convergence_checks automatic convergence checks assess fitted models, passed set_convergence_checks() function. See ?set_convergence_checks options default settings. save whether models posterior distributions kept obtaining model-averaged result. Defaults \"\" remove anything. Set \"min\" significantly reduce size final object, however, model diagnostics manipulation object possible. seed seed set model fitting, marginal likelihood computation, posterior mixing reproducibility results. Defaults NULL - seed set. silent whether print messages regarding fitting process suppressed. Defaults TRUE. Note parallel = TRUE also suppresses messages. ... additional arguments.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.RoBMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates a fitted RoBMA object — update.RoBMA","text":"RoBMA returns object class 'RoBMA'.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.RoBMA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Updates a fitted RoBMA object — update.RoBMA","text":"See RoBMA() details.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/update.RoBMA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updates a fitted RoBMA object — update.RoBMA","text":"","code":"if (FALSE) { # \\dontrun{ # using the example data from Bem 2011 and fitting the default (RoBMA-PSMA) model fit <- RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study)  # the update function allows us to change the prior model weights of each model fit1 <- update(fit, prior_weights = c(0, rep(1, 35)))  # add an additional model with different priors specification # (see '?prior' for more information) fit2 <- update(fit,                priors_effect_null = prior(\"point\", parameters = list(location = 0)),                priors_heterogeneity = prior(\"normal\",                                   parameters = list(mean = 0, sd = 1),                                   truncation = list(lower = 0, upper = Inf)),                priors_bias = prior_weightfunction(\"one-sided\",                                     parameters = list(cuts = c(.05, .10, .20),                                                       alpha = c(1, 1, 1, 1))))  # update the models with an increased number of sample iterations fit3 <- update(fit, autofit_control = set_autofit_control(sample_extend = 1000), extend_all = TRUE) } # }"},{"path":"https://https://fbartos.github.io/RoBMA/reference/weighted_multivariate_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted multivariate normal distribution — weighted_multivariate_normal","title":"Weighted multivariate normal distribution — weighted_multivariate_normal","text":"Density function weighted multivariate normal distribution mean, covariance matrix sigma, critical values crit_x, weights omega.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/weighted_multivariate_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted multivariate normal distribution — weighted_multivariate_normal","text":"x quantiles. p vector probabilities. mean mean sigma covariance matrix. crit_x vector critical values defining steps. omega vector weights defining probability observing t-statistics two steps. type type weight function (defaults \"two.sided\"). log, log.p logical; TRUE, probabilities p given log(p).","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/weighted_multivariate_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted multivariate normal distribution — weighted_multivariate_normal","text":".dwmnorm_fast returns density multivariate weighted normal distribution.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/reference/weighted_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted normal distribution — weighted_normal","title":"Weighted normal distribution — weighted_normal","text":"Density, distribution function, quantile function random generation weighted normal distribution mean, standard deviation sd, steps steps (critical values) crit_x), weights omega.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/weighted_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted normal distribution — weighted_normal","text":"","code":"dwnorm(   x,   mean,   sd,   steps = if (!is.null(crit_x)) NULL,   omega,   crit_x = if (!is.null(steps)) NULL,   type = \"two.sided\",   log = FALSE )  pwnorm(   q,   mean,   sd,   steps = if (!is.null(crit_x)) NULL,   omega,   crit_x = if (!is.null(steps)) NULL,   type = \"two.sided\",   lower.tail = TRUE,   log.p = FALSE )  qwnorm(   p,   mean,   sd,   steps = if (!is.null(crit_x)) NULL,   omega,   crit_x = if (!is.null(steps)) NULL,   type = \"two.sided\",   lower.tail = TRUE,   log.p = FALSE )  rwnorm(   n,   mean,   sd,   steps = if (!is.null(crit_x)) NULL,   omega,   crit_x = if (!is.null(steps)) NULL,   type = \"two.sided\" )"},{"path":"https://https://fbartos.github.io/RoBMA/reference/weighted_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted normal distribution — weighted_normal","text":"x, q vector quantiles. mean mean sd standard deviation. steps vector steps weight function. omega vector weights defining probability observing t-statistics two steps. crit_x vector critical values defining steps (steps supplied). type type weight function (defaults \"two.sided\"). log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities \\(P[X \\le x]\\), otherwise, \\(P[X \\ge x]\\). p vector probabilities. n number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/weighted_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted normal distribution — weighted_normal","text":"dwnorm gives density, dwnorm gives distribution function, qwnorm gives quantile function, rwnorm generates random deviates.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/reference/weighted_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted normal distribution — weighted_normal","text":"mean, sd, steps, omega can supplied vectors (mean, sd) matrices (steps, omega) length / number rows equal x/q/ p. Otherwise, recycled length result.","code":""},{"path":[]},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-3-5-1","dir":"Changelog","previous_headings":"","what":"Features","title":"version 3.5.1","text":"summary() function now supports standardized_coefficients argument report either standardized (default) raw meta-regression coefficients extract() function extracts posterior samples model parameters true_effects() function summarize true effect size estimates","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-3-5-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 3.5.1","text":"fitting meta-regression using predictors missing values result clear error message","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"changes-3-5-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"version 3.5.1","text":"improving speed unit tests","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-3-5","dir":"Changelog","previous_headings":"","what":"Features","title":"version 3.5","text":"approximate computationally feasibly 3lvl selection models via RoBMA() RoBMA.reg() functions study_ids argument using algorithm = \"ss\" 3lvl binomial-normal models binary data via BiBMA BiBMA.reg functions study_ids argument using algorithm = \"ss\" pooled_effect() function compute pooled effect size RoBMA.reg, NoBMA.reg, BiBMA.reg models adjusted_effect() function compute adjusted effect size RoBMA.reg, NoBMA.reg, BiBMA.reg models enables summary_heterogeneity() BiBMA models","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-3-5","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 3.5","text":"passing checks study_ids study_labels arguments PEESE prior distribution now scale 1/scale instead 1/scale^2 rescale_priors argument conditional prediction interval based summary_heterogeneity() now conditional presence effect additional minor prior handling fixes (.e., missing marginal estimates alternative prior distributions specified etc) diagnostics mixture baseline priors using algorithm = \"ss\" summary_heterogeneity() single study produce relative heterogeneity instead crashing","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-3-4","dir":"Changelog","previous_headings":"","what":"Features","title":"version 3.4","text":"adding binomial-normal meta-regression models binary data via BiBMA.reg function spike slab algorithm faster model estimation via algorithm = \"ss\" argument BiBMA models default prior distributions parameters BiBMA models now set via set_default_binomial_priors() function","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-3-3","dir":"Changelog","previous_headings":"","what":"Features","title":"version 3.3","text":"spike slab algorithm faster model estimation via algorithm = \"ss\" argument (see new vignette details) refactoring JAGS C++ code weighted distributions exporting lpdfs JAGS (maintenance) weights_mix JAGS prior distribution sample mixture weight functions directly","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-3-3","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 3.3","text":"incorrectly omitting models one predictor computing conditional marginal summary","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-3-2-1","dir":"Changelog","previous_headings":"","what":"Features","title":"version 3.2.1","text":"default prior distributions parameters now set via set_default_priors() function rescale_priors argument allows conveniently re-scale prior distributions effect, heterogeneity, bias simultaneously","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-3-2","dir":"Changelog","previous_headings":"","what":"Features","title":"version 3.2","text":"summary_heterogeneity() function summarize heterogeneity RoBMA models (prediction interval, tau, tau^2, ^2, H^2) check_RoBMA_convergence() function check convergence RoBMA models adds informed prior distributions binary time--event outcomes via BayesTools 0.2.17","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-3-2","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 3.2","text":"checking fixing number available cores upon loading package (hopefully fixes parallelization issues) update() function re-evaluates convergence checks individual models (https://github.com/FBartos/RoBMA/issues/34) typos minor issues vignettes","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-3-1","dir":"Changelog","previous_headings":"","what":"Features","title":"version 3.1","text":"binomial-normal models binary data via BiBMA function NoBMA NoBMA.reg() functions wrappers around RoBMA RoBMA.reg() functions simpler specification publication bias unadjusted Bayesian model-averaged meta-analysis adding odds ratios output transformation` extending (instead complete refitting) models via update.RoBMA() function (non-converged models default setting extend_all = TRUE)","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-3-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 3.1","text":"handling non-converged models","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-301","dir":"Changelog","previous_headings":"","what":"version 3.0.1","title":"version 3.0.1","text":"CRAN release: 2023-06-02","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-thanks-to-don--rens-3-0-1","dir":"Changelog","previous_headings":"","what":"Fixes (thanks to Don & Rens)","title":"version 3.0.1","text":"compilation issues Clang (https://github.com/FBartos/RoBMA/issues/28) lapack path specifications (https://github.com/FBartos/RoBMA/issues/24)","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-3-0","dir":"Changelog","previous_headings":"","what":"Features","title":"version 3.0","text":"meta-regression RoBMA.reg() function posterior marginal summary plots RoBMA.reg models summary_marginal() plot_marginal() functions new vignette hierarchical Bayesian model-averaged meta-analysis new vignette robust Bayesian model-averaged meta-regression adding vignette AMPPS tutorial faster implementation JAGS multivariate normal distribution (based BUGS JAGS module) incorporating weight argument RoBMA combine_data functions order pass custom likelihood weights ability use inverse square weights weighted meta-analysis setting weighted_type = \"inverse_sqrt\" argument","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"changes-3-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"version 3.0","text":"reworked interface hierarchical models. Prior distributions now specified via priors_hierarchical priors_hierarchical_null arguments instead priors_rho priors_rho_null. model summary now shows Hierarchical component summary.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-232","dir":"Changelog","previous_headings":"","what":"version 2.3.2","title":"version 2.3.2","text":"CRAN release: 2023-03-13","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-2-3-2","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 2.3.2","text":"suppressing start-message cleaning imports","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-231","dir":"Changelog","previous_headings":"","what":"version 2.3.1","title":"version 2.3.1","text":"CRAN release: 2022-07-16","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-2-3-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 2.3.1","text":"fixing weighted meta-analysis parameterization","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-2-3","dir":"Changelog","previous_headings":"","what":"Features","title":"version 2.3","text":"weighted meta-analysis specifying study_ids argument RoBMA() setting weighted = TRUE. likelihood contribution estimates study -weighted proportionally number estimates study. Note experimental feature supposed provide conservative alternative estimating RoBMA cases multiple estimates study multivariate option computationally feasible.","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-2-2-3","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 2.2.3","text":"updating Makevars install R 4.2 JAGS 4.3.1","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-222","dir":"Changelog","previous_headings":"","what":"version 2.2.2","title":"version 2.2.2","text":"CRAN release: 2022-04-20","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-2-2-2","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 2.2.2","text":"updating C++ compile M1 Mac","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-221","dir":"Changelog","previous_headings":"","what":"version 2.2.1","title":"version 2.2.1","text":"CRAN release: 2022-04-06","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"changes-2-2-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"version 2.2.1","text":"message effect size scale parameter estimates always shown compatibility BayesTools 0.2.0+","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-2-2","dir":"Changelog","previous_headings":"","what":"Features","title":"version 2.2","text":"three-level meta-analysis specifying study_ids argument RoBMA. However, note (1) experimental feature (2) computational expense fitting selection models clustering extreme. now, almost impossible 2-3 estimates clustered within single study).","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-212","dir":"Changelog","previous_headings":"","what":"version 2.1.2","title":"version 2.1.2","text":"CRAN release: 2022-01-12","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-2-1-2","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 2.1.2","text":"adding Windows ucrt patch (thanks Tomas Kalibera) adding BayesTools version check","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-211","dir":"Changelog","previous_headings":"","what":"version 2.1.1","title":"version 2.1.1","text":"CRAN release: 2021-11-03","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-2-1-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 2.1.1","text":"incorrectly formatted citations vignettes capitalization","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-2-1-1","dir":"Changelog","previous_headings":"","what":"Features","title":"version 2.1.1","text":"adding informed_prior() function (BayesTools package) allows specification various informed prior distributions field medicine psychology adding vignette reproducing example dentine sensitivity informed Bayesian model-averaged meta-analysis Bartoš et al., 2021 (open-access), reductions fitted object size setting save = \"min\"","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-2-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 2.1","text":"informative error message JAGS module fails load correcting wrong PEESE transformation individual models summaries (issue #12) fixing error message missing conditional PET-PEESE fixing incorrect lower bound check log()","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-2-1","dir":"Changelog","previous_headings":"","what":"Features","title":"version 2.1","text":"adding interpret() function (issue #11) adding effect size transformation via output_scale argument plot() plot_models() functions better handling effect size transformations scaling - BayesTools style back-end functions Jacobian transformations","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-20","dir":"Changelog","previous_headings":"","what":"version 2.0","title":"version 2.0","text":"Please notice major release breaks backwards compatibility.","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"changes-2-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"version 2.0","text":"naming arguments specifying prior distributions different parameters/components models changed (priors_mu -> priors_effect, priors_tau -> priors_heterogeneity, priors_omega -> priors_bias), prior distributions specifying weight functions now use dedicated function (prior(distribution = \"two.sided\", parameters = ...) -> prior_weightfunction(distribution = \"two.sided\", parameters = ...)), new dedicated function specifying publication bias adjustment component / heterogeneity component (prior_none()), new dedicated functions specifying models PET PEESE publication bias adjustments (prior_PET(distribution = \"Cauchy\", parameters = ...) prior_PEESE(distribution = \"Cauchy\", parameters = ...)), new default prior distribution specification publication bias adjustment part models (corresponding RoBMA-PSMA model Bartoš et al., 2021 manuscript), new model_type argument allowing specify different “pre-canned” models (\"PSMA\" = RoBMA-PSMA, \"PP\" = RoBMA-PP, \"2w\" = corresponding Maier et al., press , manuscript), combine_data function allows combination different effect sizes / variability measures common effect size measure (also used within RoBMA function), better improved automatic fitting procedure now enabled default (can turned autofit = FALSE) prior distributions can specified different scale supplied effect sizes (package fits model Fisher’s z scale back transforms results back scale used prior distributions specification, Cohen’s d default, can overwritten prior_scale transformation arguments), new prior distributions, e.g., beta fixed weight functions, estimates individual models now plotted plot_models() function forest plot can obtained forest() function, posterior distribution plots individual weights able supported, however, weightfunction PET-PEESE publication bias adjustments can visualized plot.RoBMA() function parameter = \"weightfunction\" parameter = \"PET-PEESE\".","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-121","dir":"Changelog","previous_headings":"","what":"version 1.2.1","title":"version 1.2.1","text":"CRAN release: 2021-02-16","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-2-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 1.2.1","text":"check_setup function working ","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-120","dir":"Changelog","previous_headings":"","what":"version 1.2.0","title":"version 1.2.0","text":"CRAN release: 2021-01-21","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"version 1.2.0","text":"studies’s true effects now marginalized random effects models longer estimated (see Appendix manuscript details). results, arguments referring true effects now disabled. models now estimated using likelihood effect sizes (instead test-statistics usually defined). reproduced simulation study used evaluate method performance achieved identical results (MCMC error, marginalizing true effects). big advantage using normal likelihood effect sizes considerable speed whole estimation process. results two changes, results models differ pre 1.2.0 version","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 1.2.0","text":"autofit turn control argument specified","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-112","dir":"Changelog","previous_headings":"","what":"version 1.1.2","title":"version 1.1.2","text":"CRAN release: 2020-12-10","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-1-2","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 1.1.2","text":"vdiffr used conditionally unit tests","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-111","dir":"Changelog","previous_headings":"","what":"version 1.1.1","title":"version 1.1.1","text":"CRAN release: 2020-11-10","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"version 1.1.1","text":"inability fit model without specifying seed inability produce individual model plots due incompatibility newer versions ggplot2","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-110","dir":"Changelog","previous_headings":"","what":"version 1.1.0","title":"version 1.1.0","text":"CRAN release: 2020-10-30","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-1-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"version 1.1.0","text":"parallel within model fitting using parallel package ‘parallel = TRUE’ argument","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-105","dir":"Changelog","previous_headings":"","what":"version 1.0.5","title":"version 1.0.5","text":"CRAN release: 2020-10-13","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-0-5","dir":"Changelog","previous_headings":"","what":"Fixes:","title":"version 1.0.5","text":"models fitted automatically reaching R-hat lower 1.05 without setting max_rhat autofit control parameters bug preventing draw bivariate plot mu tau range parameter estimates individual models containing 0 (1 case measured effect sizes) inability fit model null mu distributions correlation measured effect sizes specified ordering estimated observed effects requested simultaneously formatting file (NEWS.md)","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"improvements-1-0-5","dir":"Changelog","previous_headings":"","what":"Improvements:","title":"version 1.0.5","text":"priors plot: parameter specification, default plotting range, clearer x-axis labels cases parameter defined transformed scale parameters plots: probability scale always ends spot last tick density scale adding warnings specified models Rhat higher 1.05 specified value grouping warnings messages together","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-104","dir":"Changelog","previous_headings":"","what":"version 1.0.4","title":"version 1.0.4","text":"CRAN release: 2020-08-07","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-0-4","dir":"Changelog","previous_headings":"","what":"Fixes:","title":"version 1.0.4","text":"inability run models without silent = TRUE control","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"version-103","dir":"Changelog","previous_headings":"","what":"version 1.0.3","title":"version 1.0.3","text":"CRAN release: 2020-08-06","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"features-1-0-3","dir":"Changelog","previous_headings":"","what":"Features:","title":"version 1.0.3","text":"x-axis rescaling weight function plot (setting ‘rescale_x = TRUE’ ‘plot.RoBMA’ function) setting expected direction effect RoBMA function","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-0-3","dir":"Changelog","previous_headings":"","what":"Fixes:","title":"version 1.0.3","text":"marginal likelihood calculation models spike prior distribution mean parameter location set 0 additional error messages","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"cram-requested-changes-1-0-3","dir":"Changelog","previous_headings":"","what":"CRAM requested changes:","title":"version 1.0.3","text":"changing information messages ‘cat’ ‘message’ plot related functions saving returning ‘par’ settings user defined one base plot functions","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Fixes:","title":"version 1.0.2","text":"summary plot function now shows quantile based confidence intervals individual models instead HPD provided (affects ‘summary’/‘plot’ ‘type = “individual”’, confidence intervals quantile based )","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Fixes:","title":"version 1.0.1","text":"summary function returning median instead mean","code":""},{"path":[]},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Fixes:","title":"version 1.0.0 (vs the osf version)","text":"incorrectly weighted theta estimates models non-zero point prior distribution incorrectly plotted using “models” option case mu parameter transformed","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"additional-features-1-0-0","dir":"Changelog","previous_headings":"","what":"Additional features:","title":"version 1.0.0 (vs the osf version)","text":"analyzing distributions implemented using boost library (helps convergence issues) ability mute non-suppressible “precision achieved” warning messages using “silent” = TRUE inside control argument vignettes","code":""},{"path":"https://https://fbartos.github.io/RoBMA/news/index.html","id":"notable-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Notable changes:","title":"version 1.0.0 (vs the osf version)","text":"way seed set model fitting (simulation study reproducible new version package)","code":""}]
